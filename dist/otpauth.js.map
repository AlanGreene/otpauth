{"version":3,"sources":["webpack://OTPAuth/ [synthetic:base] ","webpack://OTPAuth/ [synthetic:util/global] ","webpack://OTPAuth/webpack/universalModuleDefinition","webpack://OTPAuth//tmp/tmp-14537sKbZdJujo0pa.tmp","webpack://OTPAuth/webpack/bootstrap","webpack://OTPAuth/otpauth.js","webpack://OTPAuth/./src/utils.js","webpack://OTPAuth/./src/crypto.js","webpack://OTPAuth/(webpack)/buildin/global.js","webpack://OTPAuth/./src/otp.js","webpack://OTPAuth/./src/uri.js","webpack://OTPAuth/./src/secret.js","webpack://OTPAuth/./src/main.js"],"names":["$jscomp","scope","getGlobal","maybeGlobal","window","global","this","factory$jscomp$inline_1","a","__webpack_require__","moduleId","installedModules","exports","module","i","l","modules","call","m","c","d","__webpack_require__.d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","__webpack_require__.r","value","n","__webpack_require__.n","__esModule","getDefault","getModuleExports","__webpack_require__.o","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","Utils","InternalUtils","uint","decode","Utils.uint.decode","buf","arr","Uint8Array","num","length","encode","Utils.uint.encode","ArrayBuffer","acc","raw","Utils.raw.decode","str","String","fromCharCode","Utils.raw.encode","charCodeAt","b32","alphabet","Utils.b32.decode","bits","Utils.b32.encode","strUpp","toUpperCase","index","idx","indexOf","TypeError","hex","Utils.hex.decode","hexByte","toString","Utils.hex.encode","parseInt","substr","isNode","process","require","InternalUtils.require","eval","sjcl","cipher","hash","keyexchange","mode","misc","codec","exception","corrupt","message","this.toString","invalid","bug","notReady","bitArray","bitSlice","bstart","bend","_shiftRight","slice","undefined","clamp","extract","blength","sh","Math","floor","concat","a1","a2","last","shift","getPartial","bitLength","len","ceil","partial","x","_end","round","equal","b","carry","out","push","shift2","pop","_xor4","y","byteswapM","v","globals","globals.ArrayBuffer","DataView","globals.DataView","arrayBuffer","fromBits","padding","padding_count","ol","tmp","setUint32","byteLength","buffer","smallest","setUint8","getUint8","toBits","inView","getUint32","hexDumpBuffer","stringBufferView","string","JSCompiler_inline_result","getUint16","width","Array","join","console","log","sha1","sjcl.hash.sha1","_h","_buffer","_length","reset","sjcl.hash.sha1.hash","data","update","finalize","blockSize","_init","utf8String","nl","Uint32Array","j","_block","subarray","splice","h","_key","_f","t","_S","words","w","e","sha256","sjcl.hash.sha256","_precompute","sjcl.hash.sha256.hash","frac","prime","factor","isPrime","pow","k","h0","h1","h2","h3","h4","h5","h6","h7","sha512","sjcl.hash.sha512","sjcl.hash.sha512.hash","_initr","_keyr","frac2","h0h","h0l","h1h","h1l","h2h","h2l","h3h","h3l","h4h","h4l","h5h","h5l","h6h","h6l","h7h","h7l","ah","al","bh","bl","ch","cl","dh","dl","eh","el","fh","fl","gh","gl","hh","hl","wrh","wrl","gamma0xh","gamma0xl","gamma0h","gamma0l","gamma1xh","gamma1xl","gamma1h","gamma1l","wr7h","wr16h","wr16l","chh","chl","majh","majl","sigma0h","sigma0l","krh","krl","t1l","t1h","t2l","t2h","hmac","sjcl.misc.hmac","key","Hash","_hash","exKey","bs","_baseHash","_resultHash","encrypt","mac","sjcl.misc.hmac.prototype.mac","_updated","digest","sjcl.misc.hmac.prototype.reset","sjcl.misc.hmac.prototype.update","sjcl.misc.hmac.prototype.digest","result","Crypto","sjcl__WEBPACK_IMPORTED_MODULE_0__","NodeCrypto","bufferFrom","Buffer","from","arrbuf","nodeBuf","bufferTo","randomBytes","Crypto.randomBytes","size","hmacDigest","Crypto.hmacDigest","algorithm","createHmac","crypto","getRandomValues","msCrypto","warn","random","toLowerCase","g","Function","constructor","otp_TOTP","config","$jscomp$destructuring$var7","issuer","label","secret","secret_Secret","digits","period","otp_HOTP","$jscomp$destructuring$var2","counter","uri_URI","$jscomp$destructuring$var0","src_crypto","utils","fromRaw","fromB32","fromHex","defineProperties","writable","OTPURI_REGEX","SECRET_REGEX","ALGORITHM_REGEX","INTEGER_REGEX","POSITIVE_INTEGER_REGEX","parse","uri","uriGroups","decodeURIComponent","match","err","isArray","URIError","uriType","uriLabel","split","uriParams","reduce","cur","pairArr","pairKey","OTP","test","stringify","otp","legacyIssuer","isTOTP","encodeURI","generate","pad","offset","validate","token","searchToken","generatedToken","timestamp","Date","now","version","factory","define","amd","OTPAuth","root"],"mappings":"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","file":"otpauth.js","sourcesContent":[null,null,"(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"OTPAuth\"] = factory();\n\telse\n\t\troot[\"OTPAuth\"] = factory();\n})(this, function() {\nreturn ","/** @fileOverview Javascript cryptography implementation.\n *\n * Crush to remove comments, shorten variable names and\n * generally reduce transmission size.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n\"use strict\";\n/*jslint indent: 2, bitwise: false, nomen: false, plusplus: false, white: false, regexp: false */\n/*global document, window, escape, unescape, module, require, Uint32Array */\n\n/**\n * The Stanford Javascript Crypto Library, top-level namespace.\n * @namespace\n */\nvar sjcl = {\n  /**\n   * Symmetric ciphers.\n   * @namespace\n   */\n  cipher: {},\n\n  /**\n   * Hash functions.  Right now only SHA256 is implemented.\n   * @namespace\n   */\n  hash: {},\n\n  /**\n   * Key exchange functions.  Right now only SRP is implemented.\n   * @namespace\n   */\n  keyexchange: {},\n  \n  /**\n   * Cipher modes of operation.\n   * @namespace\n   */\n  mode: {},\n\n  /**\n   * Miscellaneous.  HMAC and PBKDF2.\n   * @namespace\n   */\n  misc: {},\n  \n  /**\n   * Bit array encoders and decoders.\n   * @namespace\n   *\n   * @description\n   * The members of this namespace are functions which translate between\n   * SJCL's bitArrays and other objects (usually strings).  Because it\n   * isn't always clear which direction is encoding and which is decoding,\n   * the method names are \"fromBits\" and \"toBits\".\n   */\n  codec: {},\n  \n  /**\n   * Exceptions.\n   * @namespace\n   */\n  exception: {\n    /**\n     * Ciphertext is corrupt.\n     * @constructor\n     */\n    corrupt: function(message) {\n      this.toString = function() { return \"CORRUPT: \"+this.message; };\n      this.message = message;\n    },\n    \n    /**\n     * Invalid parameter.\n     * @constructor\n     */\n    invalid: function(message) {\n      this.toString = function() { return \"INVALID: \"+this.message; };\n      this.message = message;\n    },\n    \n    /**\n     * Bug or missing feature in SJCL.\n     * @constructor\n     */\n    bug: function(message) {\n      this.toString = function() { return \"BUG: \"+this.message; };\n      this.message = message;\n    },\n\n    /**\n     * Something isn't ready.\n     * @constructor\n     */\n    notReady: function(message) {\n      this.toString = function() { return \"NOT READY: \"+this.message; };\n      this.message = message;\n    }\n  }\n};\n/** @fileOverview Arrays of bits, encoded as arrays of Numbers.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Arrays of bits, encoded as arrays of Numbers.\n * @namespace\n * @description\n * <p>\n * These objects are the currency accepted by SJCL's crypto functions.\n * </p>\n *\n * <p>\n * Most of our crypto primitives operate on arrays of 4-byte words internally,\n * but many of them can take arguments that are not a multiple of 4 bytes.\n * This library encodes arrays of bits (whose size need not be a multiple of 8\n * bits) as arrays of 32-bit words.  The bits are packed, big-endian, into an\n * array of words, 32 bits at a time.  Since the words are double-precision\n * floating point numbers, they fit some extra data.  We use this (in a private,\n * possibly-changing manner) to encode the number of bits actually  present\n * in the last word of the array.\n * </p>\n *\n * <p>\n * Because bitwise ops clear this out-of-band data, these arrays can be passed\n * to ciphers like AES which want arrays of words.\n * </p>\n */\nsjcl.bitArray = {\n  /**\n   * Array slices in units of bits.\n   * @param {bitArray} a The array to slice.\n   * @param {Number} bstart The offset to the start of the slice, in bits.\n   * @param {Number} bend The offset to the end of the slice, in bits.  If this is undefined,\n   * slice until the end of the array.\n   * @return {bitArray} The requested slice.\n   */\n  bitSlice: function (a, bstart, bend) {\n    a = sjcl.bitArray._shiftRight(a.slice(bstart/32), 32 - (bstart & 31)).slice(1);\n    return (bend === undefined) ? a : sjcl.bitArray.clamp(a, bend-bstart);\n  },\n\n  /**\n   * Extract a number packed into a bit array.\n   * @param {bitArray} a The array to slice.\n   * @param {Number} bstart The offset to the start of the slice, in bits.\n   * @param {Number} blength The length of the number to extract.\n   * @return {Number} The requested slice.\n   */\n  extract: function(a, bstart, blength) {\n    // FIXME: this Math.floor is not necessary at all, but for some reason\n    // seems to suppress a bug in the Chromium JIT.\n    var x, sh = Math.floor((-bstart-blength) & 31);\n    if ((bstart + blength - 1 ^ bstart) & -32) {\n      // it crosses a boundary\n      x = (a[bstart/32|0] << (32 - sh)) ^ (a[bstart/32+1|0] >>> sh);\n    } else {\n      // within a single word\n      x = a[bstart/32|0] >>> sh;\n    }\n    return x & ((1<<blength) - 1);\n  },\n\n  /**\n   * Concatenate two bit arrays.\n   * @param {bitArray} a1 The first array.\n   * @param {bitArray} a2 The second array.\n   * @return {bitArray} The concatenation of a1 and a2.\n   */\n  concat: function (a1, a2) {\n    if (a1.length === 0 || a2.length === 0) {\n      return a1.concat(a2);\n    }\n    \n    var last = a1[a1.length-1], shift = sjcl.bitArray.getPartial(last);\n    if (shift === 32) {\n      return a1.concat(a2);\n    } else {\n      return sjcl.bitArray._shiftRight(a2, shift, last|0, a1.slice(0,a1.length-1));\n    }\n  },\n\n  /**\n   * Find the length of an array of bits.\n   * @param {bitArray} a The array.\n   * @return {Number} The length of a, in bits.\n   */\n  bitLength: function (a) {\n    var l = a.length, x;\n    if (l === 0) { return 0; }\n    x = a[l - 1];\n    return (l-1) * 32 + sjcl.bitArray.getPartial(x);\n  },\n\n  /**\n   * Truncate an array.\n   * @param {bitArray} a The array.\n   * @param {Number} len The length to truncate to, in bits.\n   * @return {bitArray} A new array, truncated to len bits.\n   */\n  clamp: function (a, len) {\n    if (a.length * 32 < len) { return a; }\n    a = a.slice(0, Math.ceil(len / 32));\n    var l = a.length;\n    len = len & 31;\n    if (l > 0 && len) {\n      a[l-1] = sjcl.bitArray.partial(len, a[l-1] & 0x80000000 >> (len-1), 1);\n    }\n    return a;\n  },\n\n  /**\n   * Make a partial word for a bit array.\n   * @param {Number} len The number of bits in the word.\n   * @param {Number} x The bits.\n   * @param {Number} [_end=0] Pass 1 if x has already been shifted to the high side.\n   * @return {Number} The partial word.\n   */\n  partial: function (len, x, _end) {\n    if (len === 32) { return x; }\n    return (_end ? x|0 : x << (32-len)) + len * 0x10000000000;\n  },\n\n  /**\n   * Get the number of bits used by a partial word.\n   * @param {Number} x The partial word.\n   * @return {Number} The number of bits used by the partial word.\n   */\n  getPartial: function (x) {\n    return Math.round(x/0x10000000000) || 32;\n  },\n\n  /**\n   * Compare two arrays for equality in a predictable amount of time.\n   * @param {bitArray} a The first array.\n   * @param {bitArray} b The second array.\n   * @return {boolean} true if a == b; false otherwise.\n   */\n  equal: function (a, b) {\n    if (sjcl.bitArray.bitLength(a) !== sjcl.bitArray.bitLength(b)) {\n      return false;\n    }\n    var x = 0, i;\n    for (i=0; i<a.length; i++) {\n      x |= a[i]^b[i];\n    }\n    return (x === 0);\n  },\n\n  /** Shift an array right.\n   * @param {bitArray} a The array to shift.\n   * @param {Number} shift The number of bits to shift.\n   * @param {Number} [carry=0] A byte to carry in\n   * @param {bitArray} [out=[]] An array to prepend to the output.\n   * @private\n   */\n  _shiftRight: function (a, shift, carry, out) {\n    var i, last2=0, shift2;\n    if (out === undefined) { out = []; }\n    \n    for (; shift >= 32; shift -= 32) {\n      out.push(carry);\n      carry = 0;\n    }\n    if (shift === 0) {\n      return out.concat(a);\n    }\n    \n    for (i=0; i<a.length; i++) {\n      out.push(carry | a[i]>>>shift);\n      carry = a[i] << (32-shift);\n    }\n    last2 = a.length ? a[a.length-1] : 0;\n    shift2 = sjcl.bitArray.getPartial(last2);\n    out.push(sjcl.bitArray.partial(shift+shift2 & 31, (shift + shift2 > 32) ? carry : out.pop(),1));\n    return out;\n  },\n  \n  /** xor a block of 4 words together.\n   * @private\n   */\n  _xor4: function(x,y) {\n    return [x[0]^y[0],x[1]^y[1],x[2]^y[2],x[3]^y[3]];\n  },\n\n  /** byteswap a word array inplace.\n   * (does not handle partial words)\n   * @param {sjcl.bitArray} a word array\n   * @return {sjcl.bitArray} byteswapped array\n   */\n  byteswapM: function(a) {\n    var i, v, m = 0xff00;\n    for (i = 0; i < a.length; ++i) {\n      v = a[i];\n      a[i] = (v >>> 24) | ((v >>> 8) & m) | ((v & m) << 8) | (v << 24);\n    }\n    return a;\n  }\n};\n/** @fileOverview Bit array codec implementations.\n *\n * @author Marco Munizaga\n */\n\n//patch arraybuffers if they don't exist\nif (typeof(ArrayBuffer) === 'undefined') {\n  (function(globals){\n      \"use strict\";\n      globals.ArrayBuffer = function(){};\n      globals.DataView = function(){};\n  }(this));\n}\n\n/**\n * ArrayBuffer\n * @namespace\n */\nsjcl.codec.arrayBuffer = {\n  /** Convert from a bitArray to an ArrayBuffer. \n   * Will default to 8byte padding if padding is undefined*/\n  fromBits: function (arr, padding, padding_count) {\n    var out, i, ol, tmp, smallest;\n    padding = padding==undefined  ? true : padding;\n    padding_count = padding_count || 8;\n\n    if (arr.length === 0) {\n      return new ArrayBuffer(0);\n    }\n\n    ol = sjcl.bitArray.bitLength(arr)/8;\n\n    //check to make sure the bitLength is divisible by 8, if it isn't \n    //we can't do anything since arraybuffers work with bytes, not bits\n    if ( sjcl.bitArray.bitLength(arr)%8 !== 0 ) {\n      throw new sjcl.exception.invalid(\"Invalid bit size, must be divisble by 8 to fit in an arraybuffer correctly\");\n    }\n\n    if (padding && ol%padding_count !== 0){\n      ol += padding_count - (ol%padding_count);\n    }\n\n\n    //padded temp for easy copying\n    tmp = new DataView(new ArrayBuffer(arr.length*4));\n    for (i=0; i<arr.length; i++) {\n      tmp.setUint32(i*4, (arr[i]<<32)); //get rid of the higher bits\n    }\n\n    //now copy the final message if we are not going to 0 pad\n    out = new DataView(new ArrayBuffer(ol));\n\n    //save a step when the tmp and out bytelength are ===\n    if (out.byteLength === tmp.byteLength){\n      return tmp.buffer;\n    }\n\n    smallest = tmp.byteLength < out.byteLength ? tmp.byteLength : out.byteLength;\n    for(i=0; i<smallest; i++){\n      out.setUint8(i,tmp.getUint8(i));\n    }\n\n\n    return out.buffer;\n  },\n\n  toBits: function (buffer) {\n    var i, out=[], len, inView, tmp;\n\n    if (buffer.byteLength === 0) {\n      return [];\n    }\n\n    inView = new DataView(buffer);\n    len = inView.byteLength - inView.byteLength%4;\n\n    for (var i = 0; i < len; i+=4) {\n      out.push(inView.getUint32(i));\n    }\n\n    if (inView.byteLength%4 != 0) {\n      tmp = new DataView(new ArrayBuffer(4));\n      for (var i = 0, l = inView.byteLength%4; i < l; i++) {\n        //we want the data to the right, because partial slices off the starting bits\n        tmp.setUint8(i+4-l, inView.getUint8(len+i)); // big-endian, \n      }\n      out.push(\n        sjcl.bitArray.partial( (inView.byteLength%4)*8, tmp.getUint32(0) )\n      ); \n    }\n    return out;\n  },\n\n\n\n  /** Prints a hex output of the buffer contents, akin to hexdump **/\n  hexDumpBuffer: function(buffer){\n      var stringBufferView = new DataView(buffer);\n      var string = '';\n      var pad = function (n, width) {\n          n = n + '';\n          return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n;\n      };\n\n      for (var i = 0; i < stringBufferView.byteLength; i+=2) {\n          if (i%16 == 0) string += ('\\n'+(i).toString(16)+'\\t');\n          string += ( pad(stringBufferView.getUint16(i).toString(16),4) + ' ');\n      }\n\n      if ( typeof console === undefined ){\n        console = console || {log:function(){}}; //fix for IE\n      }\n      console.log(string.toUpperCase());\n  }\n};\n\n/** @fileOverview Javascript SHA-1 implementation.\n *\n * Based on the implementation in RFC 3174, method 1, and on the SJCL\n * SHA-256 implementation.\n *\n * @author Quinn Slack\n */\n\n/**\n * Context for a SHA-1 operation in progress.\n * @constructor\n */\nsjcl.hash.sha1 = function (hash) {\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 5 big-endian words.\n */\nsjcl.hash.sha1.hash = function (data) {\n  return (new sjcl.hash.sha1()).update(data).finalize();\n};\n\nsjcl.hash.sha1.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 512,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n\tvar c = new Uint32Array(b);\n    \tvar j = 0;\n    \tfor (i = this.blockSize+ol - ((this.blockSize+ol) & (this.blockSize-1)); i <= nl;\n\t\ti+= this.blockSize) {\n      \t    this._block(c.subarray(16 * j, 16 * (j+1)));\n      \t    j += 1;\n    \t}\n    \tb.splice(0, 16 * j);\n    } else {\n    \tfor (i = this.blockSize+ol - ((this.blockSize+ol) & (this.blockSize-1)); i <= nl;\n             i+= this.blockSize) {\n      \t     this._block(b.splice(0,16));\n      \t}\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 5 big-endian words. TODO\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n    // Round out the buffer to a multiple of 16 words, less the 2 length words.\n    for (i = b.length + 2; i & 15; i++) {\n      b.push(0);\n    }\n\n    // append the length\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,16));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-1 initialization vector.\n   * @private\n   */\n  _init:[0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0],\n\n  /**\n   * The SHA-1 hash key.\n   * @private\n   */\n  _key:[0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6],\n\n  /**\n   * The SHA-1 logical functions f(0), f(1), ..., f(79).\n   * @private\n   */\n  _f:function(t, b, c, d) {\n    if (t <= 19) {\n      return (b & c) | (~b & d);\n    } else if (t <= 39) {\n      return b ^ c ^ d;\n    } else if (t <= 59) {\n      return (b & c) | (b & d) | (c & d);\n    } else if (t <= 79) {\n      return b ^ c ^ d;\n    }\n  },\n\n  /**\n   * Circular left-shift operator.\n   * @private\n   */\n  _S:function(n, x) {\n    return (x << n) | (x >>> 32-n);\n  },\n  \n  /**\n   * Perform one cycle of SHA-1.\n   * @param {Uint32Array|bitArray} words one block of words.\n   * @private\n   */\n  _block:function (words) {\n    var t, tmp, a, b, c, d, e,\n    h = this._h;\n    var w;\n    if (typeof Uint32Array !== 'undefined') {\n        // When words is passed to _block, it has 16 elements. SHA1 _block\n        // function extends words with new elements (at the end there are 80 elements). \n        // The problem is that if we use Uint32Array instead of Array, \n        // the length of Uint32Array cannot be changed. Thus, we replace words with a \n        // normal Array here.\n        w = Array(80); // do not use Uint32Array here as the instantiation is slower\n        for (var j=0; j<16; j++){\n            w[j] = words[j];\n        }\n    } else {\n        w = words;\n    }\n\n    a = h[0]; b = h[1]; c = h[2]; d = h[3]; e = h[4]; \n\n    for (t=0; t<=79; t++) {\n      if (t >= 16) {\n        w[t] = this._S(1, w[t-3] ^ w[t-8] ^ w[t-14] ^ w[t-16]);\n      }\n      tmp = (this._S(5, a) + this._f(t, b, c, d) + e + w[t] +\n             this._key[Math.floor(t/20)]) | 0;\n      e = d;\n      d = c;\n      c = this._S(30, b);\n      b = a;\n      a = tmp;\n   }\n\n   h[0] = (h[0]+a) |0;\n   h[1] = (h[1]+b) |0;\n   h[2] = (h[2]+c) |0;\n   h[3] = (h[3]+d) |0;\n   h[4] = (h[4]+e) |0;\n  }\n};\n/** @fileOverview Javascript SHA-256 implementation.\n *\n * An older version of this implementation is available in the public\n * domain, but this one is (c) Emily Stark, Mike Hamburg, Dan Boneh,\n * Stanford University 2008-2010 and BSD-licensed for liability\n * reasons.\n *\n * Special thanks to Aldo Cortesi for pointing out several bugs in\n * this code.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Context for a SHA-256 operation in progress.\n * @constructor\n */\nsjcl.hash.sha256 = function (hash) {\n  if (!this._key[0]) { this._precompute(); }\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 16 big-endian words.\n */\nsjcl.hash.sha256.hash = function (data) {\n  return (new sjcl.hash.sha256()).update(data).finalize();\n};\n\nsjcl.hash.sha256.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 512,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n\tvar c = new Uint32Array(b);\n    \tvar j = 0;\n    \tfor (i = 512+ol - ((512+ol) & 511); i <= nl; i+= 512) {\n      \t    this._block(c.subarray(16 * j, 16 * (j+1)));\n      \t    j += 1;\n    \t}\n    \tb.splice(0, 16 * j);\n    } else {\n\tfor (i = 512+ol - ((512+ol) & 511); i <= nl; i+= 512) {\n      \t    this._block(b.splice(0,16));\n      \t}\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 8 big-endian words.\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n    \n    // Round out the buffer to a multiple of 16 words, less the 2 length words.\n    for (i = b.length + 2; i & 15; i++) {\n      b.push(0);\n    }\n    \n    // append the length\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,16));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-256 initialization vector, to be precomputed.\n   * @private\n   */\n  _init:[],\n  /*\n  _init:[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19],\n  */\n  \n  /**\n   * The SHA-256 hash key, to be precomputed.\n   * @private\n   */\n  _key:[],\n  /*\n  _key:\n    [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n     0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n     0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n     0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n     0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n     0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n     0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n     0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2],\n  */\n\n\n  /**\n   * Function to precompute _init and _key.\n   * @private\n   */\n  _precompute: function () {\n    var i = 0, prime = 2, factor, isPrime;\n\n    function frac(x) { return (x-Math.floor(x)) * 0x100000000 | 0; }\n\n    for (; i<64; prime++) {\n      isPrime = true;\n      for (factor=2; factor*factor <= prime; factor++) {\n        if (prime % factor === 0) {\n          isPrime = false;\n          break;\n        }\n      }\n      if (isPrime) {\n        if (i<8) {\n          this._init[i] = frac(Math.pow(prime, 1/2));\n        }\n        this._key[i] = frac(Math.pow(prime, 1/3));\n        i++;\n      }\n    }\n  },\n  \n  /**\n   * Perform one cycle of SHA-256.\n   * @param {Uint32Array|bitArray} w one block of words.\n   * @private\n   */\n  _block:function (w) {  \n    var i, tmp, a, b,\n      h = this._h,\n      k = this._key,\n      h0 = h[0], h1 = h[1], h2 = h[2], h3 = h[3],\n      h4 = h[4], h5 = h[5], h6 = h[6], h7 = h[7];\n\n    /* Rationale for placement of |0 :\n     * If a value can overflow is original 32 bits by a factor of more than a few\n     * million (2^23 ish), there is a possibility that it might overflow the\n     * 53-bit mantissa and lose precision.\n     *\n     * To avoid this, we clamp back to 32 bits by |'ing with 0 on any value that\n     * propagates around the loop, and on the hash state h[].  I don't believe\n     * that the clamps on h4 and on h0 are strictly necessary, but it's close\n     * (for h4 anyway), and better safe than sorry.\n     *\n     * The clamps on h[] are necessary for the output to be correct even in the\n     * common case and for short inputs.\n     */\n    for (i=0; i<64; i++) {\n      // load up the input word for this round\n      if (i<16) {\n        tmp = w[i];\n      } else {\n        a   = w[(i+1 ) & 15];\n        b   = w[(i+14) & 15];\n        tmp = w[i&15] = ((a>>>7  ^ a>>>18 ^ a>>>3  ^ a<<25 ^ a<<14) + \n                         (b>>>17 ^ b>>>19 ^ b>>>10 ^ b<<15 ^ b<<13) +\n                         w[i&15] + w[(i+9) & 15]) | 0;\n      }\n      \n      tmp = (tmp + h7 + (h4>>>6 ^ h4>>>11 ^ h4>>>25 ^ h4<<26 ^ h4<<21 ^ h4<<7) +  (h6 ^ h4&(h5^h6)) + k[i]); // | 0;\n      \n      // shift register\n      h7 = h6; h6 = h5; h5 = h4;\n      h4 = h3 + tmp | 0;\n      h3 = h2; h2 = h1; h1 = h0;\n\n      h0 = (tmp +  ((h1&h2) ^ (h3&(h1^h2))) + (h1>>>2 ^ h1>>>13 ^ h1>>>22 ^ h1<<30 ^ h1<<19 ^ h1<<10)) | 0;\n    }\n\n    h[0] = h[0]+h0 | 0;\n    h[1] = h[1]+h1 | 0;\n    h[2] = h[2]+h2 | 0;\n    h[3] = h[3]+h3 | 0;\n    h[4] = h[4]+h4 | 0;\n    h[5] = h[5]+h5 | 0;\n    h[6] = h[6]+h6 | 0;\n    h[7] = h[7]+h7 | 0;\n  }\n};\n\n\n/** @fileOverview Javascript SHA-512 implementation.\n *\n * This implementation was written for CryptoJS by Jeff Mott and adapted for\n * SJCL by Stefan Thomas.\n *\n * CryptoJS (c) 2009–2012 by Jeff Mott. All rights reserved.\n * Released with New BSD License\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n * @author Jeff Mott\n * @author Stefan Thomas\n */\n\n/**\n * Context for a SHA-512 operation in progress.\n * @constructor\n */\nsjcl.hash.sha512 = function (hash) {\n  if (!this._key[0]) { this._precompute(); }\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 16 big-endian words.\n */\nsjcl.hash.sha512.hash = function (data) {\n  return (new sjcl.hash.sha512()).update(data).finalize();\n};\n\nsjcl.hash.sha512.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 1024,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n        var c = new Uint32Array(b);\n        var j = 0;\n        for (i = 1024+ol - ((1024+ol) & 1023); i <= nl; i+= 1024) {\n            this._block(c.subarray(32 * j, 32 * (j+1)));\n            j += 1;\n        }\n        b.splice(0, 32 * j);\n    } else {\n        for (i = 1024+ol - ((1024+ol) & 1023); i <= nl; i+= 1024) {\n            this._block(b.splice(0,32));\n        }\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 16 big-endian words.\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n\n    // Round out the buffer to a multiple of 32 words, less the 4 length words.\n    for (i = b.length + 4; i & 31; i++) {\n      b.push(0);\n    }\n\n    // append the length\n    b.push(0);\n    b.push(0);\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,32));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-512 initialization vector, to be precomputed.\n   * @private\n   */\n  _init:[],\n\n  /**\n   * Least significant 24 bits of SHA512 initialization values.\n   *\n   * Javascript only has 53 bits of precision, so we compute the 40 most\n   * significant bits and add the remaining 24 bits as constants.\n   *\n   * @private\n   */\n  _initr: [ 0xbcc908, 0xcaa73b, 0x94f82b, 0x1d36f1, 0xe682d1, 0x3e6c1f, 0x41bd6b, 0x7e2179 ],\n\n  /*\n  _init:\n  [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n   0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179],\n  */\n\n  /**\n   * The SHA-512 hash key, to be precomputed.\n   * @private\n   */\n  _key:[],\n\n  /**\n   * Least significant 24 bits of SHA512 key values.\n   * @private\n   */\n  _keyr:\n  [0x28ae22, 0xef65cd, 0x4d3b2f, 0x89dbbc, 0x48b538, 0x05d019, 0x194f9b, 0x6d8118,\n   0x030242, 0x706fbe, 0xe4b28c, 0xffb4e2, 0x7b896f, 0x1696b1, 0xc71235, 0x692694,\n   0xf14ad2, 0x4f25e3, 0x8cd5b5, 0xac9c65, 0x2b0275, 0xa6e483, 0x41fbd4, 0x1153b5,\n   0x66dfab, 0xb43210, 0xfb213f, 0xef0ee4, 0xa88fc2, 0x0aa725, 0x03826f, 0x0e6e70,\n   0xd22ffc, 0x26c926, 0xc42aed, 0x95b3df, 0xaf63de, 0x77b2a8, 0xedaee6, 0x82353b,\n   0xf10364, 0x423001, 0xf89791, 0x54be30, 0xef5218, 0x65a910, 0x71202a, 0xbbd1b8,\n   0xd2d0c8, 0x41ab53, 0x8eeb99, 0x9b48a8, 0xc95a63, 0x418acb, 0x63e373, 0xb2b8a3,\n   0xefb2fc, 0x172f60, 0xf0ab72, 0x6439ec, 0x631e28, 0x82bde9, 0xc67915, 0x72532b,\n   0x26619c, 0xc0c207, 0xe0eb1e, 0x6ed178, 0x176fba, 0xc898a6, 0xf90dae, 0x1c471b,\n   0x047d84, 0xc72493, 0xc9bebc, 0x100d4c, 0x3e42b6, 0x657e2a, 0xd6faec, 0x475817],\n\n  /*\n  _key:\n  [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n   0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n   0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n   0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n   0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n   0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n   0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n   0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n   0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n   0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n   0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n   0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n   0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n   0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n   0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n   0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n   0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n   0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n   0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n   0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817],\n  */\n\n  /**\n   * Function to precompute _init and _key.\n   * @private\n   */\n  _precompute: function () {\n    // XXX: This code is for precomputing the SHA256 constants, change for\n    //      SHA512 and re-enable.\n    var i = 0, prime = 2, factor , isPrime;\n\n    function frac(x)  { return (x-Math.floor(x)) * 0x100000000 | 0; }\n    function frac2(x) { return (x-Math.floor(x)) * 0x10000000000 & 0xff; }\n\n    for (; i<80; prime++) {\n      isPrime = true;\n      for (factor=2; factor*factor <= prime; factor++) {\n        if (prime % factor === 0) {\n          isPrime = false;\n          break;\n        }\n      }\n      if (isPrime) {\n        if (i<8) {\n          this._init[i*2] = frac(Math.pow(prime, 1/2));\n          this._init[i*2+1] = (frac2(Math.pow(prime, 1/2)) << 24) | this._initr[i];\n        }\n        this._key[i*2] = frac(Math.pow(prime, 1/3));\n        this._key[i*2+1] = (frac2(Math.pow(prime, 1/3)) << 24) | this._keyr[i];\n        i++;\n      }\n    }\n  },\n\n  /**\n   * Perform one cycle of SHA-512.\n   * @param {Uint32Array|bitArray} words one block of words.\n   * @private\n   */\n  _block:function (words) {\n    var i, wrh, wrl,\n        h = this._h,\n        k = this._key,\n        h0h = h[ 0], h0l = h[ 1], h1h = h[ 2], h1l = h[ 3],\n        h2h = h[ 4], h2l = h[ 5], h3h = h[ 6], h3l = h[ 7],\n        h4h = h[ 8], h4l = h[ 9], h5h = h[10], h5l = h[11],\n        h6h = h[12], h6l = h[13], h7h = h[14], h7l = h[15];\n    var w;\n    if (typeof Uint32Array !== 'undefined') {\n\t// When words is passed to _block, it has 32 elements. SHA512 _block\n\t// function extends words with new elements (at the end there are 160 elements). \n\t// The problem is that if we use Uint32Array instead of Array, \n\t// the length of Uint32Array cannot be changed. Thus, we replace words with a \n\t// normal Array here.\n        w = Array(160); // do not use Uint32Array here as the instantiation is slower\n        for (var j=0; j<32; j++){\n    \t    w[j] = words[j]; \n        }\n    } else {\n\tw = words;\n    } \n\n    // Working variables\n    var ah = h0h, al = h0l, bh = h1h, bl = h1l,\n        ch = h2h, cl = h2l, dh = h3h, dl = h3l,\n        eh = h4h, el = h4l, fh = h5h, fl = h5l,\n        gh = h6h, gl = h6l, hh = h7h, hl = h7l;\n\n    for (i=0; i<80; i++) {\n      // load up the input word for this round\n      if (i<16) {\n        wrh = w[i * 2];\n        wrl = w[i * 2 + 1];\n      } else {\n        // Gamma0\n        var gamma0xh = w[(i-15) * 2];\n        var gamma0xl = w[(i-15) * 2 + 1];\n        var gamma0h =\n          ((gamma0xl << 31) | (gamma0xh >>> 1)) ^\n          ((gamma0xl << 24) | (gamma0xh >>> 8)) ^\n           (gamma0xh >>> 7);\n        var gamma0l =\n          ((gamma0xh << 31) | (gamma0xl >>> 1)) ^\n          ((gamma0xh << 24) | (gamma0xl >>> 8)) ^\n          ((gamma0xh << 25) | (gamma0xl >>> 7));\n\n        // Gamma1\n        var gamma1xh = w[(i-2) * 2];\n        var gamma1xl = w[(i-2) * 2 + 1];\n        var gamma1h =\n          ((gamma1xl << 13) | (gamma1xh >>> 19)) ^\n          ((gamma1xh << 3)  | (gamma1xl >>> 29)) ^\n           (gamma1xh >>> 6);\n        var gamma1l =\n          ((gamma1xh << 13) | (gamma1xl >>> 19)) ^\n          ((gamma1xl << 3)  | (gamma1xh >>> 29)) ^\n          ((gamma1xh << 26) | (gamma1xl >>> 6));\n\n        // Shortcuts\n        var wr7h = w[(i-7) * 2];\n        var wr7l = w[(i-7) * 2 + 1];\n\n        var wr16h = w[(i-16) * 2];\n        var wr16l = w[(i-16) * 2 + 1];\n\n        // W(round) = gamma0 + W(round - 7) + gamma1 + W(round - 16)\n        wrl = gamma0l + wr7l;\n        wrh = gamma0h + wr7h + ((wrl >>> 0) < (gamma0l >>> 0) ? 1 : 0);\n        wrl += gamma1l;\n        wrh += gamma1h + ((wrl >>> 0) < (gamma1l >>> 0) ? 1 : 0);\n        wrl += wr16l;\n        wrh += wr16h + ((wrl >>> 0) < (wr16l >>> 0) ? 1 : 0);\n      }\n\n      w[i*2]     = wrh |= 0;\n      w[i*2 + 1] = wrl |= 0;\n\n      // Ch\n      var chh = (eh & fh) ^ (~eh & gh);\n      var chl = (el & fl) ^ (~el & gl);\n\n      // Maj\n      var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\n      var majl = (al & bl) ^ (al & cl) ^ (bl & cl);\n\n      // Sigma0\n      var sigma0h = ((al << 4) | (ah >>> 28)) ^ ((ah << 30) | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\n      var sigma0l = ((ah << 4) | (al >>> 28)) ^ ((al << 30) | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\n\n      // Sigma1\n      var sigma1h = ((el << 18) | (eh >>> 14)) ^ ((el << 14) | (eh >>> 18)) ^ ((eh << 23) | (el >>> 9));\n      var sigma1l = ((eh << 18) | (el >>> 14)) ^ ((eh << 14) | (el >>> 18)) ^ ((el << 23) | (eh >>> 9));\n\n      // K(round)\n      var krh = k[i*2];\n      var krl = k[i*2+1];\n\n      // t1 = h + sigma1 + ch + K(round) + W(round)\n      var t1l = hl + sigma1l;\n      var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\n      t1l += chl;\n      t1h += chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\n      t1l += krl;\n      t1h += krh + ((t1l >>> 0) < (krl >>> 0) ? 1 : 0);\n      t1l = t1l + wrl|0;   // FF32..FF34 perf issue https://bugzilla.mozilla.org/show_bug.cgi?id=1054972\n      t1h += wrh + ((t1l >>> 0) < (wrl >>> 0) ? 1 : 0);\n\n      // t2 = sigma0 + maj\n      var t2l = sigma0l + majl;\n      var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);\n\n      // Update working variables\n      hh = gh;\n      hl = gl;\n      gh = fh;\n      gl = fl;\n      fh = eh;\n      fl = el;\n      el = (dl + t1l) | 0;\n      eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n      dh = ch;\n      dl = cl;\n      ch = bh;\n      cl = bl;\n      bh = ah;\n      bl = al;\n      al = (t1l + t2l) | 0;\n      ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\n    }\n\n    // Intermediate hash\n    h0l = h[1] = (h0l + al) | 0;\n    h[0] = (h0h + ah + ((h0l >>> 0) < (al >>> 0) ? 1 : 0)) | 0;\n    h1l = h[3] = (h1l + bl) | 0;\n    h[2] = (h1h + bh + ((h1l >>> 0) < (bl >>> 0) ? 1 : 0)) | 0;\n    h2l = h[5] = (h2l + cl) | 0;\n    h[4] = (h2h + ch + ((h2l >>> 0) < (cl >>> 0) ? 1 : 0)) | 0;\n    h3l = h[7] = (h3l + dl) | 0;\n    h[6] = (h3h + dh + ((h3l >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n    h4l = h[9] = (h4l + el) | 0;\n    h[8] = (h4h + eh + ((h4l >>> 0) < (el >>> 0) ? 1 : 0)) | 0;\n    h5l = h[11] = (h5l + fl) | 0;\n    h[10] = (h5h + fh + ((h5l >>> 0) < (fl >>> 0) ? 1 : 0)) | 0;\n    h6l = h[13] = (h6l + gl) | 0;\n    h[12] = (h6h + gh + ((h6l >>> 0) < (gl >>> 0) ? 1 : 0)) | 0;\n    h7l = h[15] = (h7l + hl) | 0;\n    h[14] = (h7h + hh + ((h7l >>> 0) < (hl >>> 0) ? 1 : 0)) | 0;\n  }\n};\n\n\n/** @fileOverview HMAC implementation.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/** HMAC with the specified hash function.\n * @constructor\n * @param {bitArray} key the key for HMAC.\n * @param {Object} [Hash=sjcl.hash.sha256] The hash function to use.\n */\nsjcl.misc.hmac = function (key, Hash) {\n  this._hash = Hash = Hash || sjcl.hash.sha256;\n  var exKey = [[],[]], i,\n      bs = Hash.prototype.blockSize / 32;\n  this._baseHash = [new Hash(), new Hash()];\n\n  if (key.length > bs) {\n    key = Hash.hash(key);\n  }\n  \n  for (i=0; i<bs; i++) {\n    exKey[0][i] = key[i]^0x36363636;\n    exKey[1][i] = key[i]^0x5C5C5C5C;\n  }\n  \n  this._baseHash[0].update(exKey[0]);\n  this._baseHash[1].update(exKey[1]);\n  this._resultHash = new Hash(this._baseHash[0]);\n};\n\n/** HMAC with the specified hash function.  Also called encrypt since it's a prf.\n * @param {bitArray|String} data The data to mac.\n */\nsjcl.misc.hmac.prototype.encrypt = sjcl.misc.hmac.prototype.mac = function (data) {\n  if (!this._updated) {\n    this.update(data);\n    return this.digest(data);\n  } else {\n    throw new sjcl.exception.invalid(\"encrypt on already updated hmac called!\");\n  }\n};\n\nsjcl.misc.hmac.prototype.reset = function () {\n  this._resultHash = new this._hash(this._baseHash[0]);\n  this._updated = false;\n};\n\nsjcl.misc.hmac.prototype.update = function (data) {\n  this._updated = true;\n  this._resultHash.update(data);\n};\n\nsjcl.misc.hmac.prototype.digest = function () {\n  var w = this._resultHash.finalize(), result = new (this._hash)(this._baseHash[1]).update(w).finalize();\n\n  this.reset();\n\n  return result;\n};\n; export default sjcl;"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"OTPAuth\"] = factory();\n\telse\n\t\troot[\"OTPAuth\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 4);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return Utils; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return InternalUtils; });\n/**\n * An object containing some utilities.\n * @type {Object}\n */\nconst Utils = {};\n\n/**\n * UInt conversion.\n * @type {Object}\n */\nUtils.uint = {};\n\n/**\n * Converts an ArrayBuffer to an integer.\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {number} Integer.\n */\nUtils.uint.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\tlet num = 0;\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] === 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tnum *= 256;\n\t\tnum += arr[i];\n\t}\n\n\treturn num;\n};\n\n/**\n * Converts an integer to an ArrayBuffer.\n * @param {number} num Integer.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nUtils.uint.encode = function (num) {\n\tconst buf = new ArrayBuffer(8);\n\tconst arr = new Uint8Array(buf);\n\tlet acc = num;\n\n\tfor (let i = 7; i >= 0; i--) {\n\t\tif (acc === 0) {\n\t\t\tbreak;\n\t\t}\n\n\t\tarr[i] = acc & 255;\n\t\tacc -= arr[i];\n\t\tacc /= 256;\n\t}\n\n\treturn buf;\n};\n\n/**\n * Raw string conversion.\n * @type {Object}\n */\nUtils.raw = {};\n\n/**\n * Converts an ArrayBuffer to a string.\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {string} String.\n */\nUtils.raw.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\tlet str = '';\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tstr += String.fromCharCode(arr[i]);\n\t}\n\n\treturn str;\n};\n\n/**\n * Converts a string to an ArrayBuffer.\n * @param {string} str String.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nUtils.raw.encode = function (str) {\n\tconst buf = new ArrayBuffer(str.length);\n\tconst arr = new Uint8Array(buf);\n\n\tfor (let i = 0; i < str.length; i++) {\n\t\tarr[i] = str.charCodeAt(i);\n\t}\n\n\treturn buf;\n};\n\n/**\n * Base32 string conversion.\n * @type {Object}\n */\nUtils.b32 = {};\n\n/**\n * RFC 4648 base32 alphabet without pad.\n * @type {string}\n */\nUtils.b32.alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\n\n/**\n * Converts an ArrayBuffer to a base32 string (RFC 4648).\n * @see https://github.com/LinusU/base32-decode\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {string} Base32 string.\n */\nUtils.b32.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\n\tlet bits = 0;\n\tlet value = 0;\n\tlet str = '';\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tvalue = (value << 8) | arr[i];\n\t\tbits += 8;\n\n\t\twhile (bits >= 5) {\n\t\t\tstr += Utils.b32.alphabet[(value >>> bits - 5) & 31];\n\t\t\tbits -= 5;\n\t\t}\n\t}\n\n\tif (bits > 0) {\n\t\tstr += Utils.b32.alphabet[(value << 5 - bits) & 31];\n\t}\n\n\treturn str;\n};\n\n/**\n * Converts a base32 string to an ArrayBuffer (RFC 4648).\n * @see https://github.com/LinusU/base32-encode\n * @param {string} str Base32 string.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nUtils.b32.encode = function (str) {\n\tconst strUpp = str.toUpperCase();\n\tconst buf = new ArrayBuffer(str.length * 5 / 8 | 0);\n\tconst arr = new Uint8Array(buf);\n\n\tlet bits = 0;\n\tlet value = 0;\n\tlet index = 0;\n\n\tfor (let i = 0; i < strUpp.length; i++) {\n\t\tlet idx = Utils.b32.alphabet.indexOf(strUpp[i]);\n\n\t\tif (idx === -1) {\n\t\t\tthrow new TypeError('Invalid character found: ' + strUpp[i]);\n\t\t}\n\n\t\tvalue = (value << 5) | idx;\n\t\tbits += 5;\n\n\t\tif (bits >= 8) {\n\t\t\tarr[index++] = (value >>> bits - 8) & 255;\n\t\t\tbits -= 8;\n\t\t}\n\t}\n\n\treturn buf;\n};\n\n/**\n * Hexadecimal string conversion.\n * @type {Object}\n */\nUtils.hex = {};\n\n/**\n * Converts an ArrayBuffer to a hexadecimal string.\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {string} Hexadecimal string.\n */\nUtils.hex.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\tlet str = '';\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tconst hexByte = arr[i].toString(16);\n\n\t\tstr += hexByte.length === 1\n\t\t\t? '0' + hexByte\n\t\t\t: hexByte;\n\t}\n\n\treturn str.toUpperCase();\n};\n\n/**\n * Converts a hexadecimal string to an ArrayBuffer.\n * @param {string} str Hexadecimal string.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nUtils.hex.encode = function (str) {\n\tconst buf = new ArrayBuffer(str.length / 2);\n\tconst arr = new Uint8Array(buf);\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tarr[i] = parseInt(str.substr(i * 2, 2), 16);\n\t}\n\n\treturn buf;\n};\n\n/**\n * An object containing some utilities (for internal use only).\n * @private\n * @type {Object}\n */\nconst InternalUtils = {};\n\n/**\n * Detect if running in \"Node.js\".\n * @type {boolean}\n */\n// eslint-disable-next-line dot-notation\nInternalUtils.isNode = Object.prototype.toString.call(global['process']) === '[object process]';\n\n/**\n * Dynamically import \"Node.js\" modules.\n * @param {string} name Name.\n * @returns {Object} Module.\n */\nInternalUtils.require = function (name) {\n\t// eslint-disable-next-line no-eval\n\treturn InternalUtils.isNode ? eval('require')(name) : null;\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/** @fileOverview Javascript cryptography implementation.\n *\n * Crush to remove comments, shorten variable names and\n * generally reduce transmission size.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n\n/*jslint indent: 2, bitwise: false, nomen: false, plusplus: false, white: false, regexp: false */\n/*global document, window, escape, unescape, module, require, Uint32Array */\n\n/**\n * The Stanford Javascript Crypto Library, top-level namespace.\n * @namespace\n */\nvar sjcl = {\n  /**\n   * Symmetric ciphers.\n   * @namespace\n   */\n  cipher: {},\n\n  /**\n   * Hash functions.  Right now only SHA256 is implemented.\n   * @namespace\n   */\n  hash: {},\n\n  /**\n   * Key exchange functions.  Right now only SRP is implemented.\n   * @namespace\n   */\n  keyexchange: {},\n  \n  /**\n   * Cipher modes of operation.\n   * @namespace\n   */\n  mode: {},\n\n  /**\n   * Miscellaneous.  HMAC and PBKDF2.\n   * @namespace\n   */\n  misc: {},\n  \n  /**\n   * Bit array encoders and decoders.\n   * @namespace\n   *\n   * @description\n   * The members of this namespace are functions which translate between\n   * SJCL's bitArrays and other objects (usually strings).  Because it\n   * isn't always clear which direction is encoding and which is decoding,\n   * the method names are \"fromBits\" and \"toBits\".\n   */\n  codec: {},\n  \n  /**\n   * Exceptions.\n   * @namespace\n   */\n  exception: {\n    /**\n     * Ciphertext is corrupt.\n     * @constructor\n     */\n    corrupt: function(message) {\n      this.toString = function() { return \"CORRUPT: \"+this.message; };\n      this.message = message;\n    },\n    \n    /**\n     * Invalid parameter.\n     * @constructor\n     */\n    invalid: function(message) {\n      this.toString = function() { return \"INVALID: \"+this.message; };\n      this.message = message;\n    },\n    \n    /**\n     * Bug or missing feature in SJCL.\n     * @constructor\n     */\n    bug: function(message) {\n      this.toString = function() { return \"BUG: \"+this.message; };\n      this.message = message;\n    },\n\n    /**\n     * Something isn't ready.\n     * @constructor\n     */\n    notReady: function(message) {\n      this.toString = function() { return \"NOT READY: \"+this.message; };\n      this.message = message;\n    }\n  }\n};\n/** @fileOverview Arrays of bits, encoded as arrays of Numbers.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Arrays of bits, encoded as arrays of Numbers.\n * @namespace\n * @description\n * <p>\n * These objects are the currency accepted by SJCL's crypto functions.\n * </p>\n *\n * <p>\n * Most of our crypto primitives operate on arrays of 4-byte words internally,\n * but many of them can take arguments that are not a multiple of 4 bytes.\n * This library encodes arrays of bits (whose size need not be a multiple of 8\n * bits) as arrays of 32-bit words.  The bits are packed, big-endian, into an\n * array of words, 32 bits at a time.  Since the words are double-precision\n * floating point numbers, they fit some extra data.  We use this (in a private,\n * possibly-changing manner) to encode the number of bits actually  present\n * in the last word of the array.\n * </p>\n *\n * <p>\n * Because bitwise ops clear this out-of-band data, these arrays can be passed\n * to ciphers like AES which want arrays of words.\n * </p>\n */\nsjcl.bitArray = {\n  /**\n   * Array slices in units of bits.\n   * @param {bitArray} a The array to slice.\n   * @param {Number} bstart The offset to the start of the slice, in bits.\n   * @param {Number} bend The offset to the end of the slice, in bits.  If this is undefined,\n   * slice until the end of the array.\n   * @return {bitArray} The requested slice.\n   */\n  bitSlice: function (a, bstart, bend) {\n    a = sjcl.bitArray._shiftRight(a.slice(bstart/32), 32 - (bstart & 31)).slice(1);\n    return (bend === undefined) ? a : sjcl.bitArray.clamp(a, bend-bstart);\n  },\n\n  /**\n   * Extract a number packed into a bit array.\n   * @param {bitArray} a The array to slice.\n   * @param {Number} bstart The offset to the start of the slice, in bits.\n   * @param {Number} blength The length of the number to extract.\n   * @return {Number} The requested slice.\n   */\n  extract: function(a, bstart, blength) {\n    // FIXME: this Math.floor is not necessary at all, but for some reason\n    // seems to suppress a bug in the Chromium JIT.\n    var x, sh = Math.floor((-bstart-blength) & 31);\n    if ((bstart + blength - 1 ^ bstart) & -32) {\n      // it crosses a boundary\n      x = (a[bstart/32|0] << (32 - sh)) ^ (a[bstart/32+1|0] >>> sh);\n    } else {\n      // within a single word\n      x = a[bstart/32|0] >>> sh;\n    }\n    return x & ((1<<blength) - 1);\n  },\n\n  /**\n   * Concatenate two bit arrays.\n   * @param {bitArray} a1 The first array.\n   * @param {bitArray} a2 The second array.\n   * @return {bitArray} The concatenation of a1 and a2.\n   */\n  concat: function (a1, a2) {\n    if (a1.length === 0 || a2.length === 0) {\n      return a1.concat(a2);\n    }\n    \n    var last = a1[a1.length-1], shift = sjcl.bitArray.getPartial(last);\n    if (shift === 32) {\n      return a1.concat(a2);\n    } else {\n      return sjcl.bitArray._shiftRight(a2, shift, last|0, a1.slice(0,a1.length-1));\n    }\n  },\n\n  /**\n   * Find the length of an array of bits.\n   * @param {bitArray} a The array.\n   * @return {Number} The length of a, in bits.\n   */\n  bitLength: function (a) {\n    var l = a.length, x;\n    if (l === 0) { return 0; }\n    x = a[l - 1];\n    return (l-1) * 32 + sjcl.bitArray.getPartial(x);\n  },\n\n  /**\n   * Truncate an array.\n   * @param {bitArray} a The array.\n   * @param {Number} len The length to truncate to, in bits.\n   * @return {bitArray} A new array, truncated to len bits.\n   */\n  clamp: function (a, len) {\n    if (a.length * 32 < len) { return a; }\n    a = a.slice(0, Math.ceil(len / 32));\n    var l = a.length;\n    len = len & 31;\n    if (l > 0 && len) {\n      a[l-1] = sjcl.bitArray.partial(len, a[l-1] & 0x80000000 >> (len-1), 1);\n    }\n    return a;\n  },\n\n  /**\n   * Make a partial word for a bit array.\n   * @param {Number} len The number of bits in the word.\n   * @param {Number} x The bits.\n   * @param {Number} [_end=0] Pass 1 if x has already been shifted to the high side.\n   * @return {Number} The partial word.\n   */\n  partial: function (len, x, _end) {\n    if (len === 32) { return x; }\n    return (_end ? x|0 : x << (32-len)) + len * 0x10000000000;\n  },\n\n  /**\n   * Get the number of bits used by a partial word.\n   * @param {Number} x The partial word.\n   * @return {Number} The number of bits used by the partial word.\n   */\n  getPartial: function (x) {\n    return Math.round(x/0x10000000000) || 32;\n  },\n\n  /**\n   * Compare two arrays for equality in a predictable amount of time.\n   * @param {bitArray} a The first array.\n   * @param {bitArray} b The second array.\n   * @return {boolean} true if a == b; false otherwise.\n   */\n  equal: function (a, b) {\n    if (sjcl.bitArray.bitLength(a) !== sjcl.bitArray.bitLength(b)) {\n      return false;\n    }\n    var x = 0, i;\n    for (i=0; i<a.length; i++) {\n      x |= a[i]^b[i];\n    }\n    return (x === 0);\n  },\n\n  /** Shift an array right.\n   * @param {bitArray} a The array to shift.\n   * @param {Number} shift The number of bits to shift.\n   * @param {Number} [carry=0] A byte to carry in\n   * @param {bitArray} [out=[]] An array to prepend to the output.\n   * @private\n   */\n  _shiftRight: function (a, shift, carry, out) {\n    var i, last2=0, shift2;\n    if (out === undefined) { out = []; }\n    \n    for (; shift >= 32; shift -= 32) {\n      out.push(carry);\n      carry = 0;\n    }\n    if (shift === 0) {\n      return out.concat(a);\n    }\n    \n    for (i=0; i<a.length; i++) {\n      out.push(carry | a[i]>>>shift);\n      carry = a[i] << (32-shift);\n    }\n    last2 = a.length ? a[a.length-1] : 0;\n    shift2 = sjcl.bitArray.getPartial(last2);\n    out.push(sjcl.bitArray.partial(shift+shift2 & 31, (shift + shift2 > 32) ? carry : out.pop(),1));\n    return out;\n  },\n  \n  /** xor a block of 4 words together.\n   * @private\n   */\n  _xor4: function(x,y) {\n    return [x[0]^y[0],x[1]^y[1],x[2]^y[2],x[3]^y[3]];\n  },\n\n  /** byteswap a word array inplace.\n   * (does not handle partial words)\n   * @param {sjcl.bitArray} a word array\n   * @return {sjcl.bitArray} byteswapped array\n   */\n  byteswapM: function(a) {\n    var i, v, m = 0xff00;\n    for (i = 0; i < a.length; ++i) {\n      v = a[i];\n      a[i] = (v >>> 24) | ((v >>> 8) & m) | ((v & m) << 8) | (v << 24);\n    }\n    return a;\n  }\n};\n/** @fileOverview Bit array codec implementations.\n *\n * @author Marco Munizaga\n */\n\n//patch arraybuffers if they don't exist\nif (typeof(ArrayBuffer) === 'undefined') {\n  (function(globals){\n      \"use strict\";\n      globals.ArrayBuffer = function(){};\n      globals.DataView = function(){};\n  }(this));\n}\n\n/**\n * ArrayBuffer\n * @namespace\n */\nsjcl.codec.arrayBuffer = {\n  /** Convert from a bitArray to an ArrayBuffer. \n   * Will default to 8byte padding if padding is undefined*/\n  fromBits: function (arr, padding, padding_count) {\n    var out, i, ol, tmp, smallest;\n    padding = padding==undefined  ? true : padding;\n    padding_count = padding_count || 8;\n\n    if (arr.length === 0) {\n      return new ArrayBuffer(0);\n    }\n\n    ol = sjcl.bitArray.bitLength(arr)/8;\n\n    //check to make sure the bitLength is divisible by 8, if it isn't \n    //we can't do anything since arraybuffers work with bytes, not bits\n    if ( sjcl.bitArray.bitLength(arr)%8 !== 0 ) {\n      throw new sjcl.exception.invalid(\"Invalid bit size, must be divisble by 8 to fit in an arraybuffer correctly\");\n    }\n\n    if (padding && ol%padding_count !== 0){\n      ol += padding_count - (ol%padding_count);\n    }\n\n\n    //padded temp for easy copying\n    tmp = new DataView(new ArrayBuffer(arr.length*4));\n    for (i=0; i<arr.length; i++) {\n      tmp.setUint32(i*4, (arr[i]<<32)); //get rid of the higher bits\n    }\n\n    //now copy the final message if we are not going to 0 pad\n    out = new DataView(new ArrayBuffer(ol));\n\n    //save a step when the tmp and out bytelength are ===\n    if (out.byteLength === tmp.byteLength){\n      return tmp.buffer;\n    }\n\n    smallest = tmp.byteLength < out.byteLength ? tmp.byteLength : out.byteLength;\n    for(i=0; i<smallest; i++){\n      out.setUint8(i,tmp.getUint8(i));\n    }\n\n\n    return out.buffer;\n  },\n\n  toBits: function (buffer) {\n    var i, out=[], len, inView, tmp;\n\n    if (buffer.byteLength === 0) {\n      return [];\n    }\n\n    inView = new DataView(buffer);\n    len = inView.byteLength - inView.byteLength%4;\n\n    for (var i = 0; i < len; i+=4) {\n      out.push(inView.getUint32(i));\n    }\n\n    if (inView.byteLength%4 != 0) {\n      tmp = new DataView(new ArrayBuffer(4));\n      for (var i = 0, l = inView.byteLength%4; i < l; i++) {\n        //we want the data to the right, because partial slices off the starting bits\n        tmp.setUint8(i+4-l, inView.getUint8(len+i)); // big-endian, \n      }\n      out.push(\n        sjcl.bitArray.partial( (inView.byteLength%4)*8, tmp.getUint32(0) )\n      ); \n    }\n    return out;\n  },\n\n\n\n  /** Prints a hex output of the buffer contents, akin to hexdump **/\n  hexDumpBuffer: function(buffer){\n      var stringBufferView = new DataView(buffer);\n      var string = '';\n      var pad = function (n, width) {\n          n = n + '';\n          return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n;\n      };\n\n      for (var i = 0; i < stringBufferView.byteLength; i+=2) {\n          if (i%16 == 0) string += ('\\n'+(i).toString(16)+'\\t');\n          string += ( pad(stringBufferView.getUint16(i).toString(16),4) + ' ');\n      }\n\n      if ( typeof console === undefined ){\n        console = console || {log:function(){}}; //fix for IE\n      }\n      console.log(string.toUpperCase());\n  }\n};\n\n/** @fileOverview Javascript SHA-1 implementation.\n *\n * Based on the implementation in RFC 3174, method 1, and on the SJCL\n * SHA-256 implementation.\n *\n * @author Quinn Slack\n */\n\n/**\n * Context for a SHA-1 operation in progress.\n * @constructor\n */\nsjcl.hash.sha1 = function (hash) {\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 5 big-endian words.\n */\nsjcl.hash.sha1.hash = function (data) {\n  return (new sjcl.hash.sha1()).update(data).finalize();\n};\n\nsjcl.hash.sha1.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 512,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n\tvar c = new Uint32Array(b);\n    \tvar j = 0;\n    \tfor (i = this.blockSize+ol - ((this.blockSize+ol) & (this.blockSize-1)); i <= nl;\n\t\ti+= this.blockSize) {\n      \t    this._block(c.subarray(16 * j, 16 * (j+1)));\n      \t    j += 1;\n    \t}\n    \tb.splice(0, 16 * j);\n    } else {\n    \tfor (i = this.blockSize+ol - ((this.blockSize+ol) & (this.blockSize-1)); i <= nl;\n             i+= this.blockSize) {\n      \t     this._block(b.splice(0,16));\n      \t}\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 5 big-endian words. TODO\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n    // Round out the buffer to a multiple of 16 words, less the 2 length words.\n    for (i = b.length + 2; i & 15; i++) {\n      b.push(0);\n    }\n\n    // append the length\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,16));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-1 initialization vector.\n   * @private\n   */\n  _init:[0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0],\n\n  /**\n   * The SHA-1 hash key.\n   * @private\n   */\n  _key:[0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6],\n\n  /**\n   * The SHA-1 logical functions f(0), f(1), ..., f(79).\n   * @private\n   */\n  _f:function(t, b, c, d) {\n    if (t <= 19) {\n      return (b & c) | (~b & d);\n    } else if (t <= 39) {\n      return b ^ c ^ d;\n    } else if (t <= 59) {\n      return (b & c) | (b & d) | (c & d);\n    } else if (t <= 79) {\n      return b ^ c ^ d;\n    }\n  },\n\n  /**\n   * Circular left-shift operator.\n   * @private\n   */\n  _S:function(n, x) {\n    return (x << n) | (x >>> 32-n);\n  },\n  \n  /**\n   * Perform one cycle of SHA-1.\n   * @param {Uint32Array|bitArray} words one block of words.\n   * @private\n   */\n  _block:function (words) {\n    var t, tmp, a, b, c, d, e,\n    h = this._h;\n    var w;\n    if (typeof Uint32Array !== 'undefined') {\n        // When words is passed to _block, it has 16 elements. SHA1 _block\n        // function extends words with new elements (at the end there are 80 elements). \n        // The problem is that if we use Uint32Array instead of Array, \n        // the length of Uint32Array cannot be changed. Thus, we replace words with a \n        // normal Array here.\n        w = Array(80); // do not use Uint32Array here as the instantiation is slower\n        for (var j=0; j<16; j++){\n            w[j] = words[j];\n        }\n    } else {\n        w = words;\n    }\n\n    a = h[0]; b = h[1]; c = h[2]; d = h[3]; e = h[4]; \n\n    for (t=0; t<=79; t++) {\n      if (t >= 16) {\n        w[t] = this._S(1, w[t-3] ^ w[t-8] ^ w[t-14] ^ w[t-16]);\n      }\n      tmp = (this._S(5, a) + this._f(t, b, c, d) + e + w[t] +\n             this._key[Math.floor(t/20)]) | 0;\n      e = d;\n      d = c;\n      c = this._S(30, b);\n      b = a;\n      a = tmp;\n   }\n\n   h[0] = (h[0]+a) |0;\n   h[1] = (h[1]+b) |0;\n   h[2] = (h[2]+c) |0;\n   h[3] = (h[3]+d) |0;\n   h[4] = (h[4]+e) |0;\n  }\n};\n/** @fileOverview Javascript SHA-256 implementation.\n *\n * An older version of this implementation is available in the public\n * domain, but this one is (c) Emily Stark, Mike Hamburg, Dan Boneh,\n * Stanford University 2008-2010 and BSD-licensed for liability\n * reasons.\n *\n * Special thanks to Aldo Cortesi for pointing out several bugs in\n * this code.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Context for a SHA-256 operation in progress.\n * @constructor\n */\nsjcl.hash.sha256 = function (hash) {\n  if (!this._key[0]) { this._precompute(); }\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 16 big-endian words.\n */\nsjcl.hash.sha256.hash = function (data) {\n  return (new sjcl.hash.sha256()).update(data).finalize();\n};\n\nsjcl.hash.sha256.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 512,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n\tvar c = new Uint32Array(b);\n    \tvar j = 0;\n    \tfor (i = 512+ol - ((512+ol) & 511); i <= nl; i+= 512) {\n      \t    this._block(c.subarray(16 * j, 16 * (j+1)));\n      \t    j += 1;\n    \t}\n    \tb.splice(0, 16 * j);\n    } else {\n\tfor (i = 512+ol - ((512+ol) & 511); i <= nl; i+= 512) {\n      \t    this._block(b.splice(0,16));\n      \t}\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 8 big-endian words.\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n    \n    // Round out the buffer to a multiple of 16 words, less the 2 length words.\n    for (i = b.length + 2; i & 15; i++) {\n      b.push(0);\n    }\n    \n    // append the length\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,16));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-256 initialization vector, to be precomputed.\n   * @private\n   */\n  _init:[],\n  /*\n  _init:[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19],\n  */\n  \n  /**\n   * The SHA-256 hash key, to be precomputed.\n   * @private\n   */\n  _key:[],\n  /*\n  _key:\n    [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n     0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n     0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n     0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n     0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n     0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n     0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n     0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2],\n  */\n\n\n  /**\n   * Function to precompute _init and _key.\n   * @private\n   */\n  _precompute: function () {\n    var i = 0, prime = 2, factor, isPrime;\n\n    function frac(x) { return (x-Math.floor(x)) * 0x100000000 | 0; }\n\n    for (; i<64; prime++) {\n      isPrime = true;\n      for (factor=2; factor*factor <= prime; factor++) {\n        if (prime % factor === 0) {\n          isPrime = false;\n          break;\n        }\n      }\n      if (isPrime) {\n        if (i<8) {\n          this._init[i] = frac(Math.pow(prime, 1/2));\n        }\n        this._key[i] = frac(Math.pow(prime, 1/3));\n        i++;\n      }\n    }\n  },\n  \n  /**\n   * Perform one cycle of SHA-256.\n   * @param {Uint32Array|bitArray} w one block of words.\n   * @private\n   */\n  _block:function (w) {  \n    var i, tmp, a, b,\n      h = this._h,\n      k = this._key,\n      h0 = h[0], h1 = h[1], h2 = h[2], h3 = h[3],\n      h4 = h[4], h5 = h[5], h6 = h[6], h7 = h[7];\n\n    /* Rationale for placement of |0 :\n     * If a value can overflow is original 32 bits by a factor of more than a few\n     * million (2^23 ish), there is a possibility that it might overflow the\n     * 53-bit mantissa and lose precision.\n     *\n     * To avoid this, we clamp back to 32 bits by |'ing with 0 on any value that\n     * propagates around the loop, and on the hash state h[].  I don't believe\n     * that the clamps on h4 and on h0 are strictly necessary, but it's close\n     * (for h4 anyway), and better safe than sorry.\n     *\n     * The clamps on h[] are necessary for the output to be correct even in the\n     * common case and for short inputs.\n     */\n    for (i=0; i<64; i++) {\n      // load up the input word for this round\n      if (i<16) {\n        tmp = w[i];\n      } else {\n        a   = w[(i+1 ) & 15];\n        b   = w[(i+14) & 15];\n        tmp = w[i&15] = ((a>>>7  ^ a>>>18 ^ a>>>3  ^ a<<25 ^ a<<14) + \n                         (b>>>17 ^ b>>>19 ^ b>>>10 ^ b<<15 ^ b<<13) +\n                         w[i&15] + w[(i+9) & 15]) | 0;\n      }\n      \n      tmp = (tmp + h7 + (h4>>>6 ^ h4>>>11 ^ h4>>>25 ^ h4<<26 ^ h4<<21 ^ h4<<7) +  (h6 ^ h4&(h5^h6)) + k[i]); // | 0;\n      \n      // shift register\n      h7 = h6; h6 = h5; h5 = h4;\n      h4 = h3 + tmp | 0;\n      h3 = h2; h2 = h1; h1 = h0;\n\n      h0 = (tmp +  ((h1&h2) ^ (h3&(h1^h2))) + (h1>>>2 ^ h1>>>13 ^ h1>>>22 ^ h1<<30 ^ h1<<19 ^ h1<<10)) | 0;\n    }\n\n    h[0] = h[0]+h0 | 0;\n    h[1] = h[1]+h1 | 0;\n    h[2] = h[2]+h2 | 0;\n    h[3] = h[3]+h3 | 0;\n    h[4] = h[4]+h4 | 0;\n    h[5] = h[5]+h5 | 0;\n    h[6] = h[6]+h6 | 0;\n    h[7] = h[7]+h7 | 0;\n  }\n};\n\n\n/** @fileOverview Javascript SHA-512 implementation.\n *\n * This implementation was written for CryptoJS by Jeff Mott and adapted for\n * SJCL by Stefan Thomas.\n *\n * CryptoJS (c) 2009–2012 by Jeff Mott. All rights reserved.\n * Released with New BSD License\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n * @author Jeff Mott\n * @author Stefan Thomas\n */\n\n/**\n * Context for a SHA-512 operation in progress.\n * @constructor\n */\nsjcl.hash.sha512 = function (hash) {\n  if (!this._key[0]) { this._precompute(); }\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 16 big-endian words.\n */\nsjcl.hash.sha512.hash = function (data) {\n  return (new sjcl.hash.sha512()).update(data).finalize();\n};\n\nsjcl.hash.sha512.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 1024,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n        var c = new Uint32Array(b);\n        var j = 0;\n        for (i = 1024+ol - ((1024+ol) & 1023); i <= nl; i+= 1024) {\n            this._block(c.subarray(32 * j, 32 * (j+1)));\n            j += 1;\n        }\n        b.splice(0, 32 * j);\n    } else {\n        for (i = 1024+ol - ((1024+ol) & 1023); i <= nl; i+= 1024) {\n            this._block(b.splice(0,32));\n        }\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 16 big-endian words.\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n\n    // Round out the buffer to a multiple of 32 words, less the 4 length words.\n    for (i = b.length + 4; i & 31; i++) {\n      b.push(0);\n    }\n\n    // append the length\n    b.push(0);\n    b.push(0);\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,32));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-512 initialization vector, to be precomputed.\n   * @private\n   */\n  _init:[],\n\n  /**\n   * Least significant 24 bits of SHA512 initialization values.\n   *\n   * Javascript only has 53 bits of precision, so we compute the 40 most\n   * significant bits and add the remaining 24 bits as constants.\n   *\n   * @private\n   */\n  _initr: [ 0xbcc908, 0xcaa73b, 0x94f82b, 0x1d36f1, 0xe682d1, 0x3e6c1f, 0x41bd6b, 0x7e2179 ],\n\n  /*\n  _init:\n  [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n   0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179],\n  */\n\n  /**\n   * The SHA-512 hash key, to be precomputed.\n   * @private\n   */\n  _key:[],\n\n  /**\n   * Least significant 24 bits of SHA512 key values.\n   * @private\n   */\n  _keyr:\n  [0x28ae22, 0xef65cd, 0x4d3b2f, 0x89dbbc, 0x48b538, 0x05d019, 0x194f9b, 0x6d8118,\n   0x030242, 0x706fbe, 0xe4b28c, 0xffb4e2, 0x7b896f, 0x1696b1, 0xc71235, 0x692694,\n   0xf14ad2, 0x4f25e3, 0x8cd5b5, 0xac9c65, 0x2b0275, 0xa6e483, 0x41fbd4, 0x1153b5,\n   0x66dfab, 0xb43210, 0xfb213f, 0xef0ee4, 0xa88fc2, 0x0aa725, 0x03826f, 0x0e6e70,\n   0xd22ffc, 0x26c926, 0xc42aed, 0x95b3df, 0xaf63de, 0x77b2a8, 0xedaee6, 0x82353b,\n   0xf10364, 0x423001, 0xf89791, 0x54be30, 0xef5218, 0x65a910, 0x71202a, 0xbbd1b8,\n   0xd2d0c8, 0x41ab53, 0x8eeb99, 0x9b48a8, 0xc95a63, 0x418acb, 0x63e373, 0xb2b8a3,\n   0xefb2fc, 0x172f60, 0xf0ab72, 0x6439ec, 0x631e28, 0x82bde9, 0xc67915, 0x72532b,\n   0x26619c, 0xc0c207, 0xe0eb1e, 0x6ed178, 0x176fba, 0xc898a6, 0xf90dae, 0x1c471b,\n   0x047d84, 0xc72493, 0xc9bebc, 0x100d4c, 0x3e42b6, 0x657e2a, 0xd6faec, 0x475817],\n\n  /*\n  _key:\n  [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n   0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n   0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n   0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n   0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n   0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n   0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n   0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n   0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n   0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n   0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n   0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n   0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n   0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n   0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n   0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n   0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n   0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n   0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n   0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817],\n  */\n\n  /**\n   * Function to precompute _init and _key.\n   * @private\n   */\n  _precompute: function () {\n    // XXX: This code is for precomputing the SHA256 constants, change for\n    //      SHA512 and re-enable.\n    var i = 0, prime = 2, factor , isPrime;\n\n    function frac(x)  { return (x-Math.floor(x)) * 0x100000000 | 0; }\n    function frac2(x) { return (x-Math.floor(x)) * 0x10000000000 & 0xff; }\n\n    for (; i<80; prime++) {\n      isPrime = true;\n      for (factor=2; factor*factor <= prime; factor++) {\n        if (prime % factor === 0) {\n          isPrime = false;\n          break;\n        }\n      }\n      if (isPrime) {\n        if (i<8) {\n          this._init[i*2] = frac(Math.pow(prime, 1/2));\n          this._init[i*2+1] = (frac2(Math.pow(prime, 1/2)) << 24) | this._initr[i];\n        }\n        this._key[i*2] = frac(Math.pow(prime, 1/3));\n        this._key[i*2+1] = (frac2(Math.pow(prime, 1/3)) << 24) | this._keyr[i];\n        i++;\n      }\n    }\n  },\n\n  /**\n   * Perform one cycle of SHA-512.\n   * @param {Uint32Array|bitArray} words one block of words.\n   * @private\n   */\n  _block:function (words) {\n    var i, wrh, wrl,\n        h = this._h,\n        k = this._key,\n        h0h = h[ 0], h0l = h[ 1], h1h = h[ 2], h1l = h[ 3],\n        h2h = h[ 4], h2l = h[ 5], h3h = h[ 6], h3l = h[ 7],\n        h4h = h[ 8], h4l = h[ 9], h5h = h[10], h5l = h[11],\n        h6h = h[12], h6l = h[13], h7h = h[14], h7l = h[15];\n    var w;\n    if (typeof Uint32Array !== 'undefined') {\n\t// When words is passed to _block, it has 32 elements. SHA512 _block\n\t// function extends words with new elements (at the end there are 160 elements). \n\t// The problem is that if we use Uint32Array instead of Array, \n\t// the length of Uint32Array cannot be changed. Thus, we replace words with a \n\t// normal Array here.\n        w = Array(160); // do not use Uint32Array here as the instantiation is slower\n        for (var j=0; j<32; j++){\n    \t    w[j] = words[j]; \n        }\n    } else {\n\tw = words;\n    } \n\n    // Working variables\n    var ah = h0h, al = h0l, bh = h1h, bl = h1l,\n        ch = h2h, cl = h2l, dh = h3h, dl = h3l,\n        eh = h4h, el = h4l, fh = h5h, fl = h5l,\n        gh = h6h, gl = h6l, hh = h7h, hl = h7l;\n\n    for (i=0; i<80; i++) {\n      // load up the input word for this round\n      if (i<16) {\n        wrh = w[i * 2];\n        wrl = w[i * 2 + 1];\n      } else {\n        // Gamma0\n        var gamma0xh = w[(i-15) * 2];\n        var gamma0xl = w[(i-15) * 2 + 1];\n        var gamma0h =\n          ((gamma0xl << 31) | (gamma0xh >>> 1)) ^\n          ((gamma0xl << 24) | (gamma0xh >>> 8)) ^\n           (gamma0xh >>> 7);\n        var gamma0l =\n          ((gamma0xh << 31) | (gamma0xl >>> 1)) ^\n          ((gamma0xh << 24) | (gamma0xl >>> 8)) ^\n          ((gamma0xh << 25) | (gamma0xl >>> 7));\n\n        // Gamma1\n        var gamma1xh = w[(i-2) * 2];\n        var gamma1xl = w[(i-2) * 2 + 1];\n        var gamma1h =\n          ((gamma1xl << 13) | (gamma1xh >>> 19)) ^\n          ((gamma1xh << 3)  | (gamma1xl >>> 29)) ^\n           (gamma1xh >>> 6);\n        var gamma1l =\n          ((gamma1xh << 13) | (gamma1xl >>> 19)) ^\n          ((gamma1xl << 3)  | (gamma1xh >>> 29)) ^\n          ((gamma1xh << 26) | (gamma1xl >>> 6));\n\n        // Shortcuts\n        var wr7h = w[(i-7) * 2];\n        var wr7l = w[(i-7) * 2 + 1];\n\n        var wr16h = w[(i-16) * 2];\n        var wr16l = w[(i-16) * 2 + 1];\n\n        // W(round) = gamma0 + W(round - 7) + gamma1 + W(round - 16)\n        wrl = gamma0l + wr7l;\n        wrh = gamma0h + wr7h + ((wrl >>> 0) < (gamma0l >>> 0) ? 1 : 0);\n        wrl += gamma1l;\n        wrh += gamma1h + ((wrl >>> 0) < (gamma1l >>> 0) ? 1 : 0);\n        wrl += wr16l;\n        wrh += wr16h + ((wrl >>> 0) < (wr16l >>> 0) ? 1 : 0);\n      }\n\n      w[i*2]     = wrh |= 0;\n      w[i*2 + 1] = wrl |= 0;\n\n      // Ch\n      var chh = (eh & fh) ^ (~eh & gh);\n      var chl = (el & fl) ^ (~el & gl);\n\n      // Maj\n      var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\n      var majl = (al & bl) ^ (al & cl) ^ (bl & cl);\n\n      // Sigma0\n      var sigma0h = ((al << 4) | (ah >>> 28)) ^ ((ah << 30) | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\n      var sigma0l = ((ah << 4) | (al >>> 28)) ^ ((al << 30) | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\n\n      // Sigma1\n      var sigma1h = ((el << 18) | (eh >>> 14)) ^ ((el << 14) | (eh >>> 18)) ^ ((eh << 23) | (el >>> 9));\n      var sigma1l = ((eh << 18) | (el >>> 14)) ^ ((eh << 14) | (el >>> 18)) ^ ((el << 23) | (eh >>> 9));\n\n      // K(round)\n      var krh = k[i*2];\n      var krl = k[i*2+1];\n\n      // t1 = h + sigma1 + ch + K(round) + W(round)\n      var t1l = hl + sigma1l;\n      var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\n      t1l += chl;\n      t1h += chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\n      t1l += krl;\n      t1h += krh + ((t1l >>> 0) < (krl >>> 0) ? 1 : 0);\n      t1l = t1l + wrl|0;   // FF32..FF34 perf issue https://bugzilla.mozilla.org/show_bug.cgi?id=1054972\n      t1h += wrh + ((t1l >>> 0) < (wrl >>> 0) ? 1 : 0);\n\n      // t2 = sigma0 + maj\n      var t2l = sigma0l + majl;\n      var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);\n\n      // Update working variables\n      hh = gh;\n      hl = gl;\n      gh = fh;\n      gl = fl;\n      fh = eh;\n      fl = el;\n      el = (dl + t1l) | 0;\n      eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n      dh = ch;\n      dl = cl;\n      ch = bh;\n      cl = bl;\n      bh = ah;\n      bl = al;\n      al = (t1l + t2l) | 0;\n      ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\n    }\n\n    // Intermediate hash\n    h0l = h[1] = (h0l + al) | 0;\n    h[0] = (h0h + ah + ((h0l >>> 0) < (al >>> 0) ? 1 : 0)) | 0;\n    h1l = h[3] = (h1l + bl) | 0;\n    h[2] = (h1h + bh + ((h1l >>> 0) < (bl >>> 0) ? 1 : 0)) | 0;\n    h2l = h[5] = (h2l + cl) | 0;\n    h[4] = (h2h + ch + ((h2l >>> 0) < (cl >>> 0) ? 1 : 0)) | 0;\n    h3l = h[7] = (h3l + dl) | 0;\n    h[6] = (h3h + dh + ((h3l >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n    h4l = h[9] = (h4l + el) | 0;\n    h[8] = (h4h + eh + ((h4l >>> 0) < (el >>> 0) ? 1 : 0)) | 0;\n    h5l = h[11] = (h5l + fl) | 0;\n    h[10] = (h5h + fh + ((h5l >>> 0) < (fl >>> 0) ? 1 : 0)) | 0;\n    h6l = h[13] = (h6l + gl) | 0;\n    h[12] = (h6h + gh + ((h6l >>> 0) < (gl >>> 0) ? 1 : 0)) | 0;\n    h7l = h[15] = (h7l + hl) | 0;\n    h[14] = (h7h + hh + ((h7l >>> 0) < (hl >>> 0) ? 1 : 0)) | 0;\n  }\n};\n\n\n/** @fileOverview HMAC implementation.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/** HMAC with the specified hash function.\n * @constructor\n * @param {bitArray} key the key for HMAC.\n * @param {Object} [Hash=sjcl.hash.sha256] The hash function to use.\n */\nsjcl.misc.hmac = function (key, Hash) {\n  this._hash = Hash = Hash || sjcl.hash.sha256;\n  var exKey = [[],[]], i,\n      bs = Hash.prototype.blockSize / 32;\n  this._baseHash = [new Hash(), new Hash()];\n\n  if (key.length > bs) {\n    key = Hash.hash(key);\n  }\n  \n  for (i=0; i<bs; i++) {\n    exKey[0][i] = key[i]^0x36363636;\n    exKey[1][i] = key[i]^0x5C5C5C5C;\n  }\n  \n  this._baseHash[0].update(exKey[0]);\n  this._baseHash[1].update(exKey[1]);\n  this._resultHash = new Hash(this._baseHash[0]);\n};\n\n/** HMAC with the specified hash function.  Also called encrypt since it's a prf.\n * @param {bitArray|String} data The data to mac.\n */\nsjcl.misc.hmac.prototype.encrypt = sjcl.misc.hmac.prototype.mac = function (data) {\n  if (!this._updated) {\n    this.update(data);\n    return this.digest(data);\n  } else {\n    throw new sjcl.exception.invalid(\"encrypt on already updated hmac called!\");\n  }\n};\n\nsjcl.misc.hmac.prototype.reset = function () {\n  this._resultHash = new this._hash(this._baseHash[0]);\n  this._updated = false;\n};\n\nsjcl.misc.hmac.prototype.update = function (data) {\n  this._updated = true;\n  this._resultHash.update(data);\n};\n\nsjcl.misc.hmac.prototype.digest = function () {\n  var w = this._resultHash.finalize(), result = new (this._hash)(this._baseHash[1]).update(w).finalize();\n\n  this.reset();\n\n  return result;\n};\n; /* harmony default export */ __webpack_exports__[\"a\"] = (sjcl);\n\n/***/ }),\n/* 2 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Crypto; });\n/* harmony import */ var sjcl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n\n\n\n/**\n * Node.js Crypto module.\n * @private\n * @type {Object}\n */\nconst NodeCrypto = _utils_js__WEBPACK_IMPORTED_MODULE_1__[/* InternalUtils */ \"a\"].require('crypto');\n\n/**\n * An object containing some cryptography functions\n * with dirty workarounds for Node.js and browsers.\n * @private\n * @type {Object}\n */\nconst Crypto = {};\n\nif (NodeCrypto) {\n\tlet bufferFrom;\n\n\tif (typeof Buffer.from === 'function') {\n\t\tbufferFrom = Buffer.from;\n\t} else {\n\t\t// Node.js < 5.10.0\n\t\tbufferFrom = function (arrbuf) {\n\t\t\t// eslint-disable-next-line no-buffer-constructor, unicorn/no-new-buffer\n\t\t\tconst nodeBuf = new Buffer(arrbuf.byteLength);\n\t\t\tconst arr = new Uint8Array(arrbuf);\n\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tnodeBuf[i] = arr[i];\n\t\t\t}\n\n\t\t\treturn nodeBuf;\n\t\t};\n\t}\n\n\tlet bufferTo;\n\n\tif (Buffer.prototype instanceof Uint8Array) {\n\t\tbufferTo = function (nodeBuf) {\n\t\t\treturn nodeBuf;\n\t\t};\n\t} else {\n\t\t// Node.js < 4.0.0\n\t\tbufferTo = function (nodeBuf) {\n\t\t\tconst arr = new Uint8Array(nodeBuf.length);\n\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = nodeBuf[i];\n\t\t\t}\n\n\t\t\treturn arr;\n\t\t};\n\t}\n\n\tCrypto.randomBytes = function (size) {\n\t\treturn bufferTo(NodeCrypto.randomBytes(size));\n\t};\n\n\t// In Node.js, the command:\n\t//   $ openssl list-message-digest-algorithms\n\t// displays the available digest algorithms.\n\tCrypto.hmacDigest = function (algorithm, key, message) {\n\t\treturn bufferTo(NodeCrypto.createHmac(algorithm, bufferFrom(key))\n\t\t\t.update(bufferFrom(message))\n\t\t\t.digest());\n\t};\n} else {\n\tlet getRandomValues;\n\n\tif (typeof global.crypto !== 'undefined' && typeof global.crypto.getRandomValues === 'function') {\n\t\tgetRandomValues = function (arr) {\n\t\t\tglobal.crypto.getRandomValues(arr);\n\t\t};\n\t} else if (typeof global.msCrypto !== 'undefined' && typeof global.msCrypto.getRandomValues === 'function') {\n\t\tgetRandomValues = function (arr) {\n\t\t\tglobal.msCrypto.getRandomValues(arr);\n\t\t};\n\t} else {\n\t\tconsole.warn('Cryptography API not available, falling back to \\'Math.random\\'...');\n\t\tgetRandomValues = function (arr) {\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = Math.floor(Math.random() * 256);\n\t\t\t}\n\t\t};\n\t}\n\n\tCrypto.randomBytes = function (size) {\n\t\tconst arr = new Uint8Array(size);\n\t\tgetRandomValues(arr);\n\t\treturn arr;\n\t};\n\n\tCrypto.hmacDigest = function (algorithm, key, message) {\n\t\tconst hash = sjcl__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"].hash[algorithm.toLowerCase()];\n\t\tif (typeof hash === 'undefined') {\n\t\t\tthrow new TypeError('Unknown hash function');\n\t\t}\n\n\t\t// eslint-disable-next-line new-cap\n\t\tconst hmac = new sjcl__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"].misc.hmac(sjcl__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"].codec.arrayBuffer.toBits(key), hash);\n\t\thmac.update(sjcl__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"].codec.arrayBuffer.toBits(message));\n\n\t\treturn sjcl__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"].codec.arrayBuffer.fromBits(hmac.digest(), false);\n\t};\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\nvar g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/utils.js\nvar utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./src/crypto.js\nvar src_crypto = __webpack_require__(2);\n\n// CONCATENATED MODULE: ./src/secret.js\n\n\n\n/**\n * Secret key object.\n */\nclass secret_Secret {\n\t/**\n\t * @param {Object} [config] Configuration options.\n\t * @param {ArrayBuffer} [config.buffer=Crypto.randomBytes] Secret key.\n\t * @param {number} [config.size=20] Number of random bytes to generate, ignored if 'buffer' is provided.\n\t */\n\tconstructor({buffer, size = 20} = {}) {\n\t\t/**\n\t\t * Secret key.\n\t\t * @type {ArrayBuffer}\n\t\t */\n\t\tthis.buffer = typeof buffer === 'undefined'\n\t\t\t? src_crypto[\"a\" /* Crypto */].randomBytes(size).buffer\n\t\t\t: buffer;\n\t}\n\n\t/**\n\t * Converts a raw string to a Secret object.\n\t * @method fromRaw\n\t * @param {string} str Raw string.\n\t * @returns {Secret} Secret object.\n\t */\n\tstatic fromRaw(str) {\n\t\treturn new this({buffer: utils[\"b\" /* Utils */].raw.encode(str)});\n\t}\n\n\t/**\n\t * Converts a base32 string to a Secret object.\n\t * @method fromB32\n\t * @param {string} str Base32 string.\n\t * @returns {Secret} Secret object.\n\t */\n\tstatic fromB32(str) {\n\t\treturn new this({buffer: utils[\"b\" /* Utils */].b32.encode(str)});\n\t}\n\n\t/**\n\t * Converts a hexadecimal string to a Secret object.\n\t * @method fromHex\n\t * @param {string} str Hexadecimal string.\n\t * @returns {Secret} Secret object.\n\t */\n\tstatic fromHex(str) {\n\t\treturn new this({buffer: utils[\"b\" /* Utils */].hex.encode(str)});\n\t}\n\n\t/**\n\t * String representation of secret key.\n\t * @type {string}\n\t */\n\tget raw() {\n\t\tObject.defineProperty(this, 'raw', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\twritable: true,\n\t\t\tvalue: utils[\"b\" /* Utils */].raw.decode(this.buffer)\n\t\t});\n\n\t\treturn this.raw;\n\t}\n\n\t/**\n\t * Base32 representation of secret key.\n\t * @type {string}\n\t */\n\tget b32() {\n\t\tObject.defineProperty(this, 'b32', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\twritable: true,\n\t\t\tvalue: utils[\"b\" /* Utils */].b32.decode(this.buffer)\n\t\t});\n\n\t\treturn this.b32;\n\t}\n\n\t/**\n\t * Hexadecimal representation of secret key.\n\t * @type {string}\n\t */\n\tget hex() {\n\t\tObject.defineProperty(this, 'hex', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\twritable: true,\n\t\t\tvalue: utils[\"b\" /* Utils */].hex.decode(this.buffer)\n\t\t});\n\n\t\treturn this.hex;\n\t}\n}\n\n// CONCATENATED MODULE: ./src/uri.js\n\n\n\n\n/**\n * Valid key URI parameters.\n * @private\n * @type {Array}\n */\nconst OTPURI_PARAMS = ['issuer', 'label', 'secret', 'algorithm', 'digits', 'counter', 'period'];\n\n/**\n * Key URI regex.\n *   otpauth://TYPE/[ISSUER:]LABEL?PARAMETERS\n * @private\n * @type {RegExp}\n */\nconst OTPURI_REGEX = new RegExp(`^otpauth:\\\\/\\\\/([ht]otp)\\\\/(.+)\\\\?((?:&?(?:${OTPURI_PARAMS.join('|')})=[^&]+)+)$`, 'i');\n\n/**\n * RFC 4648 base32 alphabet without pad.\n * @private\n * @type {string}\n */\nconst SECRET_REGEX = /^[2-7A-Z]+$/i;\n\n/**\n * Regex for supported algorithms.\n * @private\n * @type {RegExp}\n */\nconst ALGORITHM_REGEX = /^SHA(?:1|256|512)$/i;\n\n/**\n * Integer regex.\n * @private\n * @type {RegExp}\n */\nconst INTEGER_REGEX = /^[+-]?\\d+$/;\n\n/**\n * Positive integer regex.\n * @private\n * @type {RegExp}\n */\nconst POSITIVE_INTEGER_REGEX = /^\\+?[1-9]\\d*$/;\n\n/**\n * HOTP/TOTP object/string conversion.\n * @see https://github.com/google/google-authenticator/wiki/Key-Uri-Format\n */\nclass uri_URI {\n\t/**\n\t * Parses a Google Authenticator key URI and returns an HOTP/TOTP object.\n\t * @method parse\n\t * @param {string} uri Google Authenticator Key URI.\n\t * @returns {Object} HOTP/TOTP object.\n\t */\n\tstatic parse(uri) {\n\t\tlet uriGroups;\n\n\t\ttry {\n\t\t\turiGroups = decodeURIComponent(uri).match(OTPURI_REGEX);\n\t\t} catch (err) {}\n\n\t\tif (!Array.isArray(uriGroups)) {\n\t\t\tthrow new URIError('Invalid URI format');\n\t\t}\n\n\t\t// Extract URI groups\n\t\tconst uriType = uriGroups[1].toLowerCase();\n\t\tconst uriLabel = uriGroups[2].split(/:(.+)/, 2);\n\t\tconst uriParams = uriGroups[3].split('&').reduce(function (acc, cur) {\n\t\t\tconst pairArr = cur.split(/=(.+)/, 2);\n\t\t\tconst pairKey = pairArr[0].toLowerCase();\n\t\t\tconst pairVal = pairArr[1];\n\t\t\tconst pairAcc = acc;\n\n\t\t\tpairAcc[pairKey] = pairVal;\n\t\t\treturn pairAcc;\n\t\t}, {});\n\n\t\t// 'OTP' will be instantiated with 'config' argument\n\t\tlet OTP;\n\t\tlet config = {};\n\n\t\tif (uriType === 'hotp') {\n\t\t\tOTP = otp_HOTP;\n\n\t\t\t// Counter: required\n\t\t\tif (typeof uriParams.counter !== 'undefined' && INTEGER_REGEX.test(uriParams.counter)) {\n\t\t\t\tconfig.counter = parseInt(uriParams.counter, 10);\n\t\t\t} else {\n\t\t\t\tthrow new TypeError('Missing or invalid \\'counter\\' parameter');\n\t\t\t}\n\t\t} else if (uriType === 'totp') {\n\t\t\tOTP = otp_TOTP;\n\n\t\t\t// Period: optional\n\t\t\tif (typeof uriParams.period !== 'undefined') {\n\t\t\t\tif (POSITIVE_INTEGER_REGEX.test(uriParams.period)) {\n\t\t\t\t\tconfig.period = parseInt(uriParams.period, 10);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError('Invalid \\'period\\' parameter');\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError('Unknown OTP type');\n\t\t}\n\n\t\t// Label: required\n\t\t// Issuer: optional\n\t\tif (uriLabel.length === 2) {\n\t\t\tconfig.label = uriLabel[1];\n\t\t\tif (typeof uriParams.issuer === 'undefined') {\n\t\t\t\tconfig.issuer = uriLabel[0];\n\t\t\t} else if (uriParams.issuer === uriLabel[0]) {\n\t\t\t\tconfig.issuer = uriParams.issuer;\n\t\t\t} else {\n\t\t\t\tthrow new TypeError('Invalid \\'issuer\\' parameter');\n\t\t\t}\n\t\t} else {\n\t\t\tconfig.label = uriLabel[0];\n\t\t\tif (typeof uriParams.issuer !== 'undefined') {\n\t\t\t\tconfig.issuer = uriParams.issuer;\n\t\t\t}\n\t\t}\n\n\t\t// Secret: required\n\t\tif (typeof uriParams.secret !== 'undefined' && SECRET_REGEX.test(uriParams.secret)) {\n\t\t\tconfig.secret = new secret_Secret({buffer: utils[\"b\" /* Utils */].b32.encode(uriParams.secret)});\n\t\t} else {\n\t\t\tthrow new TypeError('Missing or invalid \\'secret\\' parameter');\n\t\t}\n\n\t\t// Algorithm: optional\n\t\tif (typeof uriParams.algorithm !== 'undefined') {\n\t\t\tif (ALGORITHM_REGEX.test(uriParams.algorithm)) {\n\t\t\t\tconfig.algorithm = uriParams.algorithm;\n\t\t\t} else {\n\t\t\t\tthrow new TypeError('Invalid \\'algorithm\\' parameter');\n\t\t\t}\n\t\t}\n\n\t\t// Digits: optional\n\t\tif (typeof uriParams.digits !== 'undefined') {\n\t\t\tif (POSITIVE_INTEGER_REGEX.test(uriParams.digits)) {\n\t\t\t\tconfig.digits = parseInt(uriParams.digits, 10);\n\t\t\t} else {\n\t\t\t\tthrow new TypeError('Invalid \\'digits\\' parameter');\n\t\t\t}\n\t\t}\n\n\t\treturn new OTP(config);\n\t}\n\n\t/**\n\t * Converts an HOTP/TOTP object to a Google Authenticator key URI.\n\t * @method stringify\n\t * @param {Object} otp HOTP/TOTP object.\n\t * @param {Object} [config] Configuration options.\n\t * @param {boolean} [config.legacyIssuer=true] Set issuer label prefix.\n\t * @returns {string} Google Authenticator Key URI.\n\t */\n\tstatic stringify(otp, {legacyIssuer = true} = {}) {\n\t\tconst isHOTP = otp instanceof otp_HOTP;\n\t\tconst isTOTP = otp instanceof otp_TOTP;\n\n\t\tif (!isHOTP && !isTOTP) {\n\t\t\tthrow new TypeError('Invalid \\'HOTP/TOTP\\' object');\n\t\t}\n\n\t\t// Key URI format:\n\t\t// otpauth://TYPE/[ISSUER:]LABEL?PARAMETERS\n\t\tlet uri = 'otpauth://';\n\n\t\t// Type\n\t\turi += (isTOTP ? 'totp' : 'hotp') + '/';\n\n\t\t// Label and optional issuer\n\t\tif (otp.issuer.length > 0) {\n\t\t\t// Issuer label prefix\n\t\t\tif (legacyIssuer) {\n\t\t\t\turi += `${otp.issuer}:`;\n\t\t\t}\n\n\t\t\turi += `${otp.label}?issuer=${otp.issuer}&`;\n\t\t} else {\n\t\t\t// No issuer\n\t\t\turi += `${otp.label}?`;\n\t\t}\n\n\t\t// Generic parameters\n\t\turi += `secret=${otp.secret.b32}` +\n\t\t\t`&algorithm=${otp.algorithm}` +\n\t\t\t`&digits=${otp.digits}`;\n\n\t\t// Extra parameters\n\t\tif (isTOTP) {\n\t\t\t// TOTP parameters\n\t\t\turi += `&period=${otp.period}`;\n\t\t} else {\n\t\t\t// HOTP parameters\n\t\t\turi += `&counter=${otp.counter}`;\n\t\t}\n\n\t\treturn encodeURI(uri);\n\t}\n}\n\n// CONCATENATED MODULE: ./src/otp.js\n\n\n\n\n\n/**\n * Default configuration.\n * @private\n * @type {Object}\n */\nconst DC = {\n\tissuer: '',\n\tlabel: 'OTPAuth',\n\talgorithm: 'SHA1',\n\tdigits: 6,\n\tcounter: 0,\n\tperiod: 30,\n\twindow: 50,\n\tpad: true\n};\n\n/**\n * HOTP: An HMAC-based One-time Password Algorithm (RFC 4226).\n * @see https://tools.ietf.org/html/rfc4226\n */\nclass otp_HOTP {\n\t/**\n\t * @param {Object} [config] Configuration options.\n\t * @param {string} [config.issuer=''] Account provider.\n\t * @param {string} [config.label='OTPAuth'] Account label.\n\t * @param {Secret} [config.secret=Secret] Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.counter=0] Initial counter value.\n\t */\n\tconstructor({issuer = DC.issuer, label = DC.label, secret = new secret_Secret(), algorithm = DC.algorithm, digits = DC.digits, counter = DC.counter} = {}) {\n\t\t/**\n\t\t * Account provider.\n\t\t * @type {string}\n\t\t */\n\t\tthis.issuer = issuer;\n\t\t/**\n\t\t * Account label.\n\t\t * @type {string}\n\t\t */\n\t\tthis.label = label;\n\t\t/**\n\t\t * Secret key.\n\t\t * @type {Secret}\n\t\t */\n\t\tthis.secret = secret;\n\t\t/**\n\t\t * HMAC hashing algorithm.\n\t\t * @type {string}\n\t\t */\n\t\tthis.algorithm = algorithm;\n\t\t/**\n\t\t * Token length.\n\t\t * @type {number}\n\t\t */\n\t\tthis.digits = digits;\n\t\t/**\n\t\t * Initial counter value.\n\t\t * @type {number}\n\t\t */\n\t\tthis.counter = counter;\n\t}\n\n\t/**\n\t * Generates an HOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.counter=0] Counter value.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tstatic generate({secret, algorithm = DC.algorithm, digits = DC.digits, counter = DC.counter, pad = DC.pad}) {\n\t\tconst digest = new Uint8Array(src_crypto[\"a\" /* Crypto */].hmacDigest(algorithm, secret.buffer, utils[\"b\" /* Utils */].uint.encode(counter)));\n\t\tconst offset = digest[digest.byteLength - 1] & 15;\n\t\tconst otp = (\n\t\t\t((digest[offset] & 127) << 24) |\n\t\t\t((digest[offset + 1] & 255) << 16) |\n\t\t\t((digest[offset + 2] & 255) << 8) |\n\t\t\t(digest[offset + 3] & 255)\n\t\t) % Math.pow(10, digits);\n\n\t\treturn pad\n\t\t\t? new Array(1 + digits - String(otp).length).join('0') + otp\n\t\t\t: otp;\n\t}\n\n\t/**\n\t * Generates an HOTP token.\n\t * @param {Object} [config] Configuration options.\n\t * @param {number} [config.counter=this.counter++] Counter value.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tgenerate({counter = this.counter++, pad} = {}) {\n\t\treturn otp_HOTP.generate({\n\t\t\tsecret: this.secret,\n\t\t\talgorithm: this.algorithm,\n\t\t\tdigits: this.digits,\n\t\t\tcounter: counter,\n\t\t\tpad: pad\n\t\t});\n\t}\n\n\t/**\n\t * Validates an HOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.counter=0] Counter value.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tstatic validate({token, secret, algorithm, counter = DC.counter, window = DC.window}) {\n\t\tconst searchToken = parseInt(token, 10);\n\n\t\tfor (let i = counter - window; i <= counter + window; ++i) {\n\t\t\tconst generatedToken = otp_HOTP.generate({\n\t\t\t\tsecret: secret,\n\t\t\t\talgorithm: algorithm,\n\t\t\t\tcounter: i,\n\t\t\t\tdigits: token.length,\n\t\t\t\tpad: false\n\t\t\t});\n\n\t\t\tif (searchToken === generatedToken) {\n\t\t\t\treturn i - counter;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Validates an HOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {number} [config.counter=this.counter] Counter value.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tvalidate({token, counter = this.counter, window}) {\n\t\treturn otp_HOTP.validate({\n\t\t\ttoken: token,\n\t\t\tsecret: this.secret,\n\t\t\talgorithm: this.algorithm,\n\t\t\tcounter: counter,\n\t\t\twindow: window\n\t\t});\n\t}\n\n\t/**\n\t * Returns a Google Authenticator key URI.\n\t * @returns {string} URI.\n\t */\n\ttoString() {\n\t\treturn uri_URI.stringify(this);\n\t}\n}\n\n/**\n * TOTP: Time-Based One-Time Password Algorithm (RFC 6238).\n * @see https://tools.ietf.org/html/rfc6238\n */\nclass otp_TOTP {\n\t/**\n\t * @param {Object} [config] Configuration options.\n\t * @param {string} [config.issuer=''] Account provider.\n\t * @param {string} [config.label='OTPAuth'] Account label.\n\t * @param {Secret} [config.secret=Secret] Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.period=30] Token time-step duration.\n\t */\n\tconstructor({issuer = DC.issuer, label = DC.label, secret = new secret_Secret(), algorithm = DC.algorithm, digits = DC.digits, period = DC.period} = {}) {\n\t\t/**\n\t\t * Account provider.\n\t\t * @type {string}\n\t\t */\n\t\tthis.issuer = issuer;\n\t\t/**\n\t\t * Account label.\n\t\t * @type {string}\n\t\t */\n\t\tthis.label = label;\n\t\t/**\n\t\t * Secret key.\n\t\t * @type {string}\n\t\t */\n\t\tthis.secret = secret;\n\t\t/**\n\t\t * HMAC hashing algorithm.\n\t\t * @type {Secret}\n\t\t */\n\t\tthis.algorithm = algorithm;\n\t\t/**\n\t\t * Token length.\n\t\t * @type {number}\n\t\t */\n\t\tthis.digits = digits;\n\t\t/**\n\t\t * Token time-step duration.\n\t\t * @type {number}\n\t\t */\n\t\tthis.period = period;\n\t}\n\n\t/**\n\t * Generates a TOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.period=30] Token time-step duration.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tstatic generate({secret, algorithm, digits, period = DC.period, timestamp = Date.now(), pad}) {\n\t\treturn otp_HOTP.generate({\n\t\t\tsecret: secret,\n\t\t\talgorithm: algorithm,\n\t\t\tdigits: digits,\n\t\t\tcounter: Math.floor(timestamp / 1000 / period),\n\t\t\tpad: pad\n\t\t});\n\t}\n\n\t/**\n\t * Generates a TOTP token.\n\t * @param {Object} [config] Configuration options.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tgenerate({timestamp = Date.now(), pad} = {}) {\n\t\treturn otp_TOTP.generate({\n\t\t\tsecret: this.secret,\n\t\t\talgorithm: this.algorithm,\n\t\t\tdigits: this.digits,\n\t\t\tperiod: this.period,\n\t\t\ttimestamp: timestamp,\n\t\t\tpad: pad\n\t\t});\n\t}\n\n\t/**\n\t * Validates a TOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.period=30] Token time-step duration.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tstatic validate({token, secret, algorithm, period = DC.period, timestamp = Date.now(), window}) {\n\t\treturn otp_HOTP.validate({\n\t\t\ttoken: token,\n\t\t\tsecret: secret,\n\t\t\talgorithm: algorithm,\n\t\t\tcounter: Math.floor(timestamp / 1000 / period),\n\t\t\twindow: window\n\t\t});\n\t}\n\n\t/**\n\t * Validates a TOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tvalidate({token, timestamp, window}) {\n\t\treturn otp_TOTP.validate({\n\t\t\ttoken: token,\n\t\t\tsecret: this.secret,\n\t\t\talgorithm: this.algorithm,\n\t\t\tperiod: this.period,\n\t\t\ttimestamp: timestamp,\n\t\t\twindow: window\n\t\t});\n\t}\n\n\t/**\n\t * Returns a Google Authenticator key URI.\n\t * @returns {string} URI.\n\t */\n\ttoString() {\n\t\treturn uri_URI.stringify(this);\n\t}\n}\n\n// CONCATENATED MODULE: ./src/main.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"version\", function() { return version; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"HOTP\", function() { return otp_HOTP; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"TOTP\", function() { return otp_TOTP; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"URI\", function() { return uri_URI; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Secret\", function() { return secret_Secret; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Utils\", function() { return utils[\"b\" /* Utils */]; });\n/**\n * One Time Password (HOTP/TOTP) library for Node.js and browser.\n * @module OTPAuth\n * @author Héctor Molinero Fernández <hector@molinero.xyz>\n */\n\n\n\n\n\n/**\n * Library version.\n * @type {string}\n */\nconst version = \"3.2.0\";\n\n\n/***/ })\n/******/ ]);\n});","/**\n * An object containing some utilities.\n * @type {Object}\n */\nexport const Utils = {};\n\n/**\n * UInt conversion.\n * @type {Object}\n */\nUtils.uint = {};\n\n/**\n * Converts an ArrayBuffer to an integer.\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {number} Integer.\n */\nUtils.uint.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\tlet num = 0;\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] === 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tnum *= 256;\n\t\tnum += arr[i];\n\t}\n\n\treturn num;\n};\n\n/**\n * Converts an integer to an ArrayBuffer.\n * @param {number} num Integer.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nUtils.uint.encode = function (num) {\n\tconst buf = new ArrayBuffer(8);\n\tconst arr = new Uint8Array(buf);\n\tlet acc = num;\n\n\tfor (let i = 7; i >= 0; i--) {\n\t\tif (acc === 0) {\n\t\t\tbreak;\n\t\t}\n\n\t\tarr[i] = acc & 255;\n\t\tacc -= arr[i];\n\t\tacc /= 256;\n\t}\n\n\treturn buf;\n};\n\n/**\n * Raw string conversion.\n * @type {Object}\n */\nUtils.raw = {};\n\n/**\n * Converts an ArrayBuffer to a string.\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {string} String.\n */\nUtils.raw.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\tlet str = '';\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tstr += String.fromCharCode(arr[i]);\n\t}\n\n\treturn str;\n};\n\n/**\n * Converts a string to an ArrayBuffer.\n * @param {string} str String.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nUtils.raw.encode = function (str) {\n\tconst buf = new ArrayBuffer(str.length);\n\tconst arr = new Uint8Array(buf);\n\n\tfor (let i = 0; i < str.length; i++) {\n\t\tarr[i] = str.charCodeAt(i);\n\t}\n\n\treturn buf;\n};\n\n/**\n * Base32 string conversion.\n * @type {Object}\n */\nUtils.b32 = {};\n\n/**\n * RFC 4648 base32 alphabet without pad.\n * @type {string}\n */\nUtils.b32.alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\n\n/**\n * Converts an ArrayBuffer to a base32 string (RFC 4648).\n * @see https://github.com/LinusU/base32-decode\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {string} Base32 string.\n */\nUtils.b32.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\n\tlet bits = 0;\n\tlet value = 0;\n\tlet str = '';\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tvalue = (value << 8) | arr[i];\n\t\tbits += 8;\n\n\t\twhile (bits >= 5) {\n\t\t\tstr += Utils.b32.alphabet[(value >>> bits - 5) & 31];\n\t\t\tbits -= 5;\n\t\t}\n\t}\n\n\tif (bits > 0) {\n\t\tstr += Utils.b32.alphabet[(value << 5 - bits) & 31];\n\t}\n\n\treturn str;\n};\n\n/**\n * Converts a base32 string to an ArrayBuffer (RFC 4648).\n * @see https://github.com/LinusU/base32-encode\n * @param {string} str Base32 string.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nUtils.b32.encode = function (str) {\n\tconst strUpp = str.toUpperCase();\n\tconst buf = new ArrayBuffer(str.length * 5 / 8 | 0);\n\tconst arr = new Uint8Array(buf);\n\n\tlet bits = 0;\n\tlet value = 0;\n\tlet index = 0;\n\n\tfor (let i = 0; i < strUpp.length; i++) {\n\t\tlet idx = Utils.b32.alphabet.indexOf(strUpp[i]);\n\n\t\tif (idx === -1) {\n\t\t\tthrow new TypeError('Invalid character found: ' + strUpp[i]);\n\t\t}\n\n\t\tvalue = (value << 5) | idx;\n\t\tbits += 5;\n\n\t\tif (bits >= 8) {\n\t\t\tarr[index++] = (value >>> bits - 8) & 255;\n\t\t\tbits -= 8;\n\t\t}\n\t}\n\n\treturn buf;\n};\n\n/**\n * Hexadecimal string conversion.\n * @type {Object}\n */\nUtils.hex = {};\n\n/**\n * Converts an ArrayBuffer to a hexadecimal string.\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {string} Hexadecimal string.\n */\nUtils.hex.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\tlet str = '';\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tconst hexByte = arr[i].toString(16);\n\n\t\tstr += hexByte.length === 1\n\t\t\t? '0' + hexByte\n\t\t\t: hexByte;\n\t}\n\n\treturn str.toUpperCase();\n};\n\n/**\n * Converts a hexadecimal string to an ArrayBuffer.\n * @param {string} str Hexadecimal string.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nUtils.hex.encode = function (str) {\n\tconst buf = new ArrayBuffer(str.length / 2);\n\tconst arr = new Uint8Array(buf);\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tarr[i] = parseInt(str.substr(i * 2, 2), 16);\n\t}\n\n\treturn buf;\n};\n\n/**\n * An object containing some utilities (for internal use only).\n * @private\n * @type {Object}\n */\nexport const InternalUtils = {};\n\n/**\n * Detect if running in \"Node.js\".\n * @type {boolean}\n */\n// eslint-disable-next-line dot-notation\nInternalUtils.isNode = Object.prototype.toString.call(global['process']) === '[object process]';\n\n/**\n * Dynamically import \"Node.js\" modules.\n * @param {string} name Name.\n * @returns {Object} Module.\n */\nInternalUtils.require = function (name) {\n\t// eslint-disable-next-line no-eval\n\treturn InternalUtils.isNode ? eval('require')(name) : null;\n};\n","import sjcl from 'sjcl';\nimport {InternalUtils} from './utils.js';\n\n/**\n * Node.js Crypto module.\n * @private\n * @type {Object}\n */\nconst NodeCrypto = InternalUtils.require('crypto');\n\n/**\n * An object containing some cryptography functions\n * with dirty workarounds for Node.js and browsers.\n * @private\n * @type {Object}\n */\nexport const Crypto = {};\n\nif (NodeCrypto) {\n\tlet bufferFrom;\n\n\tif (typeof Buffer.from === 'function') {\n\t\tbufferFrom = Buffer.from;\n\t} else {\n\t\t// Node.js < 5.10.0\n\t\tbufferFrom = function (arrbuf) {\n\t\t\t// eslint-disable-next-line no-buffer-constructor, unicorn/no-new-buffer\n\t\t\tconst nodeBuf = new Buffer(arrbuf.byteLength);\n\t\t\tconst arr = new Uint8Array(arrbuf);\n\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tnodeBuf[i] = arr[i];\n\t\t\t}\n\n\t\t\treturn nodeBuf;\n\t\t};\n\t}\n\n\tlet bufferTo;\n\n\tif (Buffer.prototype instanceof Uint8Array) {\n\t\tbufferTo = function (nodeBuf) {\n\t\t\treturn nodeBuf;\n\t\t};\n\t} else {\n\t\t// Node.js < 4.0.0\n\t\tbufferTo = function (nodeBuf) {\n\t\t\tconst arr = new Uint8Array(nodeBuf.length);\n\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = nodeBuf[i];\n\t\t\t}\n\n\t\t\treturn arr;\n\t\t};\n\t}\n\n\tCrypto.randomBytes = function (size) {\n\t\treturn bufferTo(NodeCrypto.randomBytes(size));\n\t};\n\n\t// In Node.js, the command:\n\t//   $ openssl list-message-digest-algorithms\n\t// displays the available digest algorithms.\n\tCrypto.hmacDigest = function (algorithm, key, message) {\n\t\treturn bufferTo(NodeCrypto.createHmac(algorithm, bufferFrom(key))\n\t\t\t.update(bufferFrom(message))\n\t\t\t.digest());\n\t};\n} else {\n\tlet getRandomValues;\n\n\tif (typeof global.crypto !== 'undefined' && typeof global.crypto.getRandomValues === 'function') {\n\t\tgetRandomValues = function (arr) {\n\t\t\tglobal.crypto.getRandomValues(arr);\n\t\t};\n\t} else if (typeof global.msCrypto !== 'undefined' && typeof global.msCrypto.getRandomValues === 'function') {\n\t\tgetRandomValues = function (arr) {\n\t\t\tglobal.msCrypto.getRandomValues(arr);\n\t\t};\n\t} else {\n\t\tconsole.warn('Cryptography API not available, falling back to \\'Math.random\\'...');\n\t\tgetRandomValues = function (arr) {\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = Math.floor(Math.random() * 256);\n\t\t\t}\n\t\t};\n\t}\n\n\tCrypto.randomBytes = function (size) {\n\t\tconst arr = new Uint8Array(size);\n\t\tgetRandomValues(arr);\n\t\treturn arr;\n\t};\n\n\tCrypto.hmacDigest = function (algorithm, key, message) {\n\t\tconst hash = sjcl.hash[algorithm.toLowerCase()];\n\t\tif (typeof hash === 'undefined') {\n\t\t\tthrow new TypeError('Unknown hash function');\n\t\t}\n\n\t\t// eslint-disable-next-line new-cap\n\t\tconst hmac = new sjcl.misc.hmac(sjcl.codec.arrayBuffer.toBits(key), hash);\n\t\thmac.update(sjcl.codec.arrayBuffer.toBits(message));\n\n\t\treturn sjcl.codec.arrayBuffer.fromBits(hmac.digest(), false);\n\t};\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import {Utils} from './utils.js';\nimport {Crypto} from './crypto.js';\nimport {Secret} from './secret.js';\nimport {URI} from './uri.js';\n\n/**\n * Default configuration.\n * @private\n * @type {Object}\n */\nconst DC = {\n\tissuer: '',\n\tlabel: 'OTPAuth',\n\talgorithm: 'SHA1',\n\tdigits: 6,\n\tcounter: 0,\n\tperiod: 30,\n\twindow: 50,\n\tpad: true\n};\n\n/**\n * HOTP: An HMAC-based One-time Password Algorithm (RFC 4226).\n * @see https://tools.ietf.org/html/rfc4226\n */\nexport class HOTP {\n\t/**\n\t * @param {Object} [config] Configuration options.\n\t * @param {string} [config.issuer=''] Account provider.\n\t * @param {string} [config.label='OTPAuth'] Account label.\n\t * @param {Secret} [config.secret=Secret] Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.counter=0] Initial counter value.\n\t */\n\tconstructor({issuer = DC.issuer, label = DC.label, secret = new Secret(), algorithm = DC.algorithm, digits = DC.digits, counter = DC.counter} = {}) {\n\t\t/**\n\t\t * Account provider.\n\t\t * @type {string}\n\t\t */\n\t\tthis.issuer = issuer;\n\t\t/**\n\t\t * Account label.\n\t\t * @type {string}\n\t\t */\n\t\tthis.label = label;\n\t\t/**\n\t\t * Secret key.\n\t\t * @type {Secret}\n\t\t */\n\t\tthis.secret = secret;\n\t\t/**\n\t\t * HMAC hashing algorithm.\n\t\t * @type {string}\n\t\t */\n\t\tthis.algorithm = algorithm;\n\t\t/**\n\t\t * Token length.\n\t\t * @type {number}\n\t\t */\n\t\tthis.digits = digits;\n\t\t/**\n\t\t * Initial counter value.\n\t\t * @type {number}\n\t\t */\n\t\tthis.counter = counter;\n\t}\n\n\t/**\n\t * Generates an HOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.counter=0] Counter value.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tstatic generate({secret, algorithm = DC.algorithm, digits = DC.digits, counter = DC.counter, pad = DC.pad}) {\n\t\tconst digest = new Uint8Array(Crypto.hmacDigest(algorithm, secret.buffer, Utils.uint.encode(counter)));\n\t\tconst offset = digest[digest.byteLength - 1] & 15;\n\t\tconst otp = (\n\t\t\t((digest[offset] & 127) << 24) |\n\t\t\t((digest[offset + 1] & 255) << 16) |\n\t\t\t((digest[offset + 2] & 255) << 8) |\n\t\t\t(digest[offset + 3] & 255)\n\t\t) % Math.pow(10, digits);\n\n\t\treturn pad\n\t\t\t? new Array(1 + digits - String(otp).length).join('0') + otp\n\t\t\t: otp;\n\t}\n\n\t/**\n\t * Generates an HOTP token.\n\t * @param {Object} [config] Configuration options.\n\t * @param {number} [config.counter=this.counter++] Counter value.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tgenerate({counter = this.counter++, pad} = {}) {\n\t\treturn HOTP.generate({\n\t\t\tsecret: this.secret,\n\t\t\talgorithm: this.algorithm,\n\t\t\tdigits: this.digits,\n\t\t\tcounter: counter,\n\t\t\tpad: pad\n\t\t});\n\t}\n\n\t/**\n\t * Validates an HOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.counter=0] Counter value.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tstatic validate({token, secret, algorithm, counter = DC.counter, window = DC.window}) {\n\t\tconst searchToken = parseInt(token, 10);\n\n\t\tfor (let i = counter - window; i <= counter + window; ++i) {\n\t\t\tconst generatedToken = HOTP.generate({\n\t\t\t\tsecret: secret,\n\t\t\t\talgorithm: algorithm,\n\t\t\t\tcounter: i,\n\t\t\t\tdigits: token.length,\n\t\t\t\tpad: false\n\t\t\t});\n\n\t\t\tif (searchToken === generatedToken) {\n\t\t\t\treturn i - counter;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Validates an HOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {number} [config.counter=this.counter] Counter value.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tvalidate({token, counter = this.counter, window}) {\n\t\treturn HOTP.validate({\n\t\t\ttoken: token,\n\t\t\tsecret: this.secret,\n\t\t\talgorithm: this.algorithm,\n\t\t\tcounter: counter,\n\t\t\twindow: window\n\t\t});\n\t}\n\n\t/**\n\t * Returns a Google Authenticator key URI.\n\t * @returns {string} URI.\n\t */\n\ttoString() {\n\t\treturn URI.stringify(this);\n\t}\n}\n\n/**\n * TOTP: Time-Based One-Time Password Algorithm (RFC 6238).\n * @see https://tools.ietf.org/html/rfc6238\n */\nexport class TOTP {\n\t/**\n\t * @param {Object} [config] Configuration options.\n\t * @param {string} [config.issuer=''] Account provider.\n\t * @param {string} [config.label='OTPAuth'] Account label.\n\t * @param {Secret} [config.secret=Secret] Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.period=30] Token time-step duration.\n\t */\n\tconstructor({issuer = DC.issuer, label = DC.label, secret = new Secret(), algorithm = DC.algorithm, digits = DC.digits, period = DC.period} = {}) {\n\t\t/**\n\t\t * Account provider.\n\t\t * @type {string}\n\t\t */\n\t\tthis.issuer = issuer;\n\t\t/**\n\t\t * Account label.\n\t\t * @type {string}\n\t\t */\n\t\tthis.label = label;\n\t\t/**\n\t\t * Secret key.\n\t\t * @type {string}\n\t\t */\n\t\tthis.secret = secret;\n\t\t/**\n\t\t * HMAC hashing algorithm.\n\t\t * @type {Secret}\n\t\t */\n\t\tthis.algorithm = algorithm;\n\t\t/**\n\t\t * Token length.\n\t\t * @type {number}\n\t\t */\n\t\tthis.digits = digits;\n\t\t/**\n\t\t * Token time-step duration.\n\t\t * @type {number}\n\t\t */\n\t\tthis.period = period;\n\t}\n\n\t/**\n\t * Generates a TOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.period=30] Token time-step duration.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tstatic generate({secret, algorithm, digits, period = DC.period, timestamp = Date.now(), pad}) {\n\t\treturn HOTP.generate({\n\t\t\tsecret: secret,\n\t\t\talgorithm: algorithm,\n\t\t\tdigits: digits,\n\t\t\tcounter: Math.floor(timestamp / 1000 / period),\n\t\t\tpad: pad\n\t\t});\n\t}\n\n\t/**\n\t * Generates a TOTP token.\n\t * @param {Object} [config] Configuration options.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tgenerate({timestamp = Date.now(), pad} = {}) {\n\t\treturn TOTP.generate({\n\t\t\tsecret: this.secret,\n\t\t\talgorithm: this.algorithm,\n\t\t\tdigits: this.digits,\n\t\t\tperiod: this.period,\n\t\t\ttimestamp: timestamp,\n\t\t\tpad: pad\n\t\t});\n\t}\n\n\t/**\n\t * Validates a TOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.period=30] Token time-step duration.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tstatic validate({token, secret, algorithm, period = DC.period, timestamp = Date.now(), window}) {\n\t\treturn HOTP.validate({\n\t\t\ttoken: token,\n\t\t\tsecret: secret,\n\t\t\talgorithm: algorithm,\n\t\t\tcounter: Math.floor(timestamp / 1000 / period),\n\t\t\twindow: window\n\t\t});\n\t}\n\n\t/**\n\t * Validates a TOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tvalidate({token, timestamp, window}) {\n\t\treturn TOTP.validate({\n\t\t\ttoken: token,\n\t\t\tsecret: this.secret,\n\t\t\talgorithm: this.algorithm,\n\t\t\tperiod: this.period,\n\t\t\ttimestamp: timestamp,\n\t\t\twindow: window\n\t\t});\n\t}\n\n\t/**\n\t * Returns a Google Authenticator key URI.\n\t * @returns {string} URI.\n\t */\n\ttoString() {\n\t\treturn URI.stringify(this);\n\t}\n}\n","import {Utils} from './utils.js';\nimport {Secret} from './secret.js';\nimport {HOTP, TOTP} from './otp.js';\n\n/**\n * Valid key URI parameters.\n * @private\n * @type {Array}\n */\nconst OTPURI_PARAMS = ['issuer', 'label', 'secret', 'algorithm', 'digits', 'counter', 'period'];\n\n/**\n * Key URI regex.\n *   otpauth://TYPE/[ISSUER:]LABEL?PARAMETERS\n * @private\n * @type {RegExp}\n */\nconst OTPURI_REGEX = new RegExp(`^otpauth:\\\\/\\\\/([ht]otp)\\\\/(.+)\\\\?((?:&?(?:${OTPURI_PARAMS.join('|')})=[^&]+)+)$`, 'i');\n\n/**\n * RFC 4648 base32 alphabet without pad.\n * @private\n * @type {string}\n */\nconst SECRET_REGEX = /^[2-7A-Z]+$/i;\n\n/**\n * Regex for supported algorithms.\n * @private\n * @type {RegExp}\n */\nconst ALGORITHM_REGEX = /^SHA(?:1|256|512)$/i;\n\n/**\n * Integer regex.\n * @private\n * @type {RegExp}\n */\nconst INTEGER_REGEX = /^[+-]?\\d+$/;\n\n/**\n * Positive integer regex.\n * @private\n * @type {RegExp}\n */\nconst POSITIVE_INTEGER_REGEX = /^\\+?[1-9]\\d*$/;\n\n/**\n * HOTP/TOTP object/string conversion.\n * @see https://github.com/google/google-authenticator/wiki/Key-Uri-Format\n */\nexport class URI {\n\t/**\n\t * Parses a Google Authenticator key URI and returns an HOTP/TOTP object.\n\t * @method parse\n\t * @param {string} uri Google Authenticator Key URI.\n\t * @returns {Object} HOTP/TOTP object.\n\t */\n\tstatic parse(uri) {\n\t\tlet uriGroups;\n\n\t\ttry {\n\t\t\turiGroups = decodeURIComponent(uri).match(OTPURI_REGEX);\n\t\t} catch (err) {}\n\n\t\tif (!Array.isArray(uriGroups)) {\n\t\t\tthrow new URIError('Invalid URI format');\n\t\t}\n\n\t\t// Extract URI groups\n\t\tconst uriType = uriGroups[1].toLowerCase();\n\t\tconst uriLabel = uriGroups[2].split(/:(.+)/, 2);\n\t\tconst uriParams = uriGroups[3].split('&').reduce(function (acc, cur) {\n\t\t\tconst pairArr = cur.split(/=(.+)/, 2);\n\t\t\tconst pairKey = pairArr[0].toLowerCase();\n\t\t\tconst pairVal = pairArr[1];\n\t\t\tconst pairAcc = acc;\n\n\t\t\tpairAcc[pairKey] = pairVal;\n\t\t\treturn pairAcc;\n\t\t}, {});\n\n\t\t// 'OTP' will be instantiated with 'config' argument\n\t\tlet OTP;\n\t\tlet config = {};\n\n\t\tif (uriType === 'hotp') {\n\t\t\tOTP = HOTP;\n\n\t\t\t// Counter: required\n\t\t\tif (typeof uriParams.counter !== 'undefined' && INTEGER_REGEX.test(uriParams.counter)) {\n\t\t\t\tconfig.counter = parseInt(uriParams.counter, 10);\n\t\t\t} else {\n\t\t\t\tthrow new TypeError('Missing or invalid \\'counter\\' parameter');\n\t\t\t}\n\t\t} else if (uriType === 'totp') {\n\t\t\tOTP = TOTP;\n\n\t\t\t// Period: optional\n\t\t\tif (typeof uriParams.period !== 'undefined') {\n\t\t\t\tif (POSITIVE_INTEGER_REGEX.test(uriParams.period)) {\n\t\t\t\t\tconfig.period = parseInt(uriParams.period, 10);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError('Invalid \\'period\\' parameter');\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError('Unknown OTP type');\n\t\t}\n\n\t\t// Label: required\n\t\t// Issuer: optional\n\t\tif (uriLabel.length === 2) {\n\t\t\tconfig.label = uriLabel[1];\n\t\t\tif (typeof uriParams.issuer === 'undefined') {\n\t\t\t\tconfig.issuer = uriLabel[0];\n\t\t\t} else if (uriParams.issuer === uriLabel[0]) {\n\t\t\t\tconfig.issuer = uriParams.issuer;\n\t\t\t} else {\n\t\t\t\tthrow new TypeError('Invalid \\'issuer\\' parameter');\n\t\t\t}\n\t\t} else {\n\t\t\tconfig.label = uriLabel[0];\n\t\t\tif (typeof uriParams.issuer !== 'undefined') {\n\t\t\t\tconfig.issuer = uriParams.issuer;\n\t\t\t}\n\t\t}\n\n\t\t// Secret: required\n\t\tif (typeof uriParams.secret !== 'undefined' && SECRET_REGEX.test(uriParams.secret)) {\n\t\t\tconfig.secret = new Secret({buffer: Utils.b32.encode(uriParams.secret)});\n\t\t} else {\n\t\t\tthrow new TypeError('Missing or invalid \\'secret\\' parameter');\n\t\t}\n\n\t\t// Algorithm: optional\n\t\tif (typeof uriParams.algorithm !== 'undefined') {\n\t\t\tif (ALGORITHM_REGEX.test(uriParams.algorithm)) {\n\t\t\t\tconfig.algorithm = uriParams.algorithm;\n\t\t\t} else {\n\t\t\t\tthrow new TypeError('Invalid \\'algorithm\\' parameter');\n\t\t\t}\n\t\t}\n\n\t\t// Digits: optional\n\t\tif (typeof uriParams.digits !== 'undefined') {\n\t\t\tif (POSITIVE_INTEGER_REGEX.test(uriParams.digits)) {\n\t\t\t\tconfig.digits = parseInt(uriParams.digits, 10);\n\t\t\t} else {\n\t\t\t\tthrow new TypeError('Invalid \\'digits\\' parameter');\n\t\t\t}\n\t\t}\n\n\t\treturn new OTP(config);\n\t}\n\n\t/**\n\t * Converts an HOTP/TOTP object to a Google Authenticator key URI.\n\t * @method stringify\n\t * @param {Object} otp HOTP/TOTP object.\n\t * @param {Object} [config] Configuration options.\n\t * @param {boolean} [config.legacyIssuer=true] Set issuer label prefix.\n\t * @returns {string} Google Authenticator Key URI.\n\t */\n\tstatic stringify(otp, {legacyIssuer = true} = {}) {\n\t\tconst isHOTP = otp instanceof HOTP;\n\t\tconst isTOTP = otp instanceof TOTP;\n\n\t\tif (!isHOTP && !isTOTP) {\n\t\t\tthrow new TypeError('Invalid \\'HOTP/TOTP\\' object');\n\t\t}\n\n\t\t// Key URI format:\n\t\t// otpauth://TYPE/[ISSUER:]LABEL?PARAMETERS\n\t\tlet uri = 'otpauth://';\n\n\t\t// Type\n\t\turi += (isTOTP ? 'totp' : 'hotp') + '/';\n\n\t\t// Label and optional issuer\n\t\tif (otp.issuer.length > 0) {\n\t\t\t// Issuer label prefix\n\t\t\tif (legacyIssuer) {\n\t\t\t\turi += `${otp.issuer}:`;\n\t\t\t}\n\n\t\t\turi += `${otp.label}?issuer=${otp.issuer}&`;\n\t\t} else {\n\t\t\t// No issuer\n\t\t\turi += `${otp.label}?`;\n\t\t}\n\n\t\t// Generic parameters\n\t\turi += `secret=${otp.secret.b32}` +\n\t\t\t`&algorithm=${otp.algorithm}` +\n\t\t\t`&digits=${otp.digits}`;\n\n\t\t// Extra parameters\n\t\tif (isTOTP) {\n\t\t\t// TOTP parameters\n\t\t\turi += `&period=${otp.period}`;\n\t\t} else {\n\t\t\t// HOTP parameters\n\t\t\turi += `&counter=${otp.counter}`;\n\t\t}\n\n\t\treturn encodeURI(uri);\n\t}\n}\n","import {Utils} from './utils.js';\nimport {Crypto} from './crypto.js';\n\n/**\n * Secret key object.\n */\nexport class Secret {\n\t/**\n\t * @param {Object} [config] Configuration options.\n\t * @param {ArrayBuffer} [config.buffer=Crypto.randomBytes] Secret key.\n\t * @param {number} [config.size=20] Number of random bytes to generate, ignored if 'buffer' is provided.\n\t */\n\tconstructor({buffer, size = 20} = {}) {\n\t\t/**\n\t\t * Secret key.\n\t\t * @type {ArrayBuffer}\n\t\t */\n\t\tthis.buffer = typeof buffer === 'undefined'\n\t\t\t? Crypto.randomBytes(size).buffer\n\t\t\t: buffer;\n\t}\n\n\t/**\n\t * Converts a raw string to a Secret object.\n\t * @method fromRaw\n\t * @param {string} str Raw string.\n\t * @returns {Secret} Secret object.\n\t */\n\tstatic fromRaw(str) {\n\t\treturn new this({buffer: Utils.raw.encode(str)});\n\t}\n\n\t/**\n\t * Converts a base32 string to a Secret object.\n\t * @method fromB32\n\t * @param {string} str Base32 string.\n\t * @returns {Secret} Secret object.\n\t */\n\tstatic fromB32(str) {\n\t\treturn new this({buffer: Utils.b32.encode(str)});\n\t}\n\n\t/**\n\t * Converts a hexadecimal string to a Secret object.\n\t * @method fromHex\n\t * @param {string} str Hexadecimal string.\n\t * @returns {Secret} Secret object.\n\t */\n\tstatic fromHex(str) {\n\t\treturn new this({buffer: Utils.hex.encode(str)});\n\t}\n\n\t/**\n\t * String representation of secret key.\n\t * @type {string}\n\t */\n\tget raw() {\n\t\tObject.defineProperty(this, 'raw', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\twritable: true,\n\t\t\tvalue: Utils.raw.decode(this.buffer)\n\t\t});\n\n\t\treturn this.raw;\n\t}\n\n\t/**\n\t * Base32 representation of secret key.\n\t * @type {string}\n\t */\n\tget b32() {\n\t\tObject.defineProperty(this, 'b32', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\twritable: true,\n\t\t\tvalue: Utils.b32.decode(this.buffer)\n\t\t});\n\n\t\treturn this.b32;\n\t}\n\n\t/**\n\t * Hexadecimal representation of secret key.\n\t * @type {string}\n\t */\n\tget hex() {\n\t\tObject.defineProperty(this, 'hex', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\twritable: true,\n\t\t\tvalue: Utils.hex.decode(this.buffer)\n\t\t});\n\n\t\treturn this.hex;\n\t}\n}\n","/**\n * One Time Password (HOTP/TOTP) library for Node.js and browser.\n * @module OTPAuth\n * @author Héctor Molinero Fernández <hector@molinero.xyz>\n */\nexport {HOTP, TOTP} from './otp.js';\nexport {URI} from './uri.js';\nexport {Secret} from './secret.js';\nexport {Utils} from './utils.js';\n\n/**\n * Library version.\n * @type {string}\n */\nexport const version = process.env.VERSION;\n"],"sourceRoot":""}