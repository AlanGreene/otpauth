{"version":3,"sources":["webpack:/// [synthetic:base] ","webpack:/// [synthetic:util/global] ","webpack:///webpack/universalModuleDefinition","webpack:///otpauth.min.js","webpack:///webpack/bootstrap 69594f353bcd73c95bd7","webpack:///./src/Utils.js","webpack:///./src/Secret.js","webpack:///./src/OTP.js","webpack:///./src/Crypto.js","webpack:///./src/URI.js","webpack:///(webpack)/buildin/global.js","webpack:////tmp/tmp-27252OQTl8nih0x87.tmp"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","__webpack_require__.d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__webpack_require__.n","__esModule","getDefault","getModuleExports","__webpack_require__.o","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","Utils","uint","decode","Utils.uint.decode","buf","arr","Uint8Array","num","length","encode","Utils.uint.encode","ArrayBuffer","acc","raw","Utils.raw.decode","str","String","fromCharCode","Utils.raw.encode","charCodeAt","b32","alphabet","Utils.b32.decode","bits","value","Utils.b32.encode","strUpp","toUpperCase","index","idx","indexOf","Error","hex","Utils.hex.decode","hexByte","toString","Utils.hex.encode","parseInt","substr","constructor","Secret","size","buffer","__WEBPACK_IMPORTED_MODULE_1__Crypto_js__","randomBytes","__WEBPACK_IMPORTED_MODULE_0__Utils_js__","fromRaw","fromB32","fromHex","TOTP","issuer","label","secret","__WEBPACK_IMPORTED_MODULE_2__Secret_js__","algorithm","digits","period","HOTP","counter","__WEBPACK_IMPORTED_MODULE_3__URI_js__","generate","pad","digest","hmacDigest","offset","byteLength","binary","Math","pow","Array","join","validate","window","searchToken","token","generatedToken","stringify","timestamp","Date","now","floor","global","__WEBPACK_IMPORTED_MODULE_0_sjcl__","__WEBPACK_IMPORTED_MODULE_0_sjcl___default","Crypto","nodeCrypto","eval","bufferFrom","Buffer","from","arrbuf","nodeBuf","bufferTo","Crypto.randomBytes","Crypto.hmacDigest","key","message","createHmac","update","crypto","getRandomValues","msCrypto","console","warn","random","hash","a","toLowerCase","hmac","misc","codec","arrayBuffer","toBits","fromBits","URI","__WEBPACK_IMPORTED_MODULE_1__Secret_js__","__WEBPACK_IMPORTED_MODULE_2__OTP_js__","OTPURI_REGEX","SECRET_REGEX","ALGORITHM_REGEX","INTEGER_REGEX","POSITIVE_INTEGER_REGEX","parse","uri","uriGroups","decodeURIComponent","match","uriType","uriLabel","split","uriParams","reduce","cur","pairArr","pairKey","pairVal","config","OTP","test","otp","legacyIssuer","encodeURI","__WEBPACK_IMPORTED_MODULE_0__OTP_js__","__WEBPACK_IMPORTED_MODULE_1__URI_js__","__WEBPACK_IMPORTED_MODULE_3__Utils_js__","g","Function","e","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","sjcl","cipher","keyexchange","mode","exception","corrupt","this.toString","invalid","bug","notReady","bitSlice","bstart","bend","bitArray","_shiftRight","slice","undefined","clamp","extract","blength","sh","x","concat","a1","a2","last","shift","getPartial","bitLength","len","ceil","partial","_end","round","equal","b","carry","out","push","shift2","last2","pop","_xor4","y","byteswapM","v","globals","globals.ArrayBuffer","DataView","globals.DataView","padding","padding_count","ol","tmp","setUint32","smallest","setUint8","getUint8","inView","getUint32","hexDumpBuffer","stringBufferView","string","getUint16","width","log","sha1","sjcl.hash.sha1","_h","_buffer","_length","reset","sjcl.hash.sha1.hash","data","finalize","blockSize","_init","utf8String","nl","Uint32Array","j","_block","subarray","splice","h","_key","_f","t","_S","words","w","sha256","sjcl.hash.sha256","_precompute","sjcl.hash.sha256.hash","frac","prime","factor","isPrime","k","h0","h1","h2","h3","h4","h5","h6","h7","sha512","sjcl.hash.sha512","sjcl.hash.sha512.hash","_initr","_keyr","frac2","h0h","h0l","h1h","h1l","h2h","h2l","h3h","h3l","h4h","h4l","h5h","h5l","h6h","h6l","h7h","h7l","ah","al","bh","bl","ch","cl","dh","dl","eh","el","fh","fl","gh","gl","hh","hl","wrh","wrl","gamma0xh","gamma0xl","gamma0h","gamma0l","gamma1xh","gamma1xl","gamma1h","gamma1l","wr7h","wr16h","wr16l","wr7l","chh","chl","majh","majl","sigma0h","sigma0l","krh","krl","t1l","t1h","t2l","t2h","sjcl.misc.hmac","Hash","_hash","exKey","bs","_baseHash","_resultHash","encrypt","mac","sjcl.misc.hmac.prototype.mac","_updated","sjcl.misc.hmac.prototype.reset","sjcl.misc.hmac.prototype.update","sjcl.misc.hmac.prototype.digest","result","apply","factory","define","amd","root"],"mappings":"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","file":"otpauth.min.js","sourcesContent":["null\n\n\n// WEBPACK FOOTER //\n//  [synthetic:base] ","null\n\n\n// WEBPACK FOOTER //\n//  [synthetic:util/global] ","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"OTPAuth\"] = factory();\n\telse\n\t\troot[\"OTPAuth\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"OTPAuth\"] = factory();\n\telse\n\t\troot[\"OTPAuth\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 5);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * An object containing some utilities.\n * @type {Object}\n *\n * @property {function(buf: ArrayBuffer): number} uint.decode\n *   Converts an ArrayBuffer to an integer.\n * @property {function(num: number): ArrayBuffer} uint.encode\n *   Converts an integer to an ArrayBuffer.\n *\n * @property {function(buf: ArrayBuffer): string} raw.decode\n *   Converts an ArrayBuffer to a string.\n * @property {function(str: string): ArrayBuffer} raw.encode\n *   Converts a string to an ArrayBuffer.\n *\n * @property {function(buf: ArrayBuffer): string} b32.decode\n *   Converts an ArrayBuffer to a base32 string (RFC 4648).\n * @property {function(str: string): ArrayBuffer} b32.encode\n *   Converts a base32 string to an ArrayBuffer (RFC 4648).\n *\n * @property {function(buf: ArrayBuffer): string} hex.decode\n *   Converts an ArrayBuffer to a hexadecimal string.\n * @property {function(str: string): ArrayBuffer} hex.encode\n *   Converts a hexadecimal string to an ArrayBuffer.\n */\nconst Utils = {\n\t'uint': {}, 'raw': {}, 'b32': {}, 'hex': {}\n};\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = Utils;\n\n\nUtils.uint.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\tlet num = 0;\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] === 0) continue;\n\t\tnum *= 256;\n\t\tnum += arr[i];\n\t}\n\n\treturn num;\n};\n\nUtils.uint.encode = function (num) {\n\tconst buf = new ArrayBuffer(8);\n\tconst arr = new Uint8Array(buf);\n\tlet acc = num;\n\n\tfor (let i = 7; i >= 0; i--) {\n\t\tif (acc === 0) break;\n\t\tarr[i] = acc & 255;\n\t\tacc -= arr[i];\n\t\tacc /= 256;\n\t}\n\n\treturn buf;\n};\n\nUtils.raw.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\tlet str = '';\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tstr += String.fromCharCode(arr[i]);\n\t}\n\n\treturn str;\n};\n\nUtils.raw.encode = function (str) {\n\tconst buf = new ArrayBuffer(str.length);\n\tconst arr = new Uint8Array(buf);\n\n\tfor (let i = 0; i < str.length; i++) {\n\t\tarr[i] = str.charCodeAt(i);\n\t}\n\n\treturn buf;\n};\n\n// RFC 4648 base32 alphabet without pad\nUtils.b32.alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\n\n// Based on github.com/LinusU/base32-decode\nUtils.b32.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\n\tlet bits = 0;\n\tlet value = 0;\n\tlet str = '';\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tvalue = value << 8 | arr[i];\n\t\tbits += 8;\n\n\t\twhile (bits >= 5) {\n\t\t\tstr += Utils.b32.alphabet[value >>> bits - 5 & 31];\n\t\t\tbits -= 5;\n\t\t}\n\t}\n\n\tif (bits > 0) {\n\t\tstr += Utils.b32.alphabet[value << 5 - bits & 31];\n\t}\n\n\treturn str;\n};\n\n// Based on github.com/LinusU/base32-encode\nUtils.b32.encode = function (str) {\n\tconst strUpp = str.toUpperCase();\n\tconst buf = new ArrayBuffer(str.length * 5 / 8 | 0);\n\tconst arr = new Uint8Array(buf);\n\n\tlet bits = 0;\n\tlet value = 0;\n\tlet index = 0;\n\n\tfor (let i = 0; i < strUpp.length; i++) {\n\t\tlet idx = Utils.b32.alphabet.indexOf(strUpp[i]);\n\n\t\tif (idx === -1) {\n\t\t\tthrow new Error('Invalid character found: ' + strUpp[i]);\n\t\t}\n\n\t\tvalue = value << 5 | idx;\n\t\tbits += 5;\n\n\t\tif (bits >= 8) {\n\t\t\tarr[index++] = value >>> bits - 8 & 255;\n\t\t\tbits -= 8;\n\t\t}\n\t}\n\n\treturn buf;\n};\n\nUtils.hex.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\tlet str = '';\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tconst hexByte = arr[i].toString(16);\n\n\t\tstr += hexByte.length === 1\n\t\t\t? '0' + hexByte\n\t\t\t: hexByte;\n\t}\n\n\treturn str.toUpperCase();\n};\n\nUtils.hex.encode = function (str) {\n\tconst buf = new ArrayBuffer(str.length / 2);\n\tconst arr = new Uint8Array(buf);\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tarr[i] = parseInt(str.substr(i * 2, 2), 16);\n\t}\n\n\treturn buf;\n};\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_js__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Crypto_js__ = __webpack_require__(3);\n\n\n\n\n\n/**\n * @class Secret\n */\nclass Secret {\n\t/**\n\t * Secret key object.\n\t * @param {Object} [config] Configuration options.\n\t * @param {ArrayBuffer} [config.buffer=random] Secret key, randomly generated by default.\n\t * @param {number} [config.size=20] Number of bytes to generate, ignored if 'buffer' is provided.\n\t */\n\tconstructor ({buffer, size = 20} = {}) {\n\t\t/** @type {ArrayBuffer} */\n\t\tthis.buffer = typeof buffer === 'undefined'\n\t\t\t? this.buffer = __WEBPACK_IMPORTED_MODULE_1__Crypto_js__[\"a\" /* Crypto */].randomBytes(size).buffer\n\t\t\t: buffer;\n\t}\n\n\t/**\n\t * Converts a raw string to a Secret object.\n\t * @method fromRaw\n\t * @param {string} str Raw string.\n\t * @returns {Secret} Secret object.\n\t */\n\tstatic fromRaw (str) {\n\t\treturn new this({'buffer': __WEBPACK_IMPORTED_MODULE_0__Utils_js__[\"a\" /* Utils */].raw.encode(str)});\n\t}\n\n\t/**\n\t * Converts a base32 string to a Secret object.\n\t * @method fromB32\n\t * @param {string} str Base32 string.\n\t * @returns {Secret} Secret object.\n\t */\n\tstatic fromB32 (str) {\n\t\treturn new this({'buffer': __WEBPACK_IMPORTED_MODULE_0__Utils_js__[\"a\" /* Utils */].b32.encode(str)});\n\t}\n\n\t/**\n\t * Converts a hexadecimal string to a Secret object.\n\t * @method fromHex\n\t * @param {string} str Hexadecimal string.\n\t * @returns {Secret} Secret object.\n\t */\n\tstatic fromHex (str) {\n\t\treturn new this({'buffer': __WEBPACK_IMPORTED_MODULE_0__Utils_js__[\"a\" /* Utils */].hex.encode(str)});\n\t}\n\n\t/** @type {string} */\n\tget raw () {\n\t\tObject.defineProperty(this, 'raw', {\n\t\t\t'enumerable': true,\n\t\t\t'configurable': true,\n\t\t\t'writable': true,\n\t\t\t'value': __WEBPACK_IMPORTED_MODULE_0__Utils_js__[\"a\" /* Utils */].raw.decode(this.buffer)\n\t\t});\n\n\t\treturn this.raw;\n\t}\n\n\t/** @type {string} */\n\tget b32 () {\n\t\tObject.defineProperty(this, 'b32', {\n\t\t\t'enumerable': true,\n\t\t\t'configurable': true,\n\t\t\t'writable': true,\n\t\t\t'value': __WEBPACK_IMPORTED_MODULE_0__Utils_js__[\"a\" /* Utils */].b32.decode(this.buffer)\n\t\t});\n\n\t\treturn this.b32;\n\t}\n\n\t/** @type {string} */\n\tget hex () {\n\t\tObject.defineProperty(this, 'hex', {\n\t\t\t'enumerable': true,\n\t\t\t'configurable': true,\n\t\t\t'writable': true,\n\t\t\t'value': __WEBPACK_IMPORTED_MODULE_0__Utils_js__[\"a\" /* Utils */].hex.decode(this.buffer)\n\t\t});\n\n\t\treturn this.hex;\n\t}\n}\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = Secret;\n\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_js__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Crypto_js__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Secret_js__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__URI_js__ = __webpack_require__(4);\n\n\n\n\n\n\n\n/**\n * Default Configuration.\n * @private\n */\nconst DC = {\n\t'issuer': '',\n\t'label': 'OTPAuth',\n\t'algorithm': 'SHA1',\n\t'digits': 6,\n\t'counter': 0,\n\t'period': 30,\n\t'window': 50,\n\t'pad': true\n};\n\n/**\n * @class HOTP\n */\nclass HOTP {\n\t/**\n\t * HOTP: An HMAC-based One-time Password Algorithm (RFC 4226)\n\t * @see https://tools.ietf.org/html/rfc4226\n\t * @param {Object} [config] Configuration options.\n\t * @param {string} [config.issuer] Account provider.\n\t * @param {string} [config.label=OTPAuth] Account label.\n\t * @param {Secret} [config.secret=Secret] Secret key.\n\t * @param {string} [config.algorithm=SHA1] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.counter=0] Initial counter value.\n\t */\n\tconstructor ({issuer = DC.issuer, label = DC.label, secret = new __WEBPACK_IMPORTED_MODULE_2__Secret_js__[\"a\" /* Secret */](), algorithm = DC.algorithm, digits = DC.digits, counter = DC.counter} = {}) {\n\t\t/** @type {string} */\n\t\tthis.issuer = issuer;\n\t\t/** @type {string} */\n\t\tthis.label = label;\n\t\t/** @type {string} */\n\t\tthis.algorithm = algorithm;\n\t\t/** @type {Secret} */\n\t\tthis.secret = secret;\n\t\t/** @type {number} */\n\t\tthis.digits = digits;\n\t\t/** @type {number} */\n\t\tthis.counter = counter;\n\t}\n\n\t/**\n\t * Generates an HOTP token.\n\t * @method generate\n\t * @param {Object} config Configuration options.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm=SHA1] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.counter=0] Counter value.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tstatic generate ({secret, algorithm = DC.algorithm, digits = DC.digits, counter = DC.counter, pad = DC.pad}) {\n\t\tconst digest = new Uint8Array(__WEBPACK_IMPORTED_MODULE_1__Crypto_js__[\"a\" /* Crypto */].hmacDigest(algorithm, secret.buffer, __WEBPACK_IMPORTED_MODULE_0__Utils_js__[\"a\" /* Utils */].uint.encode(counter)));\n\n\t\tconst offset = digest[digest.byteLength - 1] & 15;\n\t\tconst binary = (\n\t\t\t(digest[offset] & 127) << 24 |\n\t\t\t(digest[offset + 1] & 255) << 16 |\n\t\t\t(digest[offset + 2] & 255) << 8 |\n\t\t\t(digest[offset + 3] & 255)\n\t\t) % Math.pow(10, digits);\n\n\t\treturn pad\n\t\t\t// ? '0'.repeat(digits - String(binary).length) + binary\n\t\t\t? Array(1 + digits - String(binary).length).join('0') + binary\n\t\t\t: binary;\n\t}\n\n\t/**\n\t * Generates an HOTP token.\n\t * @method generate\n\t * @param {Object} [config] Configuration options.\n\t * @param {number} [config.counter=this.counter++] Counter value.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tgenerate ({counter = this.counter++, pad} = {}) {\n\t\treturn HOTP.generate({\n\t\t\t'secret': this.secret,\n\t\t\t'algorithm': this.algorithm,\n\t\t\t'digits': this.digits,\n\t\t\t'counter': counter,\n\t\t\t'pad': pad\n\t\t});\n\t}\n\n\t/**\n\t * Validates an HOTP token.\n\t * @method validate\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm=SHA1] HMAC hashing algorithm.\n\t * @param {number} [config.counter=0] Counter value.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tstatic validate ({token, secret, algorithm, counter = DC.counter, window = DC.window}) {\n\t\tconst searchToken = parseInt(token, 10);\n\n\t\tfor (let i = counter - window; i <= counter + window; ++i) {\n\t\t\tconst generatedToken = HOTP.generate({\n\t\t\t\t'secret': secret,\n\t\t\t\t'algorithm': algorithm,\n\t\t\t\t'counter': i,\n\t\t\t\t'digits': token.length,\n\t\t\t\t'pad': false\n\t\t\t});\n\n\t\t\tif (searchToken === generatedToken) {\n\t\t\t\treturn i - counter;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Validates an HOTP token.\n\t * @method validate\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {number} [config.counter=this.counter] Counter value.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tvalidate ({token, counter = this.counter, window}) {\n\t\treturn HOTP.validate({\n\t\t\t'token': token,\n\t\t\t'secret': this.secret,\n\t\t\t'algorithm': this.algorithm,\n\t\t\t'counter': counter,\n\t\t\t'window': window\n\t\t});\n\t}\n\n\t/**\n\t * Returns a Google Authenticator key URI.\n\t * @method toString\n\t * @returns {string} URI.\n\t */\n\ttoString () {\n\t\treturn __WEBPACK_IMPORTED_MODULE_3__URI_js__[\"a\" /* URI */].stringify(this);\n\t}\n}\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = HOTP;\n\n\n/**\n * @class TOTP\n */\nclass TOTP {\n\t/**\n\t * TOTP: Time-Based One-Time Password Algorithm (RFC 6238).\n\t * @see https://tools.ietf.org/html/rfc6238\n\t * @param {Object} [config] Configuration options.\n\t * @param {string} [config.issuer] Account provider.\n\t * @param {string} [config.label=OTPAuth] Account label.\n\t * @param {Secret} [config.secret=Secret] Secret key.\n\t * @param {string} [config.algorithm=SHA1] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.period=30] Token time-step duration.\n\t */\n\tconstructor ({issuer = DC.issuer, label = DC.label, secret = new __WEBPACK_IMPORTED_MODULE_2__Secret_js__[\"a\" /* Secret */](), algorithm = DC.algorithm, digits = DC.digits, period = DC.period} = {}) {\n\t\t/** @type {string} */\n\t\tthis.issuer = issuer;\n\t\t/** @type {string} */\n\t\tthis.label = label;\n\t\t/** @type {string} */\n\t\tthis.secret = secret;\n\t\t/** @type {Secret} */\n\t\tthis.algorithm = algorithm;\n\t\t/** @type {number} */\n\t\tthis.digits = digits;\n\t\t/** @type {number} */\n\t\tthis.period = period;\n\t}\n\n\t/**\n\t * Generates a TOTP token.\n\t * @method generate\n\t * @param {Object} config Configuration options.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm=SHA1] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.period=30] Token time-step duration.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tstatic generate ({secret, algorithm, digits, period = DC.period, timestamp = Date.now(), pad}) {\n\t\treturn HOTP.generate({\n\t\t\t'secret': secret,\n\t\t\t'algorithm': algorithm,\n\t\t\t'digits': digits,\n\t\t\t'counter': Math.floor(timestamp / 1000 / period),\n\t\t\t'pad': pad\n\t\t});\n\t}\n\n\t/**\n\t * Generates a TOTP token.\n\t * @method generate\n\t * @param {Object} [config] Configuration options.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tgenerate ({timestamp = Date.now(), pad} = {}) {\n\t\treturn TOTP.generate({\n\t\t\t'secret': this.secret,\n\t\t\t'algorithm': this.algorithm,\n\t\t\t'digits': this.digits,\n\t\t\t'period': this.period,\n\t\t\t'timestamp': timestamp,\n\t\t\t'pad': pad\n\t\t});\n\t}\n\n\t/**\n\t * Validates a TOTP token.\n\t * @method validate\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm=SHA1] HMAC hashing algorithm.\n\t * @param {number} [config.period=30] Token time-step duration.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tstatic validate ({token, secret, algorithm, period = DC.period, timestamp = Date.now(), window}) {\n\t\treturn HOTP.validate({\n\t\t\t'token': token,\n\t\t\t'secret': secret,\n\t\t\t'algorithm': algorithm,\n\t\t\t'counter': Math.floor(timestamp / 1000 / period),\n\t\t\t'window': window\n\t\t});\n\t}\n\n\t/**\n\t * Validates a TOTP token.\n\t * @method validate\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tvalidate ({token, timestamp, window}) {\n\t\treturn TOTP.validate({\n\t\t\t'token': token,\n\t\t\t'secret': this.secret,\n\t\t\t'algorithm': this.algorithm,\n\t\t\t'period': this.period,\n\t\t\t'timestamp': timestamp,\n\t\t\t'window': window\n\t\t});\n\t}\n\n\t/**\n\t * Returns a Google Authenticator key URI.\n\t * @method toString\n\t * @returns {string} URI.\n\t */\n\ttoString () {\n\t\treturn __WEBPACK_IMPORTED_MODULE_3__URI_js__[\"a\" /* URI */].stringify(this);\n\t}\n}\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = TOTP;\n\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_sjcl__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_sjcl___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_sjcl__);\n\n\n/**\n * An object containing some cryptography functions\n * with dirty workarounds for Node.js and browsers.\n * @private\n */\nconst Crypto = {};\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = Crypto;\n\n\nlet nodeCrypto;\n\nif (typeof window === 'undefined' &&\n\ttypeof module !== 'undefined'\n) {\n\t// Dynamically require 'crypto' module to prevent issues with Webpack\n\t// eslint-disable-next-line no-eval\n\tnodeCrypto = eval('require')('crypto');\n}\n\nif (typeof nodeCrypto !== 'undefined') {\n\tlet bufferFrom;\n\n\tif (typeof Buffer.from === 'function') {\n\t\tbufferFrom = Buffer.from;\n\t} else {\n\t\t// Node.js < 5.10.0\n\t\tbufferFrom = function (arrbuf) {\n\t\t\t// eslint-disable-next-line node/no-deprecated-api\n\t\t\tconst nodeBuf = new Buffer(arrbuf.byteLength);\n\t\t\tconst arr = new Uint8Array(arrbuf);\n\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tnodeBuf[i] = arr[i];\n\t\t\t}\n\n\t\t\treturn nodeBuf;\n\t\t};\n\t}\n\n\tlet bufferTo;\n\n\tif (Buffer.prototype instanceof Uint8Array) {\n\t\tbufferTo = function (nodeBuf) {\n\t\t\treturn nodeBuf;\n\t\t};\n\t} else {\n\t\t// Node.js < 4.0.0\n\t\tbufferTo = function (nodeBuf) {\n\t\t\tconst arr = new Uint8Array(nodeBuf.length);\n\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = nodeBuf[i];\n\t\t\t}\n\n\t\t\treturn arr;\n\t\t};\n\t}\n\n\tCrypto.randomBytes = function (size) {\n\t\treturn bufferTo(nodeCrypto.randomBytes(size));\n\t};\n\n\t// In Node.js, the command:\n\t//   $ openssl list-message-digest-algorithms\n\t// displays the available digest algorithms.\n\tCrypto.hmacDigest = function (algorithm, key, message) {\n\t\treturn bufferTo(\n\t\t\tnodeCrypto.createHmac(algorithm, bufferFrom(key))\n\t\t\t\t.update(bufferFrom(message))\n\t\t\t\t.digest()\n\t\t);\n\t};\n} else {\n\tlet getRandomValues;\n\n\tif (typeof global.crypto !== 'undefined' && typeof global.crypto.getRandomValues === 'function') {\n\t\tgetRandomValues = function (arr) {\n\t\t\tglobal.crypto.getRandomValues(arr);\n\t\t};\n\t} else if (typeof global.msCrypto !== 'undefined' && typeof global.msCrypto.getRandomValues === 'function') {\n\t\tgetRandomValues = function (arr) {\n\t\t\tglobal.msCrypto.getRandomValues(arr);\n\t\t};\n\t} else {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.warn('Cryptography API not available, falling back to \\'Math.random\\'...');\n\n\t\tgetRandomValues = function (arr) {\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = Math.floor(Math.random() * 256);\n\t\t\t}\n\t\t};\n\t}\n\n\tCrypto.randomBytes = function (size) {\n\t\tconst arr = new Uint8Array(size);\n\t\tgetRandomValues(arr);\n\n\t\treturn arr;\n\t};\n\n\tCrypto.hmacDigest = function (algorithm, key, message) {\n\t\tconst hash = __WEBPACK_IMPORTED_MODULE_0_sjcl___default.a.hash[algorithm.toLowerCase()];\n\n\t\tif (typeof hash === 'undefined') {\n\t\t\tthrow Error('Unknown hash function');\n\t\t}\n\n\t\t// eslint-disable-next-line new-cap\n\t\tconst hmac = new __WEBPACK_IMPORTED_MODULE_0_sjcl___default.a.misc.hmac(__WEBPACK_IMPORTED_MODULE_0_sjcl___default.a.codec.arrayBuffer.toBits(key), hash);\n\t\thmac.update(__WEBPACK_IMPORTED_MODULE_0_sjcl___default.a.codec.arrayBuffer.toBits(message));\n\n\t\treturn __WEBPACK_IMPORTED_MODULE_0_sjcl___default.a.codec.arrayBuffer.fromBits(hmac.digest(), false);\n\t};\n}\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(6)))\n\n/***/ }),\n/* 4 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_js__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Secret_js__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__OTP_js__ = __webpack_require__(2);\n\n\n\n\n\n\n/*\n * Google Authenticator key URI format:\n *   https://github.com/google/google-authenticator/wiki/Key-Uri-Format\n */\n\n// otpauth://TYPE/[ISSUER:]LABEL?PARAMETERS\nconst OTPURI_PARAMS = ['issuer', 'label', 'secret', 'algorithm', 'digits', 'counter', 'period'].join('|');\nconst OTPURI_REGEX = RegExp(`^otpauth:\\\\/\\\\/([ht]otp)\\\\/(.+)\\\\?((?:&?(?:${OTPURI_PARAMS})=[^&]+)+)$`, 'i');\n\n// RFC 4648 base32 alphabet without pad\nconst SECRET_REGEX = /^[2-7A-Z]+$/i;\n\n// Support all algorithms defined in the format spec\nconst ALGORITHM_REGEX = /^SHA(?:1|256|512)$/i;\n\n// Integer\nconst INTEGER_REGEX = /^[+-]?[0-9]+$/;\n\n// Positive integer, excluding 0\nconst POSITIVE_INTEGER_REGEX = /^\\+?[1-9][0-9]*$/;\n\n/**\n * @class URI\n */\nclass URI {\n\t/**\n\t * Parses a Google Authenticator key URI and returns an HOTP/TOTP object.\n\t * @method parse\n\t * @param {string} uri Google Authenticator Key URI.\n\t * @returns {Object} HOTP/TOTP object.\n\t */\n\tstatic parse (uri) {\n\t\tconst uriGroups = decodeURIComponent(uri).match(OTPURI_REGEX);\n\n\t\tif (uriGroups === null) {\n\t\t\tthrow Error('Invalid URI format');\n\t\t}\n\n\t\t// Extract URI groups\n\t\tconst uriType = uriGroups[1].toLowerCase();\n\t\tconst uriLabel = uriGroups[2].split(/:(.+)/, 2);\n\t\tconst uriParams = uriGroups[3].split('&').reduce(function (acc, cur) {\n\t\t\tconst pairArr = cur.split(/=(.+)/, 2);\n\t\t\tconst pairKey = pairArr[0].toLowerCase();\n\t\t\tconst pairVal = pairArr[1];\n\t\t\tconst pairAcc = acc;\n\n\t\t\tpairAcc[pairKey] = pairVal;\n\t\t\treturn pairAcc;\n\t\t}, {});\n\n\t\t// 'OTP' will be instantiated with 'config' argument\n\t\tlet OTP;\n\t\tlet config = {};\n\n\t\tif (uriType === 'hotp') {\n\t\t\tOTP = __WEBPACK_IMPORTED_MODULE_2__OTP_js__[\"a\" /* HOTP */];\n\n\t\t\t// counter: required\n\t\t\tif (typeof uriParams.counter !== 'undefined' && INTEGER_REGEX.test(uriParams.counter)) {\n\t\t\t\tconfig.counter = parseInt(uriParams.counter, 10);\n\t\t\t} else {\n\t\t\t\tthrow Error('Missing or invalid \\'counter\\' parameter');\n\t\t\t}\n\t\t} else if (uriType === 'totp') {\n\t\t\tOTP = __WEBPACK_IMPORTED_MODULE_2__OTP_js__[\"b\" /* TOTP */];\n\n\t\t\t// period: optional\n\t\t\tif (typeof uriParams.period !== 'undefined') {\n\t\t\t\tif (POSITIVE_INTEGER_REGEX.test(uriParams.period)) {\n\t\t\t\t\tconfig.period = parseInt(uriParams.period, 10);\n\t\t\t\t} else {\n\t\t\t\t\tthrow Error('Invalid \\'period\\' parameter');\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow Error('Unknown OTP type');\n\t\t}\n\n\t\t// label: required\n\t\t// issuer: optional\n\t\tif (uriLabel.length === 2) {\n\t\t\tconfig.label = uriLabel[1];\n\t\t\tif (typeof uriParams.issuer === 'undefined') {\n\t\t\t\tconfig.issuer = uriLabel[0];\n\t\t\t} else if (uriParams.issuer === uriLabel[0]) {\n\t\t\t\tconfig.issuer = uriParams.issuer;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid \\'issuer\\' parameter');\n\t\t\t}\n\t\t} else {\n\t\t\tconfig.label = uriLabel[0];\n\t\t\tif (typeof uriParams.issuer !== 'undefined') {\n\t\t\t\tconfig.issuer = uriParams.issuer;\n\t\t\t}\n\t\t}\n\n\t\t// secret: required\n\t\tif (typeof uriParams.secret !== 'undefined' && SECRET_REGEX.test(uriParams.secret)) {\n\t\t\tconfig.secret = new __WEBPACK_IMPORTED_MODULE_1__Secret_js__[\"a\" /* Secret */]({'buffer': __WEBPACK_IMPORTED_MODULE_0__Utils_js__[\"a\" /* Utils */].b32.encode(uriParams.secret)});\n\t\t} else {\n\t\t\tthrow Error('Missing or invalid \\'secret\\' parameter');\n\t\t}\n\n\t\t// algorithm: optional\n\t\tif (typeof uriParams.algorithm !== 'undefined') {\n\t\t\tif (ALGORITHM_REGEX.test(uriParams.algorithm)) {\n\t\t\t\tconfig.algorithm = uriParams.algorithm;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid \\'algorithm\\' parameter');\n\t\t\t}\n\t\t}\n\n\t\t// digits: optional\n\t\tif (typeof uriParams.digits !== 'undefined') {\n\t\t\tif (POSITIVE_INTEGER_REGEX.test(uriParams.digits)) {\n\t\t\t\tconfig.digits = parseInt(uriParams.digits, 10);\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid \\'digits\\' parameter');\n\t\t\t}\n\t\t}\n\n\t\treturn new OTP(config);\n\t}\n\n\t/**\n\t * Converts an HOTP/TOTP object to a Google Authenticator key URI.\n\t * @method stringify\n\t * @param {Object} otp HOTP/TOTP object.\n\t * @param {Object} [config] Configuration options.\n\t * @param {boolean} [config.legacyIssuer=true] Set issuer label prefix.\n\t * @returns {string} Google Authenticator Key URI.\n\t */\n\tstatic stringify (otp, {legacyIssuer = true} = {}) {\n\t\tif (!(otp instanceof __WEBPACK_IMPORTED_MODULE_2__OTP_js__[\"a\" /* HOTP */] || otp instanceof __WEBPACK_IMPORTED_MODULE_2__OTP_js__[\"b\" /* TOTP */])) {\n\t\t\tthrow Error('Invalid \\'HOTP/TOTP\\' object');\n\t\t}\n\n\t\t// Key URI format:\n\t\t// otpauth://TYPE/[ISSUER:]LABEL?PARAMETERS\n\t\tlet uri = 'otpauth://';\n\n\t\t// Type\n\t\turi += (otp instanceof __WEBPACK_IMPORTED_MODULE_2__OTP_js__[\"b\" /* TOTP */] ? 'totp' : 'hotp') + '/';\n\n\t\t// Label and optional issuer\n\t\tif (otp.issuer.length > 0) {\n\t\t\t// Issuer label prefix\n\t\t\tif (legacyIssuer) {\n\t\t\t\turi += `${otp.issuer}:`;\n\t\t\t}\n\n\t\t\turi += `${otp.label}?issuer=${otp.issuer}&`;\n\t\t} else {\n\t\t\t// No issuer\n\t\t\turi += `${otp.label}?`;\n\t\t}\n\n\t\t// Generic parameters\n\t\turi += `secret=${otp.secret.b32}` +\n\t\t\t`&algorithm=${otp.algorithm}` +\n\t\t\t`&digits=${otp.digits}`;\n\n\t\t// Extra parameters\n\t\tif (otp instanceof __WEBPACK_IMPORTED_MODULE_2__OTP_js__[\"b\" /* TOTP */]) {\n\t\t\t// TOTP parameters\n\t\t\turi += `&period=${otp.period}`;\n\t\t} else {\n\t\t\t// HOTP parameters\n\t\t\turi += `&counter=${otp.counter}`;\n\t\t}\n\n\t\treturn encodeURI(uri);\n\t}\n}\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = URI;\n\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__OTP_js__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__URI_js__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Secret_js__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Utils_js__ = __webpack_require__(0);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"HOTP\", function() { return __WEBPACK_IMPORTED_MODULE_0__OTP_js__[\"a\"]; });\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"TOTP\", function() { return __WEBPACK_IMPORTED_MODULE_0__OTP_js__[\"b\"]; });\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"URI\", function() { return __WEBPACK_IMPORTED_MODULE_1__URI_js__[\"a\"]; });\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"Secret\", function() { return __WEBPACK_IMPORTED_MODULE_2__Secret_js__[\"a\"]; });\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"Utils\", function() { return __WEBPACK_IMPORTED_MODULE_3__Utils_js__[\"a\"]; });\n\n\n\n\n\n\n\n/**\n * One Time Password (HOTP/TOTP) library for Node.js and browser.\n * @author Héctor Molinero Fernández <hector@molinero.xyz>\n */\n\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/** @fileOverview Javascript cryptography implementation.\n *\n * Crush to remove comments, shorten variable names and\n * generally reduce transmission size.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n\n/*jslint indent: 2, bitwise: false, nomen: false, plusplus: false, white: false, regexp: false */\n/*global document, window, escape, unescape, module, require, Uint32Array */\n\n/**\n * The Stanford Javascript Crypto Library, top-level namespace.\n * @namespace\n */\nvar sjcl = {\n  /**\n   * Symmetric ciphers.\n   * @namespace\n   */\n  cipher: {},\n\n  /**\n   * Hash functions.  Right now only SHA256 is implemented.\n   * @namespace\n   */\n  hash: {},\n\n  /**\n   * Key exchange functions.  Right now only SRP is implemented.\n   * @namespace\n   */\n  keyexchange: {},\n  \n  /**\n   * Cipher modes of operation.\n   * @namespace\n   */\n  mode: {},\n\n  /**\n   * Miscellaneous.  HMAC and PBKDF2.\n   * @namespace\n   */\n  misc: {},\n  \n  /**\n   * Bit array encoders and decoders.\n   * @namespace\n   *\n   * @description\n   * The members of this namespace are functions which translate between\n   * SJCL's bitArrays and other objects (usually strings).  Because it\n   * isn't always clear which direction is encoding and which is decoding,\n   * the method names are \"fromBits\" and \"toBits\".\n   */\n  codec: {},\n  \n  /**\n   * Exceptions.\n   * @namespace\n   */\n  exception: {\n    /**\n     * Ciphertext is corrupt.\n     * @constructor\n     */\n    corrupt: function(message) {\n      this.toString = function() { return \"CORRUPT: \"+this.message; };\n      this.message = message;\n    },\n    \n    /**\n     * Invalid parameter.\n     * @constructor\n     */\n    invalid: function(message) {\n      this.toString = function() { return \"INVALID: \"+this.message; };\n      this.message = message;\n    },\n    \n    /**\n     * Bug or missing feature in SJCL.\n     * @constructor\n     */\n    bug: function(message) {\n      this.toString = function() { return \"BUG: \"+this.message; };\n      this.message = message;\n    },\n\n    /**\n     * Something isn't ready.\n     * @constructor\n     */\n    notReady: function(message) {\n      this.toString = function() { return \"NOT READY: \"+this.message; };\n      this.message = message;\n    }\n  }\n};\n/** @fileOverview Arrays of bits, encoded as arrays of Numbers.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Arrays of bits, encoded as arrays of Numbers.\n * @namespace\n * @description\n * <p>\n * These objects are the currency accepted by SJCL's crypto functions.\n * </p>\n *\n * <p>\n * Most of our crypto primitives operate on arrays of 4-byte words internally,\n * but many of them can take arguments that are not a multiple of 4 bytes.\n * This library encodes arrays of bits (whose size need not be a multiple of 8\n * bits) as arrays of 32-bit words.  The bits are packed, big-endian, into an\n * array of words, 32 bits at a time.  Since the words are double-precision\n * floating point numbers, they fit some extra data.  We use this (in a private,\n * possibly-changing manner) to encode the number of bits actually  present\n * in the last word of the array.\n * </p>\n *\n * <p>\n * Because bitwise ops clear this out-of-band data, these arrays can be passed\n * to ciphers like AES which want arrays of words.\n * </p>\n */\nsjcl.bitArray = {\n  /**\n   * Array slices in units of bits.\n   * @param {bitArray} a The array to slice.\n   * @param {Number} bstart The offset to the start of the slice, in bits.\n   * @param {Number} bend The offset to the end of the slice, in bits.  If this is undefined,\n   * slice until the end of the array.\n   * @return {bitArray} The requested slice.\n   */\n  bitSlice: function (a, bstart, bend) {\n    a = sjcl.bitArray._shiftRight(a.slice(bstart/32), 32 - (bstart & 31)).slice(1);\n    return (bend === undefined) ? a : sjcl.bitArray.clamp(a, bend-bstart);\n  },\n\n  /**\n   * Extract a number packed into a bit array.\n   * @param {bitArray} a The array to slice.\n   * @param {Number} bstart The offset to the start of the slice, in bits.\n   * @param {Number} blength The length of the number to extract.\n   * @return {Number} The requested slice.\n   */\n  extract: function(a, bstart, blength) {\n    // FIXME: this Math.floor is not necessary at all, but for some reason\n    // seems to suppress a bug in the Chromium JIT.\n    var x, sh = Math.floor((-bstart-blength) & 31);\n    if ((bstart + blength - 1 ^ bstart) & -32) {\n      // it crosses a boundary\n      x = (a[bstart/32|0] << (32 - sh)) ^ (a[bstart/32+1|0] >>> sh);\n    } else {\n      // within a single word\n      x = a[bstart/32|0] >>> sh;\n    }\n    return x & ((1<<blength) - 1);\n  },\n\n  /**\n   * Concatenate two bit arrays.\n   * @param {bitArray} a1 The first array.\n   * @param {bitArray} a2 The second array.\n   * @return {bitArray} The concatenation of a1 and a2.\n   */\n  concat: function (a1, a2) {\n    if (a1.length === 0 || a2.length === 0) {\n      return a1.concat(a2);\n    }\n    \n    var last = a1[a1.length-1], shift = sjcl.bitArray.getPartial(last);\n    if (shift === 32) {\n      return a1.concat(a2);\n    } else {\n      return sjcl.bitArray._shiftRight(a2, shift, last|0, a1.slice(0,a1.length-1));\n    }\n  },\n\n  /**\n   * Find the length of an array of bits.\n   * @param {bitArray} a The array.\n   * @return {Number} The length of a, in bits.\n   */\n  bitLength: function (a) {\n    var l = a.length, x;\n    if (l === 0) { return 0; }\n    x = a[l - 1];\n    return (l-1) * 32 + sjcl.bitArray.getPartial(x);\n  },\n\n  /**\n   * Truncate an array.\n   * @param {bitArray} a The array.\n   * @param {Number} len The length to truncate to, in bits.\n   * @return {bitArray} A new array, truncated to len bits.\n   */\n  clamp: function (a, len) {\n    if (a.length * 32 < len) { return a; }\n    a = a.slice(0, Math.ceil(len / 32));\n    var l = a.length;\n    len = len & 31;\n    if (l > 0 && len) {\n      a[l-1] = sjcl.bitArray.partial(len, a[l-1] & 0x80000000 >> (len-1), 1);\n    }\n    return a;\n  },\n\n  /**\n   * Make a partial word for a bit array.\n   * @param {Number} len The number of bits in the word.\n   * @param {Number} x The bits.\n   * @param {Number} [_end=0] Pass 1 if x has already been shifted to the high side.\n   * @return {Number} The partial word.\n   */\n  partial: function (len, x, _end) {\n    if (len === 32) { return x; }\n    return (_end ? x|0 : x << (32-len)) + len * 0x10000000000;\n  },\n\n  /**\n   * Get the number of bits used by a partial word.\n   * @param {Number} x The partial word.\n   * @return {Number} The number of bits used by the partial word.\n   */\n  getPartial: function (x) {\n    return Math.round(x/0x10000000000) || 32;\n  },\n\n  /**\n   * Compare two arrays for equality in a predictable amount of time.\n   * @param {bitArray} a The first array.\n   * @param {bitArray} b The second array.\n   * @return {boolean} true if a == b; false otherwise.\n   */\n  equal: function (a, b) {\n    if (sjcl.bitArray.bitLength(a) !== sjcl.bitArray.bitLength(b)) {\n      return false;\n    }\n    var x = 0, i;\n    for (i=0; i<a.length; i++) {\n      x |= a[i]^b[i];\n    }\n    return (x === 0);\n  },\n\n  /** Shift an array right.\n   * @param {bitArray} a The array to shift.\n   * @param {Number} shift The number of bits to shift.\n   * @param {Number} [carry=0] A byte to carry in\n   * @param {bitArray} [out=[]] An array to prepend to the output.\n   * @private\n   */\n  _shiftRight: function (a, shift, carry, out) {\n    var i, last2=0, shift2;\n    if (out === undefined) { out = []; }\n    \n    for (; shift >= 32; shift -= 32) {\n      out.push(carry);\n      carry = 0;\n    }\n    if (shift === 0) {\n      return out.concat(a);\n    }\n    \n    for (i=0; i<a.length; i++) {\n      out.push(carry | a[i]>>>shift);\n      carry = a[i] << (32-shift);\n    }\n    last2 = a.length ? a[a.length-1] : 0;\n    shift2 = sjcl.bitArray.getPartial(last2);\n    out.push(sjcl.bitArray.partial(shift+shift2 & 31, (shift + shift2 > 32) ? carry : out.pop(),1));\n    return out;\n  },\n  \n  /** xor a block of 4 words together.\n   * @private\n   */\n  _xor4: function(x,y) {\n    return [x[0]^y[0],x[1]^y[1],x[2]^y[2],x[3]^y[3]];\n  },\n\n  /** byteswap a word array inplace.\n   * (does not handle partial words)\n   * @param {sjcl.bitArray} a word array\n   * @return {sjcl.bitArray} byteswapped array\n   */\n  byteswapM: function(a) {\n    var i, v, m = 0xff00;\n    for (i = 0; i < a.length; ++i) {\n      v = a[i];\n      a[i] = (v >>> 24) | ((v >>> 8) & m) | ((v & m) << 8) | (v << 24);\n    }\n    return a;\n  }\n};\n/** @fileOverview Bit array codec implementations.\n *\n * @author Marco Munizaga\n */\n\n//patch arraybuffers if they don't exist\nif (typeof(ArrayBuffer) === 'undefined') {\n  (function(globals){\n      \"use strict\";\n      globals.ArrayBuffer = function(){};\n      globals.DataView = function(){};\n  }(this));\n}\n\n/**\n * ArrayBuffer\n * @namespace\n */\nsjcl.codec.arrayBuffer = {\n  /** Convert from a bitArray to an ArrayBuffer. \n   * Will default to 8byte padding if padding is undefined*/\n  fromBits: function (arr, padding, padding_count) {\n    var out, i, ol, tmp, smallest;\n    padding = padding==undefined  ? true : padding;\n    padding_count = padding_count || 8;\n\n    if (arr.length === 0) {\n      return new ArrayBuffer(0);\n    }\n\n    ol = sjcl.bitArray.bitLength(arr)/8;\n\n    //check to make sure the bitLength is divisible by 8, if it isn't \n    //we can't do anything since arraybuffers work with bytes, not bits\n    if ( sjcl.bitArray.bitLength(arr)%8 !== 0 ) {\n      throw new sjcl.exception.invalid(\"Invalid bit size, must be divisble by 8 to fit in an arraybuffer correctly\");\n    }\n\n    if (padding && ol%padding_count !== 0){\n      ol += padding_count - (ol%padding_count);\n    }\n\n\n    //padded temp for easy copying\n    tmp = new DataView(new ArrayBuffer(arr.length*4));\n    for (i=0; i<arr.length; i++) {\n      tmp.setUint32(i*4, (arr[i]<<32)); //get rid of the higher bits\n    }\n\n    //now copy the final message if we are not going to 0 pad\n    out = new DataView(new ArrayBuffer(ol));\n\n    //save a step when the tmp and out bytelength are ===\n    if (out.byteLength === tmp.byteLength){\n      return tmp.buffer;\n    }\n\n    smallest = tmp.byteLength < out.byteLength ? tmp.byteLength : out.byteLength;\n    for(i=0; i<smallest; i++){\n      out.setUint8(i,tmp.getUint8(i));\n    }\n\n\n    return out.buffer;\n  },\n\n  toBits: function (buffer) {\n    var i, out=[], len, inView, tmp;\n\n    if (buffer.byteLength === 0) {\n      return [];\n    }\n\n    inView = new DataView(buffer);\n    len = inView.byteLength - inView.byteLength%4;\n\n    for (var i = 0; i < len; i+=4) {\n      out.push(inView.getUint32(i));\n    }\n\n    if (inView.byteLength%4 != 0) {\n      tmp = new DataView(new ArrayBuffer(4));\n      for (var i = 0, l = inView.byteLength%4; i < l; i++) {\n        //we want the data to the right, because partial slices off the starting bits\n        tmp.setUint8(i+4-l, inView.getUint8(len+i)); // big-endian, \n      }\n      out.push(\n        sjcl.bitArray.partial( (inView.byteLength%4)*8, tmp.getUint32(0) )\n      ); \n    }\n    return out;\n  },\n\n\n\n  /** Prints a hex output of the buffer contents, akin to hexdump **/\n  hexDumpBuffer: function(buffer){\n      var stringBufferView = new DataView(buffer);\n      var string = '';\n      var pad = function (n, width) {\n          n = n + '';\n          return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n;\n      };\n\n      for (var i = 0; i < stringBufferView.byteLength; i+=2) {\n          if (i%16 == 0) string += ('\\n'+(i).toString(16)+'\\t');\n          string += ( pad(stringBufferView.getUint16(i).toString(16),4) + ' ');\n      }\n\n      if ( typeof console === undefined ){\n        console = console || {log:function(){}}; //fix for IE\n      }\n      console.log(string.toUpperCase());\n  }\n};\n\n/** @fileOverview Javascript SHA-1 implementation.\n *\n * Based on the implementation in RFC 3174, method 1, and on the SJCL\n * SHA-256 implementation.\n *\n * @author Quinn Slack\n */\n\n/**\n * Context for a SHA-1 operation in progress.\n * @constructor\n */\nsjcl.hash.sha1 = function (hash) {\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 5 big-endian words.\n */\nsjcl.hash.sha1.hash = function (data) {\n  return (new sjcl.hash.sha1()).update(data).finalize();\n};\n\nsjcl.hash.sha1.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 512,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n\tvar c = new Uint32Array(b);\n    \tvar j = 0;\n    \tfor (i = this.blockSize+ol - ((this.blockSize+ol) & (this.blockSize-1)); i <= nl;\n\t\ti+= this.blockSize) {\n      \t    this._block(c.subarray(16 * j, 16 * (j+1)));\n      \t    j += 1;\n    \t}\n    \tb.splice(0, 16 * j);\n    } else {\n    \tfor (i = this.blockSize+ol - ((this.blockSize+ol) & (this.blockSize-1)); i <= nl;\n             i+= this.blockSize) {\n      \t     this._block(b.splice(0,16));\n      \t}\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 5 big-endian words. TODO\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n    // Round out the buffer to a multiple of 16 words, less the 2 length words.\n    for (i = b.length + 2; i & 15; i++) {\n      b.push(0);\n    }\n\n    // append the length\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,16));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-1 initialization vector.\n   * @private\n   */\n  _init:[0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0],\n\n  /**\n   * The SHA-1 hash key.\n   * @private\n   */\n  _key:[0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6],\n\n  /**\n   * The SHA-1 logical functions f(0), f(1), ..., f(79).\n   * @private\n   */\n  _f:function(t, b, c, d) {\n    if (t <= 19) {\n      return (b & c) | (~b & d);\n    } else if (t <= 39) {\n      return b ^ c ^ d;\n    } else if (t <= 59) {\n      return (b & c) | (b & d) | (c & d);\n    } else if (t <= 79) {\n      return b ^ c ^ d;\n    }\n  },\n\n  /**\n   * Circular left-shift operator.\n   * @private\n   */\n  _S:function(n, x) {\n    return (x << n) | (x >>> 32-n);\n  },\n  \n  /**\n   * Perform one cycle of SHA-1.\n   * @param {Uint32Array|bitArray} words one block of words.\n   * @private\n   */\n  _block:function (words) {\n    var t, tmp, a, b, c, d, e,\n    h = this._h;\n    var w;\n    if (typeof Uint32Array !== 'undefined') {\n        // When words is passed to _block, it has 16 elements. SHA1 _block\n        // function extends words with new elements (at the end there are 80 elements). \n        // The problem is that if we use Uint32Array instead of Array, \n        // the length of Uint32Array cannot be changed. Thus, we replace words with a \n        // normal Array here.\n        w = Array(80); // do not use Uint32Array here as the instantiation is slower\n        for (var j=0; j<16; j++){\n            w[j] = words[j];\n        }\n    } else {\n        w = words;\n    }\n\n    a = h[0]; b = h[1]; c = h[2]; d = h[3]; e = h[4]; \n\n    for (t=0; t<=79; t++) {\n      if (t >= 16) {\n        w[t] = this._S(1, w[t-3] ^ w[t-8] ^ w[t-14] ^ w[t-16]);\n      }\n      tmp = (this._S(5, a) + this._f(t, b, c, d) + e + w[t] +\n             this._key[Math.floor(t/20)]) | 0;\n      e = d;\n      d = c;\n      c = this._S(30, b);\n      b = a;\n      a = tmp;\n   }\n\n   h[0] = (h[0]+a) |0;\n   h[1] = (h[1]+b) |0;\n   h[2] = (h[2]+c) |0;\n   h[3] = (h[3]+d) |0;\n   h[4] = (h[4]+e) |0;\n  }\n};\n/** @fileOverview Javascript SHA-256 implementation.\n *\n * An older version of this implementation is available in the public\n * domain, but this one is (c) Emily Stark, Mike Hamburg, Dan Boneh,\n * Stanford University 2008-2010 and BSD-licensed for liability\n * reasons.\n *\n * Special thanks to Aldo Cortesi for pointing out several bugs in\n * this code.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Context for a SHA-256 operation in progress.\n * @constructor\n */\nsjcl.hash.sha256 = function (hash) {\n  if (!this._key[0]) { this._precompute(); }\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 16 big-endian words.\n */\nsjcl.hash.sha256.hash = function (data) {\n  return (new sjcl.hash.sha256()).update(data).finalize();\n};\n\nsjcl.hash.sha256.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 512,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n\tvar c = new Uint32Array(b);\n    \tvar j = 0;\n    \tfor (i = 512+ol - ((512+ol) & 511); i <= nl; i+= 512) {\n      \t    this._block(c.subarray(16 * j, 16 * (j+1)));\n      \t    j += 1;\n    \t}\n    \tb.splice(0, 16 * j);\n    } else {\n\tfor (i = 512+ol - ((512+ol) & 511); i <= nl; i+= 512) {\n      \t    this._block(b.splice(0,16));\n      \t}\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 8 big-endian words.\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n    \n    // Round out the buffer to a multiple of 16 words, less the 2 length words.\n    for (i = b.length + 2; i & 15; i++) {\n      b.push(0);\n    }\n    \n    // append the length\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,16));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-256 initialization vector, to be precomputed.\n   * @private\n   */\n  _init:[],\n  /*\n  _init:[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19],\n  */\n  \n  /**\n   * The SHA-256 hash key, to be precomputed.\n   * @private\n   */\n  _key:[],\n  /*\n  _key:\n    [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n     0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n     0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n     0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n     0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n     0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n     0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n     0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2],\n  */\n\n\n  /**\n   * Function to precompute _init and _key.\n   * @private\n   */\n  _precompute: function () {\n    var i = 0, prime = 2, factor, isPrime;\n\n    function frac(x) { return (x-Math.floor(x)) * 0x100000000 | 0; }\n\n    for (; i<64; prime++) {\n      isPrime = true;\n      for (factor=2; factor*factor <= prime; factor++) {\n        if (prime % factor === 0) {\n          isPrime = false;\n          break;\n        }\n      }\n      if (isPrime) {\n        if (i<8) {\n          this._init[i] = frac(Math.pow(prime, 1/2));\n        }\n        this._key[i] = frac(Math.pow(prime, 1/3));\n        i++;\n      }\n    }\n  },\n  \n  /**\n   * Perform one cycle of SHA-256.\n   * @param {Uint32Array|bitArray} w one block of words.\n   * @private\n   */\n  _block:function (w) {  \n    var i, tmp, a, b,\n      h = this._h,\n      k = this._key,\n      h0 = h[0], h1 = h[1], h2 = h[2], h3 = h[3],\n      h4 = h[4], h5 = h[5], h6 = h[6], h7 = h[7];\n\n    /* Rationale for placement of |0 :\n     * If a value can overflow is original 32 bits by a factor of more than a few\n     * million (2^23 ish), there is a possibility that it might overflow the\n     * 53-bit mantissa and lose precision.\n     *\n     * To avoid this, we clamp back to 32 bits by |'ing with 0 on any value that\n     * propagates around the loop, and on the hash state h[].  I don't believe\n     * that the clamps on h4 and on h0 are strictly necessary, but it's close\n     * (for h4 anyway), and better safe than sorry.\n     *\n     * The clamps on h[] are necessary for the output to be correct even in the\n     * common case and for short inputs.\n     */\n    for (i=0; i<64; i++) {\n      // load up the input word for this round\n      if (i<16) {\n        tmp = w[i];\n      } else {\n        a   = w[(i+1 ) & 15];\n        b   = w[(i+14) & 15];\n        tmp = w[i&15] = ((a>>>7  ^ a>>>18 ^ a>>>3  ^ a<<25 ^ a<<14) + \n                         (b>>>17 ^ b>>>19 ^ b>>>10 ^ b<<15 ^ b<<13) +\n                         w[i&15] + w[(i+9) & 15]) | 0;\n      }\n      \n      tmp = (tmp + h7 + (h4>>>6 ^ h4>>>11 ^ h4>>>25 ^ h4<<26 ^ h4<<21 ^ h4<<7) +  (h6 ^ h4&(h5^h6)) + k[i]); // | 0;\n      \n      // shift register\n      h7 = h6; h6 = h5; h5 = h4;\n      h4 = h3 + tmp | 0;\n      h3 = h2; h2 = h1; h1 = h0;\n\n      h0 = (tmp +  ((h1&h2) ^ (h3&(h1^h2))) + (h1>>>2 ^ h1>>>13 ^ h1>>>22 ^ h1<<30 ^ h1<<19 ^ h1<<10)) | 0;\n    }\n\n    h[0] = h[0]+h0 | 0;\n    h[1] = h[1]+h1 | 0;\n    h[2] = h[2]+h2 | 0;\n    h[3] = h[3]+h3 | 0;\n    h[4] = h[4]+h4 | 0;\n    h[5] = h[5]+h5 | 0;\n    h[6] = h[6]+h6 | 0;\n    h[7] = h[7]+h7 | 0;\n  }\n};\n\n\n/** @fileOverview Javascript SHA-512 implementation.\n *\n * This implementation was written for CryptoJS by Jeff Mott and adapted for\n * SJCL by Stefan Thomas.\n *\n * CryptoJS (c) 2009–2012 by Jeff Mott. All rights reserved.\n * Released with New BSD License\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n * @author Jeff Mott\n * @author Stefan Thomas\n */\n\n/**\n * Context for a SHA-512 operation in progress.\n * @constructor\n */\nsjcl.hash.sha512 = function (hash) {\n  if (!this._key[0]) { this._precompute(); }\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 16 big-endian words.\n */\nsjcl.hash.sha512.hash = function (data) {\n  return (new sjcl.hash.sha512()).update(data).finalize();\n};\n\nsjcl.hash.sha512.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 1024,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n        var c = new Uint32Array(b);\n        var j = 0;\n        for (i = 1024+ol - ((1024+ol) & 1023); i <= nl; i+= 1024) {\n            this._block(c.subarray(32 * j, 32 * (j+1)));\n            j += 1;\n        }\n        b.splice(0, 32 * j);\n    } else {\n        for (i = 1024+ol - ((1024+ol) & 1023); i <= nl; i+= 1024) {\n            this._block(b.splice(0,32));\n        }\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 16 big-endian words.\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n\n    // Round out the buffer to a multiple of 32 words, less the 4 length words.\n    for (i = b.length + 4; i & 31; i++) {\n      b.push(0);\n    }\n\n    // append the length\n    b.push(0);\n    b.push(0);\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,32));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-512 initialization vector, to be precomputed.\n   * @private\n   */\n  _init:[],\n\n  /**\n   * Least significant 24 bits of SHA512 initialization values.\n   *\n   * Javascript only has 53 bits of precision, so we compute the 40 most\n   * significant bits and add the remaining 24 bits as constants.\n   *\n   * @private\n   */\n  _initr: [ 0xbcc908, 0xcaa73b, 0x94f82b, 0x1d36f1, 0xe682d1, 0x3e6c1f, 0x41bd6b, 0x7e2179 ],\n\n  /*\n  _init:\n  [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n   0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179],\n  */\n\n  /**\n   * The SHA-512 hash key, to be precomputed.\n   * @private\n   */\n  _key:[],\n\n  /**\n   * Least significant 24 bits of SHA512 key values.\n   * @private\n   */\n  _keyr:\n  [0x28ae22, 0xef65cd, 0x4d3b2f, 0x89dbbc, 0x48b538, 0x05d019, 0x194f9b, 0x6d8118,\n   0x030242, 0x706fbe, 0xe4b28c, 0xffb4e2, 0x7b896f, 0x1696b1, 0xc71235, 0x692694,\n   0xf14ad2, 0x4f25e3, 0x8cd5b5, 0xac9c65, 0x2b0275, 0xa6e483, 0x41fbd4, 0x1153b5,\n   0x66dfab, 0xb43210, 0xfb213f, 0xef0ee4, 0xa88fc2, 0x0aa725, 0x03826f, 0x0e6e70,\n   0xd22ffc, 0x26c926, 0xc42aed, 0x95b3df, 0xaf63de, 0x77b2a8, 0xedaee6, 0x82353b,\n   0xf10364, 0x423001, 0xf89791, 0x54be30, 0xef5218, 0x65a910, 0x71202a, 0xbbd1b8,\n   0xd2d0c8, 0x41ab53, 0x8eeb99, 0x9b48a8, 0xc95a63, 0x418acb, 0x63e373, 0xb2b8a3,\n   0xefb2fc, 0x172f60, 0xf0ab72, 0x6439ec, 0x631e28, 0x82bde9, 0xc67915, 0x72532b,\n   0x26619c, 0xc0c207, 0xe0eb1e, 0x6ed178, 0x176fba, 0xc898a6, 0xf90dae, 0x1c471b,\n   0x047d84, 0xc72493, 0xc9bebc, 0x100d4c, 0x3e42b6, 0x657e2a, 0xd6faec, 0x475817],\n\n  /*\n  _key:\n  [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n   0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n   0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n   0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n   0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n   0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n   0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n   0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n   0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n   0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n   0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n   0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n   0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n   0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n   0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n   0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n   0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n   0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n   0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n   0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817],\n  */\n\n  /**\n   * Function to precompute _init and _key.\n   * @private\n   */\n  _precompute: function () {\n    // XXX: This code is for precomputing the SHA256 constants, change for\n    //      SHA512 and re-enable.\n    var i = 0, prime = 2, factor , isPrime;\n\n    function frac(x)  { return (x-Math.floor(x)) * 0x100000000 | 0; }\n    function frac2(x) { return (x-Math.floor(x)) * 0x10000000000 & 0xff; }\n\n    for (; i<80; prime++) {\n      isPrime = true;\n      for (factor=2; factor*factor <= prime; factor++) {\n        if (prime % factor === 0) {\n          isPrime = false;\n          break;\n        }\n      }\n      if (isPrime) {\n        if (i<8) {\n          this._init[i*2] = frac(Math.pow(prime, 1/2));\n          this._init[i*2+1] = (frac2(Math.pow(prime, 1/2)) << 24) | this._initr[i];\n        }\n        this._key[i*2] = frac(Math.pow(prime, 1/3));\n        this._key[i*2+1] = (frac2(Math.pow(prime, 1/3)) << 24) | this._keyr[i];\n        i++;\n      }\n    }\n  },\n\n  /**\n   * Perform one cycle of SHA-512.\n   * @param {Uint32Array|bitArray} words one block of words.\n   * @private\n   */\n  _block:function (words) {\n    var i, wrh, wrl,\n        h = this._h,\n        k = this._key,\n        h0h = h[ 0], h0l = h[ 1], h1h = h[ 2], h1l = h[ 3],\n        h2h = h[ 4], h2l = h[ 5], h3h = h[ 6], h3l = h[ 7],\n        h4h = h[ 8], h4l = h[ 9], h5h = h[10], h5l = h[11],\n        h6h = h[12], h6l = h[13], h7h = h[14], h7l = h[15];\n    var w;\n    if (typeof Uint32Array !== 'undefined') {\n\t// When words is passed to _block, it has 32 elements. SHA512 _block\n\t// function extends words with new elements (at the end there are 160 elements). \n\t// The problem is that if we use Uint32Array instead of Array, \n\t// the length of Uint32Array cannot be changed. Thus, we replace words with a \n\t// normal Array here.\n        w = Array(160); // do not use Uint32Array here as the instantiation is slower\n        for (var j=0; j<32; j++){\n    \t    w[j] = words[j]; \n        }\n    } else {\n\tw = words;\n    } \n\n    // Working variables\n    var ah = h0h, al = h0l, bh = h1h, bl = h1l,\n        ch = h2h, cl = h2l, dh = h3h, dl = h3l,\n        eh = h4h, el = h4l, fh = h5h, fl = h5l,\n        gh = h6h, gl = h6l, hh = h7h, hl = h7l;\n\n    for (i=0; i<80; i++) {\n      // load up the input word for this round\n      if (i<16) {\n        wrh = w[i * 2];\n        wrl = w[i * 2 + 1];\n      } else {\n        // Gamma0\n        var gamma0xh = w[(i-15) * 2];\n        var gamma0xl = w[(i-15) * 2 + 1];\n        var gamma0h =\n          ((gamma0xl << 31) | (gamma0xh >>> 1)) ^\n          ((gamma0xl << 24) | (gamma0xh >>> 8)) ^\n           (gamma0xh >>> 7);\n        var gamma0l =\n          ((gamma0xh << 31) | (gamma0xl >>> 1)) ^\n          ((gamma0xh << 24) | (gamma0xl >>> 8)) ^\n          ((gamma0xh << 25) | (gamma0xl >>> 7));\n\n        // Gamma1\n        var gamma1xh = w[(i-2) * 2];\n        var gamma1xl = w[(i-2) * 2 + 1];\n        var gamma1h =\n          ((gamma1xl << 13) | (gamma1xh >>> 19)) ^\n          ((gamma1xh << 3)  | (gamma1xl >>> 29)) ^\n           (gamma1xh >>> 6);\n        var gamma1l =\n          ((gamma1xh << 13) | (gamma1xl >>> 19)) ^\n          ((gamma1xl << 3)  | (gamma1xh >>> 29)) ^\n          ((gamma1xh << 26) | (gamma1xl >>> 6));\n\n        // Shortcuts\n        var wr7h = w[(i-7) * 2];\n        var wr7l = w[(i-7) * 2 + 1];\n\n        var wr16h = w[(i-16) * 2];\n        var wr16l = w[(i-16) * 2 + 1];\n\n        // W(round) = gamma0 + W(round - 7) + gamma1 + W(round - 16)\n        wrl = gamma0l + wr7l;\n        wrh = gamma0h + wr7h + ((wrl >>> 0) < (gamma0l >>> 0) ? 1 : 0);\n        wrl += gamma1l;\n        wrh += gamma1h + ((wrl >>> 0) < (gamma1l >>> 0) ? 1 : 0);\n        wrl += wr16l;\n        wrh += wr16h + ((wrl >>> 0) < (wr16l >>> 0) ? 1 : 0);\n      }\n\n      w[i*2]     = wrh |= 0;\n      w[i*2 + 1] = wrl |= 0;\n\n      // Ch\n      var chh = (eh & fh) ^ (~eh & gh);\n      var chl = (el & fl) ^ (~el & gl);\n\n      // Maj\n      var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\n      var majl = (al & bl) ^ (al & cl) ^ (bl & cl);\n\n      // Sigma0\n      var sigma0h = ((al << 4) | (ah >>> 28)) ^ ((ah << 30) | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\n      var sigma0l = ((ah << 4) | (al >>> 28)) ^ ((al << 30) | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\n\n      // Sigma1\n      var sigma1h = ((el << 18) | (eh >>> 14)) ^ ((el << 14) | (eh >>> 18)) ^ ((eh << 23) | (el >>> 9));\n      var sigma1l = ((eh << 18) | (el >>> 14)) ^ ((eh << 14) | (el >>> 18)) ^ ((el << 23) | (eh >>> 9));\n\n      // K(round)\n      var krh = k[i*2];\n      var krl = k[i*2+1];\n\n      // t1 = h + sigma1 + ch + K(round) + W(round)\n      var t1l = hl + sigma1l;\n      var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\n      t1l += chl;\n      t1h += chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\n      t1l += krl;\n      t1h += krh + ((t1l >>> 0) < (krl >>> 0) ? 1 : 0);\n      t1l = t1l + wrl|0;   // FF32..FF34 perf issue https://bugzilla.mozilla.org/show_bug.cgi?id=1054972\n      t1h += wrh + ((t1l >>> 0) < (wrl >>> 0) ? 1 : 0);\n\n      // t2 = sigma0 + maj\n      var t2l = sigma0l + majl;\n      var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);\n\n      // Update working variables\n      hh = gh;\n      hl = gl;\n      gh = fh;\n      gl = fl;\n      fh = eh;\n      fl = el;\n      el = (dl + t1l) | 0;\n      eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n      dh = ch;\n      dl = cl;\n      ch = bh;\n      cl = bl;\n      bh = ah;\n      bl = al;\n      al = (t1l + t2l) | 0;\n      ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\n    }\n\n    // Intermediate hash\n    h0l = h[1] = (h0l + al) | 0;\n    h[0] = (h0h + ah + ((h0l >>> 0) < (al >>> 0) ? 1 : 0)) | 0;\n    h1l = h[3] = (h1l + bl) | 0;\n    h[2] = (h1h + bh + ((h1l >>> 0) < (bl >>> 0) ? 1 : 0)) | 0;\n    h2l = h[5] = (h2l + cl) | 0;\n    h[4] = (h2h + ch + ((h2l >>> 0) < (cl >>> 0) ? 1 : 0)) | 0;\n    h3l = h[7] = (h3l + dl) | 0;\n    h[6] = (h3h + dh + ((h3l >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n    h4l = h[9] = (h4l + el) | 0;\n    h[8] = (h4h + eh + ((h4l >>> 0) < (el >>> 0) ? 1 : 0)) | 0;\n    h5l = h[11] = (h5l + fl) | 0;\n    h[10] = (h5h + fh + ((h5l >>> 0) < (fl >>> 0) ? 1 : 0)) | 0;\n    h6l = h[13] = (h6l + gl) | 0;\n    h[12] = (h6h + gh + ((h6l >>> 0) < (gl >>> 0) ? 1 : 0)) | 0;\n    h7l = h[15] = (h7l + hl) | 0;\n    h[14] = (h7h + hh + ((h7l >>> 0) < (hl >>> 0) ? 1 : 0)) | 0;\n  }\n};\n\n\n/** @fileOverview HMAC implementation.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/** HMAC with the specified hash function.\n * @constructor\n * @param {bitArray} key the key for HMAC.\n * @param {Object} [Hash=sjcl.hash.sha256] The hash function to use.\n */\nsjcl.misc.hmac = function (key, Hash) {\n  this._hash = Hash = Hash || sjcl.hash.sha256;\n  var exKey = [[],[]], i,\n      bs = Hash.prototype.blockSize / 32;\n  this._baseHash = [new Hash(), new Hash()];\n\n  if (key.length > bs) {\n    key = Hash.hash(key);\n  }\n  \n  for (i=0; i<bs; i++) {\n    exKey[0][i] = key[i]^0x36363636;\n    exKey[1][i] = key[i]^0x5C5C5C5C;\n  }\n  \n  this._baseHash[0].update(exKey[0]);\n  this._baseHash[1].update(exKey[1]);\n  this._resultHash = new Hash(this._baseHash[0]);\n};\n\n/** HMAC with the specified hash function.  Also called encrypt since it's a prf.\n * @param {bitArray|String} data The data to mac.\n */\nsjcl.misc.hmac.prototype.encrypt = sjcl.misc.hmac.prototype.mac = function (data) {\n  if (!this._updated) {\n    this.update(data);\n    return this.digest(data);\n  } else {\n    throw new sjcl.exception.invalid(\"encrypt on already updated hmac called!\");\n  }\n};\n\nsjcl.misc.hmac.prototype.reset = function () {\n  this._resultHash = new this._hash(this._baseHash[0]);\n  this._updated = false;\n};\n\nsjcl.misc.hmac.prototype.update = function (data) {\n  this._updated = true;\n  this._resultHash.update(data);\n};\n\nsjcl.misc.hmac.prototype.digest = function () {\n  var w = this._resultHash.finalize(), result = new (this._hash)(this._baseHash[1]).update(w).finalize();\n\n  this.reset();\n\n  return result;\n};\nif(typeof module !== 'undefined' && module.exports){\n  module.exports = sjcl;\n}\nif (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n        return sjcl;\n    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// otpauth.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 69594f353bcd73c95bd7","'use strict';\n\n/**\n * An object containing some utilities.\n * @type {Object}\n *\n * @property {function(buf: ArrayBuffer): number} uint.decode\n *   Converts an ArrayBuffer to an integer.\n * @property {function(num: number): ArrayBuffer} uint.encode\n *   Converts an integer to an ArrayBuffer.\n *\n * @property {function(buf: ArrayBuffer): string} raw.decode\n *   Converts an ArrayBuffer to a string.\n * @property {function(str: string): ArrayBuffer} raw.encode\n *   Converts a string to an ArrayBuffer.\n *\n * @property {function(buf: ArrayBuffer): string} b32.decode\n *   Converts an ArrayBuffer to a base32 string (RFC 4648).\n * @property {function(str: string): ArrayBuffer} b32.encode\n *   Converts a base32 string to an ArrayBuffer (RFC 4648).\n *\n * @property {function(buf: ArrayBuffer): string} hex.decode\n *   Converts an ArrayBuffer to a hexadecimal string.\n * @property {function(str: string): ArrayBuffer} hex.encode\n *   Converts a hexadecimal string to an ArrayBuffer.\n */\nexport const Utils = {\n\t'uint': {}, 'raw': {}, 'b32': {}, 'hex': {}\n};\n\nUtils.uint.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\tlet num = 0;\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] === 0) continue;\n\t\tnum *= 256;\n\t\tnum += arr[i];\n\t}\n\n\treturn num;\n};\n\nUtils.uint.encode = function (num) {\n\tconst buf = new ArrayBuffer(8);\n\tconst arr = new Uint8Array(buf);\n\tlet acc = num;\n\n\tfor (let i = 7; i >= 0; i--) {\n\t\tif (acc === 0) break;\n\t\tarr[i] = acc & 255;\n\t\tacc -= arr[i];\n\t\tacc /= 256;\n\t}\n\n\treturn buf;\n};\n\nUtils.raw.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\tlet str = '';\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tstr += String.fromCharCode(arr[i]);\n\t}\n\n\treturn str;\n};\n\nUtils.raw.encode = function (str) {\n\tconst buf = new ArrayBuffer(str.length);\n\tconst arr = new Uint8Array(buf);\n\n\tfor (let i = 0; i < str.length; i++) {\n\t\tarr[i] = str.charCodeAt(i);\n\t}\n\n\treturn buf;\n};\n\n// RFC 4648 base32 alphabet without pad\nUtils.b32.alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\n\n// Based on github.com/LinusU/base32-decode\nUtils.b32.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\n\tlet bits = 0;\n\tlet value = 0;\n\tlet str = '';\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tvalue = value << 8 | arr[i];\n\t\tbits += 8;\n\n\t\twhile (bits >= 5) {\n\t\t\tstr += Utils.b32.alphabet[value >>> bits - 5 & 31];\n\t\t\tbits -= 5;\n\t\t}\n\t}\n\n\tif (bits > 0) {\n\t\tstr += Utils.b32.alphabet[value << 5 - bits & 31];\n\t}\n\n\treturn str;\n};\n\n// Based on github.com/LinusU/base32-encode\nUtils.b32.encode = function (str) {\n\tconst strUpp = str.toUpperCase();\n\tconst buf = new ArrayBuffer(str.length * 5 / 8 | 0);\n\tconst arr = new Uint8Array(buf);\n\n\tlet bits = 0;\n\tlet value = 0;\n\tlet index = 0;\n\n\tfor (let i = 0; i < strUpp.length; i++) {\n\t\tlet idx = Utils.b32.alphabet.indexOf(strUpp[i]);\n\n\t\tif (idx === -1) {\n\t\t\tthrow new Error('Invalid character found: ' + strUpp[i]);\n\t\t}\n\n\t\tvalue = value << 5 | idx;\n\t\tbits += 5;\n\n\t\tif (bits >= 8) {\n\t\t\tarr[index++] = value >>> bits - 8 & 255;\n\t\t\tbits -= 8;\n\t\t}\n\t}\n\n\treturn buf;\n};\n\nUtils.hex.decode = function (buf) {\n\tconst arr = new Uint8Array(buf);\n\tlet str = '';\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tconst hexByte = arr[i].toString(16);\n\n\t\tstr += hexByte.length === 1\n\t\t\t? '0' + hexByte\n\t\t\t: hexByte;\n\t}\n\n\treturn str.toUpperCase();\n};\n\nUtils.hex.encode = function (str) {\n\tconst buf = new ArrayBuffer(str.length / 2);\n\tconst arr = new Uint8Array(buf);\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tarr[i] = parseInt(str.substr(i * 2, 2), 16);\n\t}\n\n\treturn buf;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Utils.js\n// module id = 0\n// module chunks = 0","'use strict';\n\nimport {Utils} from './Utils.js';\nimport {Crypto} from './Crypto.js';\n\n/**\n * @class Secret\n */\nexport class Secret {\n\t/**\n\t * Secret key object.\n\t * @param {Object} [config] Configuration options.\n\t * @param {ArrayBuffer} [config.buffer=random] Secret key, randomly generated by default.\n\t * @param {number} [config.size=20] Number of bytes to generate, ignored if 'buffer' is provided.\n\t */\n\tconstructor ({buffer, size = 20} = {}) {\n\t\t/** @type {ArrayBuffer} */\n\t\tthis.buffer = typeof buffer === 'undefined'\n\t\t\t? this.buffer = Crypto.randomBytes(size).buffer\n\t\t\t: buffer;\n\t}\n\n\t/**\n\t * Converts a raw string to a Secret object.\n\t * @method fromRaw\n\t * @param {string} str Raw string.\n\t * @returns {Secret} Secret object.\n\t */\n\tstatic fromRaw (str) {\n\t\treturn new this({'buffer': Utils.raw.encode(str)});\n\t}\n\n\t/**\n\t * Converts a base32 string to a Secret object.\n\t * @method fromB32\n\t * @param {string} str Base32 string.\n\t * @returns {Secret} Secret object.\n\t */\n\tstatic fromB32 (str) {\n\t\treturn new this({'buffer': Utils.b32.encode(str)});\n\t}\n\n\t/**\n\t * Converts a hexadecimal string to a Secret object.\n\t * @method fromHex\n\t * @param {string} str Hexadecimal string.\n\t * @returns {Secret} Secret object.\n\t */\n\tstatic fromHex (str) {\n\t\treturn new this({'buffer': Utils.hex.encode(str)});\n\t}\n\n\t/** @type {string} */\n\tget raw () {\n\t\tObject.defineProperty(this, 'raw', {\n\t\t\t'enumerable': true,\n\t\t\t'configurable': true,\n\t\t\t'writable': true,\n\t\t\t'value': Utils.raw.decode(this.buffer)\n\t\t});\n\n\t\treturn this.raw;\n\t}\n\n\t/** @type {string} */\n\tget b32 () {\n\t\tObject.defineProperty(this, 'b32', {\n\t\t\t'enumerable': true,\n\t\t\t'configurable': true,\n\t\t\t'writable': true,\n\t\t\t'value': Utils.b32.decode(this.buffer)\n\t\t});\n\n\t\treturn this.b32;\n\t}\n\n\t/** @type {string} */\n\tget hex () {\n\t\tObject.defineProperty(this, 'hex', {\n\t\t\t'enumerable': true,\n\t\t\t'configurable': true,\n\t\t\t'writable': true,\n\t\t\t'value': Utils.hex.decode(this.buffer)\n\t\t});\n\n\t\treturn this.hex;\n\t}\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Secret.js\n// module id = 1\n// module chunks = 0","'use strict';\n\nimport {Utils} from './Utils.js';\nimport {Crypto} from './Crypto.js';\nimport {Secret} from './Secret.js';\nimport {URI} from './URI.js';\n\n/**\n * Default Configuration.\n * @private\n */\nconst DC = {\n\t'issuer': '',\n\t'label': 'OTPAuth',\n\t'algorithm': 'SHA1',\n\t'digits': 6,\n\t'counter': 0,\n\t'period': 30,\n\t'window': 50,\n\t'pad': true\n};\n\n/**\n * @class HOTP\n */\nexport class HOTP {\n\t/**\n\t * HOTP: An HMAC-based One-time Password Algorithm (RFC 4226)\n\t * @see https://tools.ietf.org/html/rfc4226\n\t * @param {Object} [config] Configuration options.\n\t * @param {string} [config.issuer] Account provider.\n\t * @param {string} [config.label=OTPAuth] Account label.\n\t * @param {Secret} [config.secret=Secret] Secret key.\n\t * @param {string} [config.algorithm=SHA1] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.counter=0] Initial counter value.\n\t */\n\tconstructor ({issuer = DC.issuer, label = DC.label, secret = new Secret(), algorithm = DC.algorithm, digits = DC.digits, counter = DC.counter} = {}) {\n\t\t/** @type {string} */\n\t\tthis.issuer = issuer;\n\t\t/** @type {string} */\n\t\tthis.label = label;\n\t\t/** @type {string} */\n\t\tthis.algorithm = algorithm;\n\t\t/** @type {Secret} */\n\t\tthis.secret = secret;\n\t\t/** @type {number} */\n\t\tthis.digits = digits;\n\t\t/** @type {number} */\n\t\tthis.counter = counter;\n\t}\n\n\t/**\n\t * Generates an HOTP token.\n\t * @method generate\n\t * @param {Object} config Configuration options.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm=SHA1] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.counter=0] Counter value.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tstatic generate ({secret, algorithm = DC.algorithm, digits = DC.digits, counter = DC.counter, pad = DC.pad}) {\n\t\tconst digest = new Uint8Array(Crypto.hmacDigest(algorithm, secret.buffer, Utils.uint.encode(counter)));\n\n\t\tconst offset = digest[digest.byteLength - 1] & 15;\n\t\tconst binary = (\n\t\t\t(digest[offset] & 127) << 24 |\n\t\t\t(digest[offset + 1] & 255) << 16 |\n\t\t\t(digest[offset + 2] & 255) << 8 |\n\t\t\t(digest[offset + 3] & 255)\n\t\t) % Math.pow(10, digits);\n\n\t\treturn pad\n\t\t\t// ? '0'.repeat(digits - String(binary).length) + binary\n\t\t\t? Array(1 + digits - String(binary).length).join('0') + binary\n\t\t\t: binary;\n\t}\n\n\t/**\n\t * Generates an HOTP token.\n\t * @method generate\n\t * @param {Object} [config] Configuration options.\n\t * @param {number} [config.counter=this.counter++] Counter value.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tgenerate ({counter = this.counter++, pad} = {}) {\n\t\treturn HOTP.generate({\n\t\t\t'secret': this.secret,\n\t\t\t'algorithm': this.algorithm,\n\t\t\t'digits': this.digits,\n\t\t\t'counter': counter,\n\t\t\t'pad': pad\n\t\t});\n\t}\n\n\t/**\n\t * Validates an HOTP token.\n\t * @method validate\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm=SHA1] HMAC hashing algorithm.\n\t * @param {number} [config.counter=0] Counter value.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tstatic validate ({token, secret, algorithm, counter = DC.counter, window = DC.window}) {\n\t\tconst searchToken = parseInt(token, 10);\n\n\t\tfor (let i = counter - window; i <= counter + window; ++i) {\n\t\t\tconst generatedToken = HOTP.generate({\n\t\t\t\t'secret': secret,\n\t\t\t\t'algorithm': algorithm,\n\t\t\t\t'counter': i,\n\t\t\t\t'digits': token.length,\n\t\t\t\t'pad': false\n\t\t\t});\n\n\t\t\tif (searchToken === generatedToken) {\n\t\t\t\treturn i - counter;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Validates an HOTP token.\n\t * @method validate\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {number} [config.counter=this.counter] Counter value.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tvalidate ({token, counter = this.counter, window}) {\n\t\treturn HOTP.validate({\n\t\t\t'token': token,\n\t\t\t'secret': this.secret,\n\t\t\t'algorithm': this.algorithm,\n\t\t\t'counter': counter,\n\t\t\t'window': window\n\t\t});\n\t}\n\n\t/**\n\t * Returns a Google Authenticator key URI.\n\t * @method toString\n\t * @returns {string} URI.\n\t */\n\ttoString () {\n\t\treturn URI.stringify(this);\n\t}\n}\n\n/**\n * @class TOTP\n */\nexport class TOTP {\n\t/**\n\t * TOTP: Time-Based One-Time Password Algorithm (RFC 6238).\n\t * @see https://tools.ietf.org/html/rfc6238\n\t * @param {Object} [config] Configuration options.\n\t * @param {string} [config.issuer] Account provider.\n\t * @param {string} [config.label=OTPAuth] Account label.\n\t * @param {Secret} [config.secret=Secret] Secret key.\n\t * @param {string} [config.algorithm=SHA1] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.period=30] Token time-step duration.\n\t */\n\tconstructor ({issuer = DC.issuer, label = DC.label, secret = new Secret(), algorithm = DC.algorithm, digits = DC.digits, period = DC.period} = {}) {\n\t\t/** @type {string} */\n\t\tthis.issuer = issuer;\n\t\t/** @type {string} */\n\t\tthis.label = label;\n\t\t/** @type {string} */\n\t\tthis.secret = secret;\n\t\t/** @type {Secret} */\n\t\tthis.algorithm = algorithm;\n\t\t/** @type {number} */\n\t\tthis.digits = digits;\n\t\t/** @type {number} */\n\t\tthis.period = period;\n\t}\n\n\t/**\n\t * Generates a TOTP token.\n\t * @method generate\n\t * @param {Object} config Configuration options.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm=SHA1] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.period=30] Token time-step duration.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tstatic generate ({secret, algorithm, digits, period = DC.period, timestamp = Date.now(), pad}) {\n\t\treturn HOTP.generate({\n\t\t\t'secret': secret,\n\t\t\t'algorithm': algorithm,\n\t\t\t'digits': digits,\n\t\t\t'counter': Math.floor(timestamp / 1000 / period),\n\t\t\t'pad': pad\n\t\t});\n\t}\n\n\t/**\n\t * Generates a TOTP token.\n\t * @method generate\n\t * @param {Object} [config] Configuration options.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {boolean} [config.pad=true] Add leading zeros to result.\n\t * @returns {string|number} Token.\n\t */\n\tgenerate ({timestamp = Date.now(), pad} = {}) {\n\t\treturn TOTP.generate({\n\t\t\t'secret': this.secret,\n\t\t\t'algorithm': this.algorithm,\n\t\t\t'digits': this.digits,\n\t\t\t'period': this.period,\n\t\t\t'timestamp': timestamp,\n\t\t\t'pad': pad\n\t\t});\n\t}\n\n\t/**\n\t * Validates a TOTP token.\n\t * @method validate\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm=SHA1] HMAC hashing algorithm.\n\t * @param {number} [config.period=30] Token time-step duration.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tstatic validate ({token, secret, algorithm, period = DC.period, timestamp = Date.now(), window}) {\n\t\treturn HOTP.validate({\n\t\t\t'token': token,\n\t\t\t'secret': secret,\n\t\t\t'algorithm': algorithm,\n\t\t\t'counter': Math.floor(timestamp / 1000 / period),\n\t\t\t'window': window\n\t\t});\n\t}\n\n\t/**\n\t * Validates a TOTP token.\n\t * @method validate\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {number} [config.window=50] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tvalidate ({token, timestamp, window}) {\n\t\treturn TOTP.validate({\n\t\t\t'token': token,\n\t\t\t'secret': this.secret,\n\t\t\t'algorithm': this.algorithm,\n\t\t\t'period': this.period,\n\t\t\t'timestamp': timestamp,\n\t\t\t'window': window\n\t\t});\n\t}\n\n\t/**\n\t * Returns a Google Authenticator key URI.\n\t * @method toString\n\t * @returns {string} URI.\n\t */\n\ttoString () {\n\t\treturn URI.stringify(this);\n\t}\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/OTP.js\n// module id = 2\n// module chunks = 0","import sjcl from 'sjcl';\n\n/**\n * An object containing some cryptography functions\n * with dirty workarounds for Node.js and browsers.\n * @private\n */\nexport const Crypto = {};\n\nlet nodeCrypto;\n\nif (typeof window === 'undefined' &&\n\ttypeof module !== 'undefined'\n) {\n\t// Dynamically require 'crypto' module to prevent issues with Webpack\n\t// eslint-disable-next-line no-eval\n\tnodeCrypto = eval('require')('crypto');\n}\n\nif (typeof nodeCrypto !== 'undefined') {\n\tlet bufferFrom;\n\n\tif (typeof Buffer.from === 'function') {\n\t\tbufferFrom = Buffer.from;\n\t} else {\n\t\t// Node.js < 5.10.0\n\t\tbufferFrom = function (arrbuf) {\n\t\t\t// eslint-disable-next-line node/no-deprecated-api\n\t\t\tconst nodeBuf = new Buffer(arrbuf.byteLength);\n\t\t\tconst arr = new Uint8Array(arrbuf);\n\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tnodeBuf[i] = arr[i];\n\t\t\t}\n\n\t\t\treturn nodeBuf;\n\t\t};\n\t}\n\n\tlet bufferTo;\n\n\tif (Buffer.prototype instanceof Uint8Array) {\n\t\tbufferTo = function (nodeBuf) {\n\t\t\treturn nodeBuf;\n\t\t};\n\t} else {\n\t\t// Node.js < 4.0.0\n\t\tbufferTo = function (nodeBuf) {\n\t\t\tconst arr = new Uint8Array(nodeBuf.length);\n\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = nodeBuf[i];\n\t\t\t}\n\n\t\t\treturn arr;\n\t\t};\n\t}\n\n\tCrypto.randomBytes = function (size) {\n\t\treturn bufferTo(nodeCrypto.randomBytes(size));\n\t};\n\n\t// In Node.js, the command:\n\t//   $ openssl list-message-digest-algorithms\n\t// displays the available digest algorithms.\n\tCrypto.hmacDigest = function (algorithm, key, message) {\n\t\treturn bufferTo(\n\t\t\tnodeCrypto.createHmac(algorithm, bufferFrom(key))\n\t\t\t\t.update(bufferFrom(message))\n\t\t\t\t.digest()\n\t\t);\n\t};\n} else {\n\tlet getRandomValues;\n\n\tif (typeof global.crypto !== 'undefined' && typeof global.crypto.getRandomValues === 'function') {\n\t\tgetRandomValues = function (arr) {\n\t\t\tglobal.crypto.getRandomValues(arr);\n\t\t};\n\t} else if (typeof global.msCrypto !== 'undefined' && typeof global.msCrypto.getRandomValues === 'function') {\n\t\tgetRandomValues = function (arr) {\n\t\t\tglobal.msCrypto.getRandomValues(arr);\n\t\t};\n\t} else {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.warn('Cryptography API not available, falling back to \\'Math.random\\'...');\n\n\t\tgetRandomValues = function (arr) {\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = Math.floor(Math.random() * 256);\n\t\t\t}\n\t\t};\n\t}\n\n\tCrypto.randomBytes = function (size) {\n\t\tconst arr = new Uint8Array(size);\n\t\tgetRandomValues(arr);\n\n\t\treturn arr;\n\t};\n\n\tCrypto.hmacDigest = function (algorithm, key, message) {\n\t\tconst hash = sjcl.hash[algorithm.toLowerCase()];\n\n\t\tif (typeof hash === 'undefined') {\n\t\t\tthrow Error('Unknown hash function');\n\t\t}\n\n\t\t// eslint-disable-next-line new-cap\n\t\tconst hmac = new sjcl.misc.hmac(sjcl.codec.arrayBuffer.toBits(key), hash);\n\t\thmac.update(sjcl.codec.arrayBuffer.toBits(message));\n\n\t\treturn sjcl.codec.arrayBuffer.fromBits(hmac.digest(), false);\n\t};\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Crypto.js\n// module id = 3\n// module chunks = 0","'use strict';\n\nimport {Utils} from './Utils.js';\nimport {Secret} from './Secret.js';\nimport {HOTP, TOTP} from './OTP.js';\n\n/*\n * Google Authenticator key URI format:\n *   https://github.com/google/google-authenticator/wiki/Key-Uri-Format\n */\n\n// otpauth://TYPE/[ISSUER:]LABEL?PARAMETERS\nconst OTPURI_PARAMS = ['issuer', 'label', 'secret', 'algorithm', 'digits', 'counter', 'period'].join('|');\nconst OTPURI_REGEX = RegExp(`^otpauth:\\\\/\\\\/([ht]otp)\\\\/(.+)\\\\?((?:&?(?:${OTPURI_PARAMS})=[^&]+)+)$`, 'i');\n\n// RFC 4648 base32 alphabet without pad\nconst SECRET_REGEX = /^[2-7A-Z]+$/i;\n\n// Support all algorithms defined in the format spec\nconst ALGORITHM_REGEX = /^SHA(?:1|256|512)$/i;\n\n// Integer\nconst INTEGER_REGEX = /^[+-]?[0-9]+$/;\n\n// Positive integer, excluding 0\nconst POSITIVE_INTEGER_REGEX = /^\\+?[1-9][0-9]*$/;\n\n/**\n * @class URI\n */\nexport class URI {\n\t/**\n\t * Parses a Google Authenticator key URI and returns an HOTP/TOTP object.\n\t * @method parse\n\t * @param {string} uri Google Authenticator Key URI.\n\t * @returns {Object} HOTP/TOTP object.\n\t */\n\tstatic parse (uri) {\n\t\tconst uriGroups = decodeURIComponent(uri).match(OTPURI_REGEX);\n\n\t\tif (uriGroups === null) {\n\t\t\tthrow Error('Invalid URI format');\n\t\t}\n\n\t\t// Extract URI groups\n\t\tconst uriType = uriGroups[1].toLowerCase();\n\t\tconst uriLabel = uriGroups[2].split(/:(.+)/, 2);\n\t\tconst uriParams = uriGroups[3].split('&').reduce(function (acc, cur) {\n\t\t\tconst pairArr = cur.split(/=(.+)/, 2);\n\t\t\tconst pairKey = pairArr[0].toLowerCase();\n\t\t\tconst pairVal = pairArr[1];\n\t\t\tconst pairAcc = acc;\n\n\t\t\tpairAcc[pairKey] = pairVal;\n\t\t\treturn pairAcc;\n\t\t}, {});\n\n\t\t// 'OTP' will be instantiated with 'config' argument\n\t\tlet OTP;\n\t\tlet config = {};\n\n\t\tif (uriType === 'hotp') {\n\t\t\tOTP = HOTP;\n\n\t\t\t// counter: required\n\t\t\tif (typeof uriParams.counter !== 'undefined' && INTEGER_REGEX.test(uriParams.counter)) {\n\t\t\t\tconfig.counter = parseInt(uriParams.counter, 10);\n\t\t\t} else {\n\t\t\t\tthrow Error('Missing or invalid \\'counter\\' parameter');\n\t\t\t}\n\t\t} else if (uriType === 'totp') {\n\t\t\tOTP = TOTP;\n\n\t\t\t// period: optional\n\t\t\tif (typeof uriParams.period !== 'undefined') {\n\t\t\t\tif (POSITIVE_INTEGER_REGEX.test(uriParams.period)) {\n\t\t\t\t\tconfig.period = parseInt(uriParams.period, 10);\n\t\t\t\t} else {\n\t\t\t\t\tthrow Error('Invalid \\'period\\' parameter');\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow Error('Unknown OTP type');\n\t\t}\n\n\t\t// label: required\n\t\t// issuer: optional\n\t\tif (uriLabel.length === 2) {\n\t\t\tconfig.label = uriLabel[1];\n\t\t\tif (typeof uriParams.issuer === 'undefined') {\n\t\t\t\tconfig.issuer = uriLabel[0];\n\t\t\t} else if (uriParams.issuer === uriLabel[0]) {\n\t\t\t\tconfig.issuer = uriParams.issuer;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid \\'issuer\\' parameter');\n\t\t\t}\n\t\t} else {\n\t\t\tconfig.label = uriLabel[0];\n\t\t\tif (typeof uriParams.issuer !== 'undefined') {\n\t\t\t\tconfig.issuer = uriParams.issuer;\n\t\t\t}\n\t\t}\n\n\t\t// secret: required\n\t\tif (typeof uriParams.secret !== 'undefined' && SECRET_REGEX.test(uriParams.secret)) {\n\t\t\tconfig.secret = new Secret({'buffer': Utils.b32.encode(uriParams.secret)});\n\t\t} else {\n\t\t\tthrow Error('Missing or invalid \\'secret\\' parameter');\n\t\t}\n\n\t\t// algorithm: optional\n\t\tif (typeof uriParams.algorithm !== 'undefined') {\n\t\t\tif (ALGORITHM_REGEX.test(uriParams.algorithm)) {\n\t\t\t\tconfig.algorithm = uriParams.algorithm;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid \\'algorithm\\' parameter');\n\t\t\t}\n\t\t}\n\n\t\t// digits: optional\n\t\tif (typeof uriParams.digits !== 'undefined') {\n\t\t\tif (POSITIVE_INTEGER_REGEX.test(uriParams.digits)) {\n\t\t\t\tconfig.digits = parseInt(uriParams.digits, 10);\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid \\'digits\\' parameter');\n\t\t\t}\n\t\t}\n\n\t\treturn new OTP(config);\n\t}\n\n\t/**\n\t * Converts an HOTP/TOTP object to a Google Authenticator key URI.\n\t * @method stringify\n\t * @param {Object} otp HOTP/TOTP object.\n\t * @param {Object} [config] Configuration options.\n\t * @param {boolean} [config.legacyIssuer=true] Set issuer label prefix.\n\t * @returns {string} Google Authenticator Key URI.\n\t */\n\tstatic stringify (otp, {legacyIssuer = true} = {}) {\n\t\tif (!(otp instanceof HOTP || otp instanceof TOTP)) {\n\t\t\tthrow Error('Invalid \\'HOTP/TOTP\\' object');\n\t\t}\n\n\t\t// Key URI format:\n\t\t// otpauth://TYPE/[ISSUER:]LABEL?PARAMETERS\n\t\tlet uri = 'otpauth://';\n\n\t\t// Type\n\t\turi += (otp instanceof TOTP ? 'totp' : 'hotp') + '/';\n\n\t\t// Label and optional issuer\n\t\tif (otp.issuer.length > 0) {\n\t\t\t// Issuer label prefix\n\t\t\tif (legacyIssuer) {\n\t\t\t\turi += `${otp.issuer}:`;\n\t\t\t}\n\n\t\t\turi += `${otp.label}?issuer=${otp.issuer}&`;\n\t\t} else {\n\t\t\t// No issuer\n\t\t\turi += `${otp.label}?`;\n\t\t}\n\n\t\t// Generic parameters\n\t\turi += `secret=${otp.secret.b32}` +\n\t\t\t`&algorithm=${otp.algorithm}` +\n\t\t\t`&digits=${otp.digits}`;\n\n\t\t// Extra parameters\n\t\tif (otp instanceof TOTP) {\n\t\t\t// TOTP parameters\n\t\t\turi += `&period=${otp.period}`;\n\t\t} else {\n\t\t\t// HOTP parameters\n\t\t\turi += `&counter=${otp.counter}`;\n\t\t}\n\n\t\treturn encodeURI(uri);\n\t}\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/URI.js\n// module id = 4\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 6\n// module chunks = 0","/** @fileOverview Javascript cryptography implementation.\n *\n * Crush to remove comments, shorten variable names and\n * generally reduce transmission size.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n\"use strict\";\n/*jslint indent: 2, bitwise: false, nomen: false, plusplus: false, white: false, regexp: false */\n/*global document, window, escape, unescape, module, require, Uint32Array */\n\n/**\n * The Stanford Javascript Crypto Library, top-level namespace.\n * @namespace\n */\nvar sjcl = {\n  /**\n   * Symmetric ciphers.\n   * @namespace\n   */\n  cipher: {},\n\n  /**\n   * Hash functions.  Right now only SHA256 is implemented.\n   * @namespace\n   */\n  hash: {},\n\n  /**\n   * Key exchange functions.  Right now only SRP is implemented.\n   * @namespace\n   */\n  keyexchange: {},\n  \n  /**\n   * Cipher modes of operation.\n   * @namespace\n   */\n  mode: {},\n\n  /**\n   * Miscellaneous.  HMAC and PBKDF2.\n   * @namespace\n   */\n  misc: {},\n  \n  /**\n   * Bit array encoders and decoders.\n   * @namespace\n   *\n   * @description\n   * The members of this namespace are functions which translate between\n   * SJCL's bitArrays and other objects (usually strings).  Because it\n   * isn't always clear which direction is encoding and which is decoding,\n   * the method names are \"fromBits\" and \"toBits\".\n   */\n  codec: {},\n  \n  /**\n   * Exceptions.\n   * @namespace\n   */\n  exception: {\n    /**\n     * Ciphertext is corrupt.\n     * @constructor\n     */\n    corrupt: function(message) {\n      this.toString = function() { return \"CORRUPT: \"+this.message; };\n      this.message = message;\n    },\n    \n    /**\n     * Invalid parameter.\n     * @constructor\n     */\n    invalid: function(message) {\n      this.toString = function() { return \"INVALID: \"+this.message; };\n      this.message = message;\n    },\n    \n    /**\n     * Bug or missing feature in SJCL.\n     * @constructor\n     */\n    bug: function(message) {\n      this.toString = function() { return \"BUG: \"+this.message; };\n      this.message = message;\n    },\n\n    /**\n     * Something isn't ready.\n     * @constructor\n     */\n    notReady: function(message) {\n      this.toString = function() { return \"NOT READY: \"+this.message; };\n      this.message = message;\n    }\n  }\n};\n/** @fileOverview Arrays of bits, encoded as arrays of Numbers.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Arrays of bits, encoded as arrays of Numbers.\n * @namespace\n * @description\n * <p>\n * These objects are the currency accepted by SJCL's crypto functions.\n * </p>\n *\n * <p>\n * Most of our crypto primitives operate on arrays of 4-byte words internally,\n * but many of them can take arguments that are not a multiple of 4 bytes.\n * This library encodes arrays of bits (whose size need not be a multiple of 8\n * bits) as arrays of 32-bit words.  The bits are packed, big-endian, into an\n * array of words, 32 bits at a time.  Since the words are double-precision\n * floating point numbers, they fit some extra data.  We use this (in a private,\n * possibly-changing manner) to encode the number of bits actually  present\n * in the last word of the array.\n * </p>\n *\n * <p>\n * Because bitwise ops clear this out-of-band data, these arrays can be passed\n * to ciphers like AES which want arrays of words.\n * </p>\n */\nsjcl.bitArray = {\n  /**\n   * Array slices in units of bits.\n   * @param {bitArray} a The array to slice.\n   * @param {Number} bstart The offset to the start of the slice, in bits.\n   * @param {Number} bend The offset to the end of the slice, in bits.  If this is undefined,\n   * slice until the end of the array.\n   * @return {bitArray} The requested slice.\n   */\n  bitSlice: function (a, bstart, bend) {\n    a = sjcl.bitArray._shiftRight(a.slice(bstart/32), 32 - (bstart & 31)).slice(1);\n    return (bend === undefined) ? a : sjcl.bitArray.clamp(a, bend-bstart);\n  },\n\n  /**\n   * Extract a number packed into a bit array.\n   * @param {bitArray} a The array to slice.\n   * @param {Number} bstart The offset to the start of the slice, in bits.\n   * @param {Number} blength The length of the number to extract.\n   * @return {Number} The requested slice.\n   */\n  extract: function(a, bstart, blength) {\n    // FIXME: this Math.floor is not necessary at all, but for some reason\n    // seems to suppress a bug in the Chromium JIT.\n    var x, sh = Math.floor((-bstart-blength) & 31);\n    if ((bstart + blength - 1 ^ bstart) & -32) {\n      // it crosses a boundary\n      x = (a[bstart/32|0] << (32 - sh)) ^ (a[bstart/32+1|0] >>> sh);\n    } else {\n      // within a single word\n      x = a[bstart/32|0] >>> sh;\n    }\n    return x & ((1<<blength) - 1);\n  },\n\n  /**\n   * Concatenate two bit arrays.\n   * @param {bitArray} a1 The first array.\n   * @param {bitArray} a2 The second array.\n   * @return {bitArray} The concatenation of a1 and a2.\n   */\n  concat: function (a1, a2) {\n    if (a1.length === 0 || a2.length === 0) {\n      return a1.concat(a2);\n    }\n    \n    var last = a1[a1.length-1], shift = sjcl.bitArray.getPartial(last);\n    if (shift === 32) {\n      return a1.concat(a2);\n    } else {\n      return sjcl.bitArray._shiftRight(a2, shift, last|0, a1.slice(0,a1.length-1));\n    }\n  },\n\n  /**\n   * Find the length of an array of bits.\n   * @param {bitArray} a The array.\n   * @return {Number} The length of a, in bits.\n   */\n  bitLength: function (a) {\n    var l = a.length, x;\n    if (l === 0) { return 0; }\n    x = a[l - 1];\n    return (l-1) * 32 + sjcl.bitArray.getPartial(x);\n  },\n\n  /**\n   * Truncate an array.\n   * @param {bitArray} a The array.\n   * @param {Number} len The length to truncate to, in bits.\n   * @return {bitArray} A new array, truncated to len bits.\n   */\n  clamp: function (a, len) {\n    if (a.length * 32 < len) { return a; }\n    a = a.slice(0, Math.ceil(len / 32));\n    var l = a.length;\n    len = len & 31;\n    if (l > 0 && len) {\n      a[l-1] = sjcl.bitArray.partial(len, a[l-1] & 0x80000000 >> (len-1), 1);\n    }\n    return a;\n  },\n\n  /**\n   * Make a partial word for a bit array.\n   * @param {Number} len The number of bits in the word.\n   * @param {Number} x The bits.\n   * @param {Number} [_end=0] Pass 1 if x has already been shifted to the high side.\n   * @return {Number} The partial word.\n   */\n  partial: function (len, x, _end) {\n    if (len === 32) { return x; }\n    return (_end ? x|0 : x << (32-len)) + len * 0x10000000000;\n  },\n\n  /**\n   * Get the number of bits used by a partial word.\n   * @param {Number} x The partial word.\n   * @return {Number} The number of bits used by the partial word.\n   */\n  getPartial: function (x) {\n    return Math.round(x/0x10000000000) || 32;\n  },\n\n  /**\n   * Compare two arrays for equality in a predictable amount of time.\n   * @param {bitArray} a The first array.\n   * @param {bitArray} b The second array.\n   * @return {boolean} true if a == b; false otherwise.\n   */\n  equal: function (a, b) {\n    if (sjcl.bitArray.bitLength(a) !== sjcl.bitArray.bitLength(b)) {\n      return false;\n    }\n    var x = 0, i;\n    for (i=0; i<a.length; i++) {\n      x |= a[i]^b[i];\n    }\n    return (x === 0);\n  },\n\n  /** Shift an array right.\n   * @param {bitArray} a The array to shift.\n   * @param {Number} shift The number of bits to shift.\n   * @param {Number} [carry=0] A byte to carry in\n   * @param {bitArray} [out=[]] An array to prepend to the output.\n   * @private\n   */\n  _shiftRight: function (a, shift, carry, out) {\n    var i, last2=0, shift2;\n    if (out === undefined) { out = []; }\n    \n    for (; shift >= 32; shift -= 32) {\n      out.push(carry);\n      carry = 0;\n    }\n    if (shift === 0) {\n      return out.concat(a);\n    }\n    \n    for (i=0; i<a.length; i++) {\n      out.push(carry | a[i]>>>shift);\n      carry = a[i] << (32-shift);\n    }\n    last2 = a.length ? a[a.length-1] : 0;\n    shift2 = sjcl.bitArray.getPartial(last2);\n    out.push(sjcl.bitArray.partial(shift+shift2 & 31, (shift + shift2 > 32) ? carry : out.pop(),1));\n    return out;\n  },\n  \n  /** xor a block of 4 words together.\n   * @private\n   */\n  _xor4: function(x,y) {\n    return [x[0]^y[0],x[1]^y[1],x[2]^y[2],x[3]^y[3]];\n  },\n\n  /** byteswap a word array inplace.\n   * (does not handle partial words)\n   * @param {sjcl.bitArray} a word array\n   * @return {sjcl.bitArray} byteswapped array\n   */\n  byteswapM: function(a) {\n    var i, v, m = 0xff00;\n    for (i = 0; i < a.length; ++i) {\n      v = a[i];\n      a[i] = (v >>> 24) | ((v >>> 8) & m) | ((v & m) << 8) | (v << 24);\n    }\n    return a;\n  }\n};\n/** @fileOverview Bit array codec implementations.\n *\n * @author Marco Munizaga\n */\n\n//patch arraybuffers if they don't exist\nif (typeof(ArrayBuffer) === 'undefined') {\n  (function(globals){\n      \"use strict\";\n      globals.ArrayBuffer = function(){};\n      globals.DataView = function(){};\n  }(this));\n}\n\n/**\n * ArrayBuffer\n * @namespace\n */\nsjcl.codec.arrayBuffer = {\n  /** Convert from a bitArray to an ArrayBuffer. \n   * Will default to 8byte padding if padding is undefined*/\n  fromBits: function (arr, padding, padding_count) {\n    var out, i, ol, tmp, smallest;\n    padding = padding==undefined  ? true : padding;\n    padding_count = padding_count || 8;\n\n    if (arr.length === 0) {\n      return new ArrayBuffer(0);\n    }\n\n    ol = sjcl.bitArray.bitLength(arr)/8;\n\n    //check to make sure the bitLength is divisible by 8, if it isn't \n    //we can't do anything since arraybuffers work with bytes, not bits\n    if ( sjcl.bitArray.bitLength(arr)%8 !== 0 ) {\n      throw new sjcl.exception.invalid(\"Invalid bit size, must be divisble by 8 to fit in an arraybuffer correctly\");\n    }\n\n    if (padding && ol%padding_count !== 0){\n      ol += padding_count - (ol%padding_count);\n    }\n\n\n    //padded temp for easy copying\n    tmp = new DataView(new ArrayBuffer(arr.length*4));\n    for (i=0; i<arr.length; i++) {\n      tmp.setUint32(i*4, (arr[i]<<32)); //get rid of the higher bits\n    }\n\n    //now copy the final message if we are not going to 0 pad\n    out = new DataView(new ArrayBuffer(ol));\n\n    //save a step when the tmp and out bytelength are ===\n    if (out.byteLength === tmp.byteLength){\n      return tmp.buffer;\n    }\n\n    smallest = tmp.byteLength < out.byteLength ? tmp.byteLength : out.byteLength;\n    for(i=0; i<smallest; i++){\n      out.setUint8(i,tmp.getUint8(i));\n    }\n\n\n    return out.buffer;\n  },\n\n  toBits: function (buffer) {\n    var i, out=[], len, inView, tmp;\n\n    if (buffer.byteLength === 0) {\n      return [];\n    }\n\n    inView = new DataView(buffer);\n    len = inView.byteLength - inView.byteLength%4;\n\n    for (var i = 0; i < len; i+=4) {\n      out.push(inView.getUint32(i));\n    }\n\n    if (inView.byteLength%4 != 0) {\n      tmp = new DataView(new ArrayBuffer(4));\n      for (var i = 0, l = inView.byteLength%4; i < l; i++) {\n        //we want the data to the right, because partial slices off the starting bits\n        tmp.setUint8(i+4-l, inView.getUint8(len+i)); // big-endian, \n      }\n      out.push(\n        sjcl.bitArray.partial( (inView.byteLength%4)*8, tmp.getUint32(0) )\n      ); \n    }\n    return out;\n  },\n\n\n\n  /** Prints a hex output of the buffer contents, akin to hexdump **/\n  hexDumpBuffer: function(buffer){\n      var stringBufferView = new DataView(buffer);\n      var string = '';\n      var pad = function (n, width) {\n          n = n + '';\n          return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n;\n      };\n\n      for (var i = 0; i < stringBufferView.byteLength; i+=2) {\n          if (i%16 == 0) string += ('\\n'+(i).toString(16)+'\\t');\n          string += ( pad(stringBufferView.getUint16(i).toString(16),4) + ' ');\n      }\n\n      if ( typeof console === undefined ){\n        console = console || {log:function(){}}; //fix for IE\n      }\n      console.log(string.toUpperCase());\n  }\n};\n\n/** @fileOverview Javascript SHA-1 implementation.\n *\n * Based on the implementation in RFC 3174, method 1, and on the SJCL\n * SHA-256 implementation.\n *\n * @author Quinn Slack\n */\n\n/**\n * Context for a SHA-1 operation in progress.\n * @constructor\n */\nsjcl.hash.sha1 = function (hash) {\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 5 big-endian words.\n */\nsjcl.hash.sha1.hash = function (data) {\n  return (new sjcl.hash.sha1()).update(data).finalize();\n};\n\nsjcl.hash.sha1.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 512,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n\tvar c = new Uint32Array(b);\n    \tvar j = 0;\n    \tfor (i = this.blockSize+ol - ((this.blockSize+ol) & (this.blockSize-1)); i <= nl;\n\t\ti+= this.blockSize) {\n      \t    this._block(c.subarray(16 * j, 16 * (j+1)));\n      \t    j += 1;\n    \t}\n    \tb.splice(0, 16 * j);\n    } else {\n    \tfor (i = this.blockSize+ol - ((this.blockSize+ol) & (this.blockSize-1)); i <= nl;\n             i+= this.blockSize) {\n      \t     this._block(b.splice(0,16));\n      \t}\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 5 big-endian words. TODO\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n    // Round out the buffer to a multiple of 16 words, less the 2 length words.\n    for (i = b.length + 2; i & 15; i++) {\n      b.push(0);\n    }\n\n    // append the length\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,16));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-1 initialization vector.\n   * @private\n   */\n  _init:[0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0],\n\n  /**\n   * The SHA-1 hash key.\n   * @private\n   */\n  _key:[0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6],\n\n  /**\n   * The SHA-1 logical functions f(0), f(1), ..., f(79).\n   * @private\n   */\n  _f:function(t, b, c, d) {\n    if (t <= 19) {\n      return (b & c) | (~b & d);\n    } else if (t <= 39) {\n      return b ^ c ^ d;\n    } else if (t <= 59) {\n      return (b & c) | (b & d) | (c & d);\n    } else if (t <= 79) {\n      return b ^ c ^ d;\n    }\n  },\n\n  /**\n   * Circular left-shift operator.\n   * @private\n   */\n  _S:function(n, x) {\n    return (x << n) | (x >>> 32-n);\n  },\n  \n  /**\n   * Perform one cycle of SHA-1.\n   * @param {Uint32Array|bitArray} words one block of words.\n   * @private\n   */\n  _block:function (words) {\n    var t, tmp, a, b, c, d, e,\n    h = this._h;\n    var w;\n    if (typeof Uint32Array !== 'undefined') {\n        // When words is passed to _block, it has 16 elements. SHA1 _block\n        // function extends words with new elements (at the end there are 80 elements). \n        // The problem is that if we use Uint32Array instead of Array, \n        // the length of Uint32Array cannot be changed. Thus, we replace words with a \n        // normal Array here.\n        w = Array(80); // do not use Uint32Array here as the instantiation is slower\n        for (var j=0; j<16; j++){\n            w[j] = words[j];\n        }\n    } else {\n        w = words;\n    }\n\n    a = h[0]; b = h[1]; c = h[2]; d = h[3]; e = h[4]; \n\n    for (t=0; t<=79; t++) {\n      if (t >= 16) {\n        w[t] = this._S(1, w[t-3] ^ w[t-8] ^ w[t-14] ^ w[t-16]);\n      }\n      tmp = (this._S(5, a) + this._f(t, b, c, d) + e + w[t] +\n             this._key[Math.floor(t/20)]) | 0;\n      e = d;\n      d = c;\n      c = this._S(30, b);\n      b = a;\n      a = tmp;\n   }\n\n   h[0] = (h[0]+a) |0;\n   h[1] = (h[1]+b) |0;\n   h[2] = (h[2]+c) |0;\n   h[3] = (h[3]+d) |0;\n   h[4] = (h[4]+e) |0;\n  }\n};\n/** @fileOverview Javascript SHA-256 implementation.\n *\n * An older version of this implementation is available in the public\n * domain, but this one is (c) Emily Stark, Mike Hamburg, Dan Boneh,\n * Stanford University 2008-2010 and BSD-licensed for liability\n * reasons.\n *\n * Special thanks to Aldo Cortesi for pointing out several bugs in\n * this code.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Context for a SHA-256 operation in progress.\n * @constructor\n */\nsjcl.hash.sha256 = function (hash) {\n  if (!this._key[0]) { this._precompute(); }\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 16 big-endian words.\n */\nsjcl.hash.sha256.hash = function (data) {\n  return (new sjcl.hash.sha256()).update(data).finalize();\n};\n\nsjcl.hash.sha256.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 512,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n\tvar c = new Uint32Array(b);\n    \tvar j = 0;\n    \tfor (i = 512+ol - ((512+ol) & 511); i <= nl; i+= 512) {\n      \t    this._block(c.subarray(16 * j, 16 * (j+1)));\n      \t    j += 1;\n    \t}\n    \tb.splice(0, 16 * j);\n    } else {\n\tfor (i = 512+ol - ((512+ol) & 511); i <= nl; i+= 512) {\n      \t    this._block(b.splice(0,16));\n      \t}\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 8 big-endian words.\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n    \n    // Round out the buffer to a multiple of 16 words, less the 2 length words.\n    for (i = b.length + 2; i & 15; i++) {\n      b.push(0);\n    }\n    \n    // append the length\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,16));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-256 initialization vector, to be precomputed.\n   * @private\n   */\n  _init:[],\n  /*\n  _init:[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19],\n  */\n  \n  /**\n   * The SHA-256 hash key, to be precomputed.\n   * @private\n   */\n  _key:[],\n  /*\n  _key:\n    [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n     0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n     0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n     0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n     0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n     0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n     0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n     0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2],\n  */\n\n\n  /**\n   * Function to precompute _init and _key.\n   * @private\n   */\n  _precompute: function () {\n    var i = 0, prime = 2, factor, isPrime;\n\n    function frac(x) { return (x-Math.floor(x)) * 0x100000000 | 0; }\n\n    for (; i<64; prime++) {\n      isPrime = true;\n      for (factor=2; factor*factor <= prime; factor++) {\n        if (prime % factor === 0) {\n          isPrime = false;\n          break;\n        }\n      }\n      if (isPrime) {\n        if (i<8) {\n          this._init[i] = frac(Math.pow(prime, 1/2));\n        }\n        this._key[i] = frac(Math.pow(prime, 1/3));\n        i++;\n      }\n    }\n  },\n  \n  /**\n   * Perform one cycle of SHA-256.\n   * @param {Uint32Array|bitArray} w one block of words.\n   * @private\n   */\n  _block:function (w) {  \n    var i, tmp, a, b,\n      h = this._h,\n      k = this._key,\n      h0 = h[0], h1 = h[1], h2 = h[2], h3 = h[3],\n      h4 = h[4], h5 = h[5], h6 = h[6], h7 = h[7];\n\n    /* Rationale for placement of |0 :\n     * If a value can overflow is original 32 bits by a factor of more than a few\n     * million (2^23 ish), there is a possibility that it might overflow the\n     * 53-bit mantissa and lose precision.\n     *\n     * To avoid this, we clamp back to 32 bits by |'ing with 0 on any value that\n     * propagates around the loop, and on the hash state h[].  I don't believe\n     * that the clamps on h4 and on h0 are strictly necessary, but it's close\n     * (for h4 anyway), and better safe than sorry.\n     *\n     * The clamps on h[] are necessary for the output to be correct even in the\n     * common case and for short inputs.\n     */\n    for (i=0; i<64; i++) {\n      // load up the input word for this round\n      if (i<16) {\n        tmp = w[i];\n      } else {\n        a   = w[(i+1 ) & 15];\n        b   = w[(i+14) & 15];\n        tmp = w[i&15] = ((a>>>7  ^ a>>>18 ^ a>>>3  ^ a<<25 ^ a<<14) + \n                         (b>>>17 ^ b>>>19 ^ b>>>10 ^ b<<15 ^ b<<13) +\n                         w[i&15] + w[(i+9) & 15]) | 0;\n      }\n      \n      tmp = (tmp + h7 + (h4>>>6 ^ h4>>>11 ^ h4>>>25 ^ h4<<26 ^ h4<<21 ^ h4<<7) +  (h6 ^ h4&(h5^h6)) + k[i]); // | 0;\n      \n      // shift register\n      h7 = h6; h6 = h5; h5 = h4;\n      h4 = h3 + tmp | 0;\n      h3 = h2; h2 = h1; h1 = h0;\n\n      h0 = (tmp +  ((h1&h2) ^ (h3&(h1^h2))) + (h1>>>2 ^ h1>>>13 ^ h1>>>22 ^ h1<<30 ^ h1<<19 ^ h1<<10)) | 0;\n    }\n\n    h[0] = h[0]+h0 | 0;\n    h[1] = h[1]+h1 | 0;\n    h[2] = h[2]+h2 | 0;\n    h[3] = h[3]+h3 | 0;\n    h[4] = h[4]+h4 | 0;\n    h[5] = h[5]+h5 | 0;\n    h[6] = h[6]+h6 | 0;\n    h[7] = h[7]+h7 | 0;\n  }\n};\n\n\n/** @fileOverview Javascript SHA-512 implementation.\n *\n * This implementation was written for CryptoJS by Jeff Mott and adapted for\n * SJCL by Stefan Thomas.\n *\n * CryptoJS (c) 2009–2012 by Jeff Mott. All rights reserved.\n * Released with New BSD License\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n * @author Jeff Mott\n * @author Stefan Thomas\n */\n\n/**\n * Context for a SHA-512 operation in progress.\n * @constructor\n */\nsjcl.hash.sha512 = function (hash) {\n  if (!this._key[0]) { this._precompute(); }\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 16 big-endian words.\n */\nsjcl.hash.sha512.hash = function (data) {\n  return (new sjcl.hash.sha512()).update(data).finalize();\n};\n\nsjcl.hash.sha512.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 1024,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n        var c = new Uint32Array(b);\n        var j = 0;\n        for (i = 1024+ol - ((1024+ol) & 1023); i <= nl; i+= 1024) {\n            this._block(c.subarray(32 * j, 32 * (j+1)));\n            j += 1;\n        }\n        b.splice(0, 32 * j);\n    } else {\n        for (i = 1024+ol - ((1024+ol) & 1023); i <= nl; i+= 1024) {\n            this._block(b.splice(0,32));\n        }\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 16 big-endian words.\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n\n    // Round out the buffer to a multiple of 32 words, less the 4 length words.\n    for (i = b.length + 4; i & 31; i++) {\n      b.push(0);\n    }\n\n    // append the length\n    b.push(0);\n    b.push(0);\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,32));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-512 initialization vector, to be precomputed.\n   * @private\n   */\n  _init:[],\n\n  /**\n   * Least significant 24 bits of SHA512 initialization values.\n   *\n   * Javascript only has 53 bits of precision, so we compute the 40 most\n   * significant bits and add the remaining 24 bits as constants.\n   *\n   * @private\n   */\n  _initr: [ 0xbcc908, 0xcaa73b, 0x94f82b, 0x1d36f1, 0xe682d1, 0x3e6c1f, 0x41bd6b, 0x7e2179 ],\n\n  /*\n  _init:\n  [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n   0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179],\n  */\n\n  /**\n   * The SHA-512 hash key, to be precomputed.\n   * @private\n   */\n  _key:[],\n\n  /**\n   * Least significant 24 bits of SHA512 key values.\n   * @private\n   */\n  _keyr:\n  [0x28ae22, 0xef65cd, 0x4d3b2f, 0x89dbbc, 0x48b538, 0x05d019, 0x194f9b, 0x6d8118,\n   0x030242, 0x706fbe, 0xe4b28c, 0xffb4e2, 0x7b896f, 0x1696b1, 0xc71235, 0x692694,\n   0xf14ad2, 0x4f25e3, 0x8cd5b5, 0xac9c65, 0x2b0275, 0xa6e483, 0x41fbd4, 0x1153b5,\n   0x66dfab, 0xb43210, 0xfb213f, 0xef0ee4, 0xa88fc2, 0x0aa725, 0x03826f, 0x0e6e70,\n   0xd22ffc, 0x26c926, 0xc42aed, 0x95b3df, 0xaf63de, 0x77b2a8, 0xedaee6, 0x82353b,\n   0xf10364, 0x423001, 0xf89791, 0x54be30, 0xef5218, 0x65a910, 0x71202a, 0xbbd1b8,\n   0xd2d0c8, 0x41ab53, 0x8eeb99, 0x9b48a8, 0xc95a63, 0x418acb, 0x63e373, 0xb2b8a3,\n   0xefb2fc, 0x172f60, 0xf0ab72, 0x6439ec, 0x631e28, 0x82bde9, 0xc67915, 0x72532b,\n   0x26619c, 0xc0c207, 0xe0eb1e, 0x6ed178, 0x176fba, 0xc898a6, 0xf90dae, 0x1c471b,\n   0x047d84, 0xc72493, 0xc9bebc, 0x100d4c, 0x3e42b6, 0x657e2a, 0xd6faec, 0x475817],\n\n  /*\n  _key:\n  [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n   0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n   0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n   0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n   0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n   0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n   0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n   0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n   0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n   0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n   0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n   0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n   0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n   0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n   0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n   0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n   0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n   0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n   0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n   0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817],\n  */\n\n  /**\n   * Function to precompute _init and _key.\n   * @private\n   */\n  _precompute: function () {\n    // XXX: This code is for precomputing the SHA256 constants, change for\n    //      SHA512 and re-enable.\n    var i = 0, prime = 2, factor , isPrime;\n\n    function frac(x)  { return (x-Math.floor(x)) * 0x100000000 | 0; }\n    function frac2(x) { return (x-Math.floor(x)) * 0x10000000000 & 0xff; }\n\n    for (; i<80; prime++) {\n      isPrime = true;\n      for (factor=2; factor*factor <= prime; factor++) {\n        if (prime % factor === 0) {\n          isPrime = false;\n          break;\n        }\n      }\n      if (isPrime) {\n        if (i<8) {\n          this._init[i*2] = frac(Math.pow(prime, 1/2));\n          this._init[i*2+1] = (frac2(Math.pow(prime, 1/2)) << 24) | this._initr[i];\n        }\n        this._key[i*2] = frac(Math.pow(prime, 1/3));\n        this._key[i*2+1] = (frac2(Math.pow(prime, 1/3)) << 24) | this._keyr[i];\n        i++;\n      }\n    }\n  },\n\n  /**\n   * Perform one cycle of SHA-512.\n   * @param {Uint32Array|bitArray} words one block of words.\n   * @private\n   */\n  _block:function (words) {\n    var i, wrh, wrl,\n        h = this._h,\n        k = this._key,\n        h0h = h[ 0], h0l = h[ 1], h1h = h[ 2], h1l = h[ 3],\n        h2h = h[ 4], h2l = h[ 5], h3h = h[ 6], h3l = h[ 7],\n        h4h = h[ 8], h4l = h[ 9], h5h = h[10], h5l = h[11],\n        h6h = h[12], h6l = h[13], h7h = h[14], h7l = h[15];\n    var w;\n    if (typeof Uint32Array !== 'undefined') {\n\t// When words is passed to _block, it has 32 elements. SHA512 _block\n\t// function extends words with new elements (at the end there are 160 elements). \n\t// The problem is that if we use Uint32Array instead of Array, \n\t// the length of Uint32Array cannot be changed. Thus, we replace words with a \n\t// normal Array here.\n        w = Array(160); // do not use Uint32Array here as the instantiation is slower\n        for (var j=0; j<32; j++){\n    \t    w[j] = words[j]; \n        }\n    } else {\n\tw = words;\n    } \n\n    // Working variables\n    var ah = h0h, al = h0l, bh = h1h, bl = h1l,\n        ch = h2h, cl = h2l, dh = h3h, dl = h3l,\n        eh = h4h, el = h4l, fh = h5h, fl = h5l,\n        gh = h6h, gl = h6l, hh = h7h, hl = h7l;\n\n    for (i=0; i<80; i++) {\n      // load up the input word for this round\n      if (i<16) {\n        wrh = w[i * 2];\n        wrl = w[i * 2 + 1];\n      } else {\n        // Gamma0\n        var gamma0xh = w[(i-15) * 2];\n        var gamma0xl = w[(i-15) * 2 + 1];\n        var gamma0h =\n          ((gamma0xl << 31) | (gamma0xh >>> 1)) ^\n          ((gamma0xl << 24) | (gamma0xh >>> 8)) ^\n           (gamma0xh >>> 7);\n        var gamma0l =\n          ((gamma0xh << 31) | (gamma0xl >>> 1)) ^\n          ((gamma0xh << 24) | (gamma0xl >>> 8)) ^\n          ((gamma0xh << 25) | (gamma0xl >>> 7));\n\n        // Gamma1\n        var gamma1xh = w[(i-2) * 2];\n        var gamma1xl = w[(i-2) * 2 + 1];\n        var gamma1h =\n          ((gamma1xl << 13) | (gamma1xh >>> 19)) ^\n          ((gamma1xh << 3)  | (gamma1xl >>> 29)) ^\n           (gamma1xh >>> 6);\n        var gamma1l =\n          ((gamma1xh << 13) | (gamma1xl >>> 19)) ^\n          ((gamma1xl << 3)  | (gamma1xh >>> 29)) ^\n          ((gamma1xh << 26) | (gamma1xl >>> 6));\n\n        // Shortcuts\n        var wr7h = w[(i-7) * 2];\n        var wr7l = w[(i-7) * 2 + 1];\n\n        var wr16h = w[(i-16) * 2];\n        var wr16l = w[(i-16) * 2 + 1];\n\n        // W(round) = gamma0 + W(round - 7) + gamma1 + W(round - 16)\n        wrl = gamma0l + wr7l;\n        wrh = gamma0h + wr7h + ((wrl >>> 0) < (gamma0l >>> 0) ? 1 : 0);\n        wrl += gamma1l;\n        wrh += gamma1h + ((wrl >>> 0) < (gamma1l >>> 0) ? 1 : 0);\n        wrl += wr16l;\n        wrh += wr16h + ((wrl >>> 0) < (wr16l >>> 0) ? 1 : 0);\n      }\n\n      w[i*2]     = wrh |= 0;\n      w[i*2 + 1] = wrl |= 0;\n\n      // Ch\n      var chh = (eh & fh) ^ (~eh & gh);\n      var chl = (el & fl) ^ (~el & gl);\n\n      // Maj\n      var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\n      var majl = (al & bl) ^ (al & cl) ^ (bl & cl);\n\n      // Sigma0\n      var sigma0h = ((al << 4) | (ah >>> 28)) ^ ((ah << 30) | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\n      var sigma0l = ((ah << 4) | (al >>> 28)) ^ ((al << 30) | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\n\n      // Sigma1\n      var sigma1h = ((el << 18) | (eh >>> 14)) ^ ((el << 14) | (eh >>> 18)) ^ ((eh << 23) | (el >>> 9));\n      var sigma1l = ((eh << 18) | (el >>> 14)) ^ ((eh << 14) | (el >>> 18)) ^ ((el << 23) | (eh >>> 9));\n\n      // K(round)\n      var krh = k[i*2];\n      var krl = k[i*2+1];\n\n      // t1 = h + sigma1 + ch + K(round) + W(round)\n      var t1l = hl + sigma1l;\n      var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\n      t1l += chl;\n      t1h += chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\n      t1l += krl;\n      t1h += krh + ((t1l >>> 0) < (krl >>> 0) ? 1 : 0);\n      t1l = t1l + wrl|0;   // FF32..FF34 perf issue https://bugzilla.mozilla.org/show_bug.cgi?id=1054972\n      t1h += wrh + ((t1l >>> 0) < (wrl >>> 0) ? 1 : 0);\n\n      // t2 = sigma0 + maj\n      var t2l = sigma0l + majl;\n      var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);\n\n      // Update working variables\n      hh = gh;\n      hl = gl;\n      gh = fh;\n      gl = fl;\n      fh = eh;\n      fl = el;\n      el = (dl + t1l) | 0;\n      eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n      dh = ch;\n      dl = cl;\n      ch = bh;\n      cl = bl;\n      bh = ah;\n      bl = al;\n      al = (t1l + t2l) | 0;\n      ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\n    }\n\n    // Intermediate hash\n    h0l = h[1] = (h0l + al) | 0;\n    h[0] = (h0h + ah + ((h0l >>> 0) < (al >>> 0) ? 1 : 0)) | 0;\n    h1l = h[3] = (h1l + bl) | 0;\n    h[2] = (h1h + bh + ((h1l >>> 0) < (bl >>> 0) ? 1 : 0)) | 0;\n    h2l = h[5] = (h2l + cl) | 0;\n    h[4] = (h2h + ch + ((h2l >>> 0) < (cl >>> 0) ? 1 : 0)) | 0;\n    h3l = h[7] = (h3l + dl) | 0;\n    h[6] = (h3h + dh + ((h3l >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n    h4l = h[9] = (h4l + el) | 0;\n    h[8] = (h4h + eh + ((h4l >>> 0) < (el >>> 0) ? 1 : 0)) | 0;\n    h5l = h[11] = (h5l + fl) | 0;\n    h[10] = (h5h + fh + ((h5l >>> 0) < (fl >>> 0) ? 1 : 0)) | 0;\n    h6l = h[13] = (h6l + gl) | 0;\n    h[12] = (h6h + gh + ((h6l >>> 0) < (gl >>> 0) ? 1 : 0)) | 0;\n    h7l = h[15] = (h7l + hl) | 0;\n    h[14] = (h7h + hh + ((h7l >>> 0) < (hl >>> 0) ? 1 : 0)) | 0;\n  }\n};\n\n\n/** @fileOverview HMAC implementation.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/** HMAC with the specified hash function.\n * @constructor\n * @param {bitArray} key the key for HMAC.\n * @param {Object} [Hash=sjcl.hash.sha256] The hash function to use.\n */\nsjcl.misc.hmac = function (key, Hash) {\n  this._hash = Hash = Hash || sjcl.hash.sha256;\n  var exKey = [[],[]], i,\n      bs = Hash.prototype.blockSize / 32;\n  this._baseHash = [new Hash(), new Hash()];\n\n  if (key.length > bs) {\n    key = Hash.hash(key);\n  }\n  \n  for (i=0; i<bs; i++) {\n    exKey[0][i] = key[i]^0x36363636;\n    exKey[1][i] = key[i]^0x5C5C5C5C;\n  }\n  \n  this._baseHash[0].update(exKey[0]);\n  this._baseHash[1].update(exKey[1]);\n  this._resultHash = new Hash(this._baseHash[0]);\n};\n\n/** HMAC with the specified hash function.  Also called encrypt since it's a prf.\n * @param {bitArray|String} data The data to mac.\n */\nsjcl.misc.hmac.prototype.encrypt = sjcl.misc.hmac.prototype.mac = function (data) {\n  if (!this._updated) {\n    this.update(data);\n    return this.digest(data);\n  } else {\n    throw new sjcl.exception.invalid(\"encrypt on already updated hmac called!\");\n  }\n};\n\nsjcl.misc.hmac.prototype.reset = function () {\n  this._resultHash = new this._hash(this._baseHash[0]);\n  this._updated = false;\n};\n\nsjcl.misc.hmac.prototype.update = function (data) {\n  this._updated = true;\n  this._resultHash.update(data);\n};\n\nsjcl.misc.hmac.prototype.digest = function () {\n  var w = this._resultHash.finalize(), result = new (this._hash)(this._baseHash[1]).update(w).finalize();\n\n  this.reset();\n\n  return result;\n};\nif(typeof module !== 'undefined' && module.exports){\n  module.exports = sjcl;\n}\nif (typeof define === \"function\") {\n    define([], function () {\n        return sjcl;\n    });\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /tmp/tmp-27252OQTl8nih0x87.tmp\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}